{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\snntv\\OneDrive\\Documents\\AI Agent\\projects\\Meteor\\BlueSky\\packages\\minimongo\\local_collection.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/minimongo/local_collection.js","filename":"C:\\Users\\snntv\\OneDrive\\Documents\\AI Agent\\projects\\Meteor\\BlueSky\\packages\\minimongo\\local_collection.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"C:\\Users\\snntv\\OneDrive\\Documents\\AI Agent\\projects\\Meteor\\BlueSky","root":"C:\\Users\\snntv\\OneDrive\\Documents\\AI Agent\\projects\\Meteor\\BlueSky","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null,null]},"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"DoWhileStatement":{"exit":[null]},"ForInStatement":{"exit":[null]},"ForStatement":{"exit":[null]},"WhileStatement":{"exit":[null]},"ForOfStatement":{"exit":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-regenerator","visitor":{"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"C:\\Users\\snntv\\OneDrive\\Documents\\AI Agent\\projects\\Meteor\\BlueSky\\packages\\minimongo\\local_collection.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/minimongo/local_collection.js"}},"code":"var _toConsumableArray;\nmodule.link(\"@babel/runtime/helpers/toConsumableArray\", {\n  default: function (v) {\n    _toConsumableArray = v;\n  }\n}, 0);\nvar _typeof;\nmodule.link(\"@babel/runtime/helpers/typeof\", {\n  default: function (v) {\n    _typeof = v;\n  }\n}, 1);\nvar _inheritsLoose;\nmodule.link(\"@babel/runtime/helpers/inheritsLoose\", {\n  default: function (v) {\n    _inheritsLoose = v;\n  }\n}, 2);\nvar _objectSpread;\nmodule.link(\"@babel/runtime/helpers/objectSpread2\", {\n  default: function (v) {\n    _objectSpread = v;\n  }\n}, 3);\nvar _createForOfIteratorHelperLoose;\nmodule.link(\"@babel/runtime/helpers/createForOfIteratorHelperLoose\", {\n  default: function (v) {\n    _createForOfIteratorHelperLoose = v;\n  }\n}, 4);\nvar _readOnlyError;\nmodule.link(\"@babel/runtime/helpers/readOnlyError\", {\n  default: function (v) {\n    _readOnlyError = v;\n  }\n}, 5);\nvar _regeneratorRuntime;\nmodule.link(\"@babel/runtime/regenerator\", {\n  default: function (v) {\n    _regeneratorRuntime = v;\n  }\n}, 6);\nmodule.export({\n  \"default\": function () {\n    return LocalCollection;\n  }\n});\nvar Cursor;\nmodule.link(\"./cursor.js\", {\n  \"default\": function (v) {\n    Cursor = v;\n  }\n}, 0);\nvar ObserveHandle;\nmodule.link(\"./observe_handle.js\", {\n  \"default\": function (v) {\n    ObserveHandle = v;\n  }\n}, 1);\nvar hasOwn, isIndexable, isNumericKey, isOperatorObject, populateDocumentWithQueryFields, projectionDetails;\nmodule.link(\"./common.js\", {\n  hasOwn: function (v) {\n    hasOwn = v;\n  },\n  isIndexable: function (v) {\n    isIndexable = v;\n  },\n  isNumericKey: function (v) {\n    isNumericKey = v;\n  },\n  isOperatorObject: function (v) {\n    isOperatorObject = v;\n  },\n  populateDocumentWithQueryFields: function (v) {\n    populateDocumentWithQueryFields = v;\n  },\n  projectionDetails: function (v) {\n    projectionDetails = v;\n  }\n}, 2);\nvar getAsyncMethodName;\nmodule.link(\"./constants\", {\n  getAsyncMethodName: function (v) {\n    getAsyncMethodName = v;\n  }\n}, 3);\nvar LocalCollection = /*#__PURE__*/function () {\n  function LocalCollection(name) {\n    this.name = name;\n    // _id -> document (also containing id)\n    this._docs = new LocalCollection._IdMap();\n    this._observeQueue = Meteor.isClient ? new Meteor._SynchronousQueue() : new Meteor._AsynchronousQueue();\n    this.next_qid = 1; // live query id generator\n\n    // qid -> live query object. keys:\n    //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.\n    //  results: array (ordered) or object (unordered) of current results\n    //    (aliased with this._docs!)\n    //  resultsSnapshot: snapshot of results. null if not paused.\n    //  cursor: Cursor object for the query.\n    //  selector, sorter, (callbacks): functions\n    this.queries = Object.create(null);\n\n    // null if not saving originals; an IdMap from id to original document value\n    // if saving originals. See comments before saveOriginals().\n    this._savedOriginals = null;\n\n    // True when observers are paused and we should not send callbacks.\n    this.paused = false;\n  }\n  var _proto = LocalCollection.prototype;\n  _proto.countDocuments = function () {\n    function countDocuments(selector, options) {\n      return this.find(selector !== null && selector !== void 0 ? selector : {}, options).countAsync();\n    }\n    return countDocuments;\n  }();\n  _proto.estimatedDocumentCount = function () {\n    function estimatedDocumentCount(options) {\n      return this.find({}, options).countAsync();\n    }\n    return estimatedDocumentCount;\n  }() // options may include sort, skip, limit, reactive\n  // sort may be any of these forms:\n  //     {a: 1, b: -1}\n  //     [[\"a\", \"asc\"], [\"b\", \"desc\"]]\n  //     [\"a\", [\"b\", \"desc\"]]\n  //   (in the first form you're beholden to key enumeration order in\n  //   your javascript VM)\n  //\n  // reactive: if given, and false, don't register with Tracker (default\n  // is true)\n  //\n  // XXX possibly should support retrieving a subset of fields? and\n  // have it be a hint (ignored on the client, when not copying the\n  // doc?)\n  //\n  // XXX sort does not yet support subkeys ('a.b') .. fix that!\n  // XXX add one more sort form: \"key\"\n  // XXX tests\n  ;\n  _proto.find = function () {\n    function find(selector, options) {\n      // default syntax for everything is to omit the selector argument.\n      // but if selector is explicitly passed in as false or undefined, we\n      // want a selector that matches nothing.\n      if (arguments.length === 0) {\n        selector = {};\n      }\n      return new LocalCollection.Cursor(this, selector, options);\n    }\n    return find;\n  }();\n  _proto.findOne = function () {\n    function findOne(selector) {\n      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (arguments.length === 0) {\n        selector = {};\n      }\n\n      // NOTE: by setting limit 1 here, we end up using very inefficient\n      // code that recomputes the whole query on each update. The upside is\n      // that when you reactively depend on a findOne you only get\n      // invalidated when the found object changes, not any object in the\n      // collection. Most findOne will be by id, which has a fast path, so\n      // this might not be a big deal. In most cases, invalidation causes\n      // the called to re-query anyway, so this should be a net performance\n      // improvement.\n      options.limit = 1;\n      return this.find(selector, options).fetch()[0];\n    }\n    return findOne;\n  }();\n  _proto.findOneAsync = function () {\n    function findOneAsync(selector) {\n      var options,\n        _args = arguments;\n      return _regeneratorRuntime.async(function (_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            if (_args.length === 0) {\n              selector = {};\n            }\n            options.limit = 1;\n            _context.next = 1;\n            return _regeneratorRuntime.awrap(this.find(selector, options).fetchAsync());\n          case 1:\n            return _context.abrupt(\"return\", _context.sent[0]);\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }, null, this, null, Promise);\n    }\n    return findOneAsync;\n  }();\n  _proto.prepareInsert = function () {\n    function prepareInsert(doc) {\n      assertHasValidFieldNames(doc);\n\n      // if you really want to use ObjectIDs, set this global.\n      // Mongo.Collection specifies its own ids and does not use this code.\n      if (!hasOwn.call(doc, '_id')) {\n        doc._id = LocalCollection._useOID ? new MongoID.ObjectID() : Random.id();\n      }\n      var id = doc._id;\n      if (this._docs.has(id)) {\n        throw MinimongoError(\"Duplicate _id '\" + id + \"'\");\n      }\n      this._saveOriginal(id, undefined);\n      this._docs.set(id, doc);\n      return id;\n    }\n    return prepareInsert;\n  }() // XXX possibly enforce that 'undefined' does not appear (we assume\n  // this in our handling of null and $exists)\n  ;\n  _proto.insert = function () {\n    function insert(doc, callback) {\n      var _this = this;\n      doc = EJSON.clone(doc);\n      var id = this.prepareInsert(doc);\n      var queriesToRecompute = [];\n\n      // trigger live queries that match\n      for (var _i = 0, _Object$keys = Object.keys(this.queries); _i < _Object$keys.length; _i++) {\n        var qid = _Object$keys[_i];\n        var query = this.queries[qid];\n        if (query.dirty) {\n          continue;\n        }\n        var matchResult = query.matcher.documentMatches(doc);\n        if (matchResult.result) {\n          if (query.distances && matchResult.distance !== undefined) {\n            query.distances.set(id, matchResult.distance);\n          }\n          if (query.cursor.skip || query.cursor.limit) {\n            queriesToRecompute.push(qid);\n          } else {\n            LocalCollection._insertInResultsSync(query, doc);\n          }\n        }\n      }\n      queriesToRecompute.forEach(function (qid) {\n        if (_this.queries[qid]) {\n          _this._recomputeResults(_this.queries[qid]);\n        }\n      });\n      this._observeQueue.drain();\n      if (callback) {\n        Meteor.defer(function () {\n          callback(null, id);\n        });\n      }\n      return id;\n    }\n    return insert;\n  }();\n  _proto.insertAsync = function () {\n    function insertAsync(doc, callback) {\n      var _this2 = this;\n      var id, queriesToRecompute, _i2, _Object$keys2, qid, query, matchResult;\n      return _regeneratorRuntime.async(function (_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            doc = EJSON.clone(doc);\n            id = this.prepareInsert(doc);\n            queriesToRecompute = []; // trigger live queries that match\n            _i2 = 0, _Object$keys2 = Object.keys(this.queries);\n          case 1:\n            if (!(_i2 < _Object$keys2.length)) {\n              _context2.next = 5;\n              break;\n            }\n            qid = _Object$keys2[_i2];\n            query = this.queries[qid];\n            if (!query.dirty) {\n              _context2.next = 2;\n              break;\n            }\n            return _context2.abrupt(\"continue\", 4);\n          case 2:\n            matchResult = query.matcher.documentMatches(doc);\n            if (!matchResult.result) {\n              _context2.next = 4;\n              break;\n            }\n            if (query.distances && matchResult.distance !== undefined) {\n              query.distances.set(id, matchResult.distance);\n            }\n            if (!(query.cursor.skip || query.cursor.limit)) {\n              _context2.next = 3;\n              break;\n            }\n            queriesToRecompute.push(qid);\n            _context2.next = 4;\n            break;\n          case 3:\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(LocalCollection._insertInResultsAsync(query, doc));\n          case 4:\n            _i2++;\n            _context2.next = 1;\n            break;\n          case 5:\n            queriesToRecompute.forEach(function (qid) {\n              if (_this2.queries[qid]) {\n                _this2._recomputeResults(_this2.queries[qid]);\n              }\n            });\n            _context2.next = 6;\n            return _regeneratorRuntime.awrap(this._observeQueue.drain());\n          case 6:\n            if (callback) {\n              Meteor.defer(function () {\n                callback(null, id);\n              });\n            }\n            return _context2.abrupt(\"return\", id);\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, null, this, null, Promise);\n    }\n    return insertAsync;\n  }() // Pause the observers. No callbacks from observers will fire until\n  // 'resumeObservers' is called.\n  ;\n  _proto.pauseObservers = function () {\n    function pauseObservers() {\n      var _this3 = this;\n      // No-op if already paused.\n      if (this.paused) {\n        return;\n      }\n\n      // Set the 'paused' flag such that new observer messages don't fire.\n      this.paused = true;\n\n      // Take a snapshot of the query results for each query.\n      Object.keys(this.queries).forEach(function (qid) {\n        var query = _this3.queries[qid];\n        query.resultsSnapshot = EJSON.clone(query.results);\n      });\n    }\n    return pauseObservers;\n  }();\n  _proto.clearResultQueries = function () {\n    function clearResultQueries(callback) {\n      var _this4 = this;\n      var result = this._docs.size();\n      this._docs.clear();\n      Object.keys(this.queries).forEach(function (qid) {\n        var query = _this4.queries[qid];\n        if (query.ordered) {\n          query.results = [];\n        } else {\n          query.results.clear();\n        }\n      });\n      if (callback) {\n        Meteor.defer(function () {\n          callback(null, result);\n        });\n      }\n      return result;\n    }\n    return clearResultQueries;\n  }();\n  _proto.prepareRemove = function () {\n    function prepareRemove(selector) {\n      var _this5 = this;\n      var matcher = new Minimongo.Matcher(selector);\n      var remove = [];\n      this._eachPossiblyMatchingDocSync(selector, function (doc, id) {\n        if (matcher.documentMatches(doc).result) {\n          remove.push(id);\n        }\n      });\n      var queriesToRecompute = [];\n      var queryRemove = [];\n      var _loop = function () {\n        var removeId = remove[i];\n        var removeDoc = _this5._docs.get(removeId);\n        Object.keys(_this5.queries).forEach(function (qid) {\n          var query = _this5.queries[qid];\n          if (query.dirty) {\n            return;\n          }\n          if (query.matcher.documentMatches(removeDoc).result) {\n            if (query.cursor.skip || query.cursor.limit) {\n              queriesToRecompute.push(qid);\n            } else {\n              queryRemove.push({\n                qid: qid,\n                doc: removeDoc\n              });\n            }\n          }\n        });\n        _this5._saveOriginal(removeId, removeDoc);\n        _this5._docs.remove(removeId);\n      };\n      for (var i = 0; i < remove.length; i++) {\n        _loop();\n      }\n      return {\n        queriesToRecompute: queriesToRecompute,\n        queryRemove: queryRemove,\n        remove: remove\n      };\n    }\n    return prepareRemove;\n  }();\n  _proto.remove = function () {\n    function remove(selector, callback) {\n      var _this6 = this;\n      // Easy special case: if we're not calling observeChanges callbacks and\n      // we're not saving originals and we got asked to remove everything, then\n      // just empty everything directly.\n      if (this.paused && !this._savedOriginals && EJSON.equals(selector, {})) {\n        return this.clearResultQueries(callback);\n      }\n      var _this$prepareRemove = this.prepareRemove(selector),\n        queriesToRecompute = _this$prepareRemove.queriesToRecompute,\n        queryRemove = _this$prepareRemove.queryRemove,\n        remove = _this$prepareRemove.remove;\n\n      // run live query callbacks _after_ we've removed the documents.\n      queryRemove.forEach(function (remove) {\n        var query = _this6.queries[remove.qid];\n        if (query) {\n          query.distances && query.distances.remove(remove.doc._id);\n          LocalCollection._removeFromResultsSync(query, remove.doc);\n        }\n      });\n      queriesToRecompute.forEach(function (qid) {\n        var query = _this6.queries[qid];\n        if (query) {\n          _this6._recomputeResults(query);\n        }\n      });\n      this._observeQueue.drain();\n      var result = remove.length;\n      if (callback) {\n        Meteor.defer(function () {\n          callback(null, result);\n        });\n      }\n      return result;\n    }\n    return remove;\n  }();\n  _proto.removeAsync = function () {\n    function removeAsync(selector, callback) {\n      var _this7 = this;\n      var _this$prepareRemove2, queriesToRecompute, queryRemove, remove, _iterator, _step, _remove, query, result;\n      return _regeneratorRuntime.async(function (_context3) {\n        while (1) switch (_context3.prev = _context3.next) {\n          case 0:\n            if (!(this.paused && !this._savedOriginals && EJSON.equals(selector, {}))) {\n              _context3.next = 1;\n              break;\n            }\n            return _context3.abrupt(\"return\", this.clearResultQueries(callback));\n          case 1:\n            _this$prepareRemove2 = this.prepareRemove(selector), queriesToRecompute = _this$prepareRemove2.queriesToRecompute, queryRemove = _this$prepareRemove2.queryRemove, remove = _this$prepareRemove2.remove; // run live query callbacks _after_ we've removed the documents.\n            _iterator = _createForOfIteratorHelperLoose(queryRemove);\n          case 2:\n            if ((_step = _iterator()).done) {\n              _context3.next = 4;\n              break;\n            }\n            _remove = _step.value;\n            query = this.queries[_remove.qid];\n            if (!query) {\n              _context3.next = 3;\n              break;\n            }\n            query.distances && query.distances.remove(_remove.doc._id);\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(LocalCollection._removeFromResultsAsync(query, _remove.doc));\n          case 3:\n            _context3.next = 2;\n            break;\n          case 4:\n            queriesToRecompute.forEach(function (qid) {\n              var query = _this7.queries[qid];\n              if (query) {\n                _this7._recomputeResults(query);\n              }\n            });\n            _context3.next = 5;\n            return _regeneratorRuntime.awrap(this._observeQueue.drain());\n          case 5:\n            result = remove.length;\n            if (callback) {\n              Meteor.defer(function () {\n                callback(null, result);\n              });\n            }\n            return _context3.abrupt(\"return\", result);\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }, null, this, null, Promise);\n    }\n    return removeAsync;\n  }() // Resume the observers. Observers immediately receive change\n  // notifications to bring them to the current state of the\n  // database. Note that this is not just replaying all the changes that\n  // happened during the pause, it is a smarter 'coalesced' diff.\n  ;\n  _proto._resumeObservers = function () {\n    function _resumeObservers() {\n      var _this8 = this;\n      // No-op if not paused.\n      if (!this.paused) {\n        return;\n      }\n\n      // Unset the 'paused' flag. Make sure to do this first, otherwise\n      // observer methods won't actually fire when we trigger them.\n      this.paused = false;\n      Object.keys(this.queries).forEach(function (qid) {\n        var query = _this8.queries[qid];\n        if (query.dirty) {\n          query.dirty = false;\n\n          // re-compute results will perform `LocalCollection._diffQueryChanges`\n          // automatically.\n          _this8._recomputeResults(query, query.resultsSnapshot);\n        } else {\n          // Diff the current results against the snapshot and send to observers.\n          // pass the query object for its observer callbacks.\n          LocalCollection._diffQueryChanges(query.ordered, query.resultsSnapshot, query.results, query, {\n            projectionFn: query.projectionFn\n          });\n        }\n        query.resultsSnapshot = null;\n      });\n    }\n    return _resumeObservers;\n  }();\n  _proto.resumeObserversServer = function () {\n    function resumeObserversServer() {\n      return _regeneratorRuntime.async(function (_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            this._resumeObservers();\n            _context4.next = 1;\n            return _regeneratorRuntime.awrap(this._observeQueue.drain());\n          case 1:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, null, this, null, Promise);\n    }\n    return resumeObserversServer;\n  }();\n  _proto.resumeObserversClient = function () {\n    function resumeObserversClient() {\n      this._resumeObservers();\n      this._observeQueue.drain();\n    }\n    return resumeObserversClient;\n  }();\n  _proto.retrieveOriginals = function () {\n    function retrieveOriginals() {\n      if (!this._savedOriginals) {\n        throw new Error('Called retrieveOriginals without saveOriginals');\n      }\n      var originals = this._savedOriginals;\n      this._savedOriginals = null;\n      return originals;\n    }\n    return retrieveOriginals;\n  }() // To track what documents are affected by a piece of code, call\n  // saveOriginals() before it and retrieveOriginals() after it.\n  // retrieveOriginals returns an object whose keys are the ids of the documents\n  // that were affected since the call to saveOriginals(), and the values are\n  // equal to the document's contents at the time of saveOriginals. (In the case\n  // of an inserted document, undefined is the value.) You must alternate\n  // between calls to saveOriginals() and retrieveOriginals().\n  ;\n  _proto.saveOriginals = function () {\n    function saveOriginals() {\n      if (this._savedOriginals) {\n        throw new Error('Called saveOriginals twice without retrieveOriginals');\n      }\n      this._savedOriginals = new LocalCollection._IdMap();\n    }\n    return saveOriginals;\n  }();\n  _proto.prepareUpdate = function () {\n    function prepareUpdate(selector) {\n      var _this9 = this;\n      // Save the original results of any query that we might need to\n      // _recomputeResults on, because _modifyAndNotify will mutate the objects in\n      // it. (We don't need to save the original results of paused queries because\n      // they already have a resultsSnapshot and we won't be diffing in\n      // _recomputeResults.)\n      var qidToOriginalResults = {};\n\n      // We should only clone each document once, even if it appears in multiple\n      // queries\n      var docMap = new LocalCollection._IdMap();\n      var idsMatched = LocalCollection._idsMatchedBySelector(selector);\n      Object.keys(this.queries).forEach(function (qid) {\n        var query = _this9.queries[qid];\n        if ((query.cursor.skip || query.cursor.limit) && !_this9.paused) {\n          // Catch the case of a reactive `count()` on a cursor with skip\n          // or limit, which registers an unordered observe. This is a\n          // pretty rare case, so we just clone the entire result set with\n          // no optimizations for documents that appear in these result\n          // sets and other queries.\n          if (query.results instanceof LocalCollection._IdMap) {\n            qidToOriginalResults[qid] = query.results.clone();\n            return;\n          }\n          if (!(query.results instanceof Array)) {\n            throw new Error('Assertion failed: query.results not an array');\n          }\n\n          // Clones a document to be stored in `qidToOriginalResults`\n          // because it may be modified before the new and old result sets\n          // are diffed. But if we know exactly which document IDs we're\n          // going to modify, then we only need to clone those.\n          var memoizedCloneIfNeeded = function (doc) {\n            if (docMap.has(doc._id)) {\n              return docMap.get(doc._id);\n            }\n            var docToMemoize = idsMatched && !idsMatched.some(function (id) {\n              return EJSON.equals(id, doc._id);\n            }) ? doc : EJSON.clone(doc);\n            docMap.set(doc._id, docToMemoize);\n            return docToMemoize;\n          };\n          qidToOriginalResults[qid] = query.results.map(memoizedCloneIfNeeded);\n        }\n      });\n      return qidToOriginalResults;\n    }\n    return prepareUpdate;\n  }();\n  _proto.finishUpdate = function () {\n    function finishUpdate(_ref) {\n      var options = _ref.options,\n        updateCount = _ref.updateCount,\n        callback = _ref.callback,\n        insertedId = _ref.insertedId;\n      // Return the number of affected documents, or in the upsert case, an object\n      // containing the number of affected docs and the id of the doc that was\n      // inserted, if any.\n      var result;\n      if (options._returnObject) {\n        result = {\n          numberAffected: updateCount\n        };\n        if (insertedId !== undefined) {\n          result.insertedId = insertedId;\n        }\n      } else {\n        result = updateCount;\n      }\n      if (callback) {\n        Meteor.defer(function () {\n          callback(null, result);\n        });\n      }\n      return result;\n    }\n    return finishUpdate;\n  }() // XXX atomicity: if multi is true, and one modification fails, do\n  // we rollback the whole operation, or what?\n  ;\n  _proto.updateAsync = function () {\n    function updateAsync(selector, mod, options, callback) {\n      var _this0 = this;\n      var matcher, qidToOriginalResults, recomputeQids, updateCount, insertedId, doc;\n      return _regeneratorRuntime.async(function (_context6) {\n        while (1) switch (_context6.prev = _context6.next) {\n          case 0:\n            if (!callback && options instanceof Function) {\n              callback = options;\n              options = null;\n            }\n            if (!options) {\n              options = {};\n            }\n            matcher = new Minimongo.Matcher(selector, true);\n            qidToOriginalResults = this.prepareUpdate(selector);\n            recomputeQids = {};\n            updateCount = 0;\n            _context6.next = 1;\n            return _regeneratorRuntime.awrap(this._eachPossiblyMatchingDocAsync(selector, function () {\n              function _callee(doc, id) {\n                var queryResult;\n                return _regeneratorRuntime.async(function (_context5) {\n                  while (1) switch (_context5.prev = _context5.next) {\n                    case 0:\n                      queryResult = matcher.documentMatches(doc);\n                      if (!queryResult.result) {\n                        _context5.next = 2;\n                        break;\n                      }\n                      // XXX Should we save the original even if mod ends up being a no-op?\n                      _this0._saveOriginal(id, doc);\n                      _context5.next = 1;\n                      return _regeneratorRuntime.awrap(_this0._modifyAndNotifyAsync(doc, mod, queryResult.arrayIndices));\n                    case 1:\n                      recomputeQids = _context5.sent;\n                      ++updateCount;\n                      if (options.multi) {\n                        _context5.next = 2;\n                        break;\n                      }\n                      return _context5.abrupt(\"return\", false);\n                    case 2:\n                      return _context5.abrupt(\"return\", true);\n                    case 3:\n                    case \"end\":\n                      return _context5.stop();\n                  }\n                }, null, null, null, Promise);\n              }\n              return _callee;\n            }()));\n          case 1:\n            Object.keys(recomputeQids).forEach(function (qid) {\n              var query = _this0.queries[qid];\n              if (query) {\n                _this0._recomputeResults(query, qidToOriginalResults[qid]);\n              }\n            });\n            _context6.next = 2;\n            return _regeneratorRuntime.awrap(this._observeQueue.drain());\n          case 2:\n            if (!(updateCount === 0 && options.upsert)) {\n              _context6.next = 4;\n              break;\n            }\n            doc = LocalCollection._createUpsertDocument(selector, mod);\n            if (!doc._id && options.insertedId) {\n              doc._id = options.insertedId;\n            }\n            _context6.next = 3;\n            return _regeneratorRuntime.awrap(this.insertAsync(doc));\n          case 3:\n            insertedId = _context6.sent;\n            updateCount = 1;\n          case 4:\n            return _context6.abrupt(\"return\", this.finishUpdate({\n              options: options,\n              insertedId: insertedId,\n              updateCount: updateCount,\n              callback: callback\n            }));\n          case 5:\n          case \"end\":\n            return _context6.stop();\n        }\n      }, null, this, null, Promise);\n    }\n    return updateAsync;\n  }() // XXX atomicity: if multi is true, and one modification fails, do\n  // we rollback the whole operation, or what?\n  ;\n  _proto.update = function () {\n    function update(selector, mod, options, callback) {\n      var _this1 = this;\n      if (!callback && options instanceof Function) {\n        callback = options;\n        options = null;\n      }\n      if (!options) {\n        options = {};\n      }\n      var matcher = new Minimongo.Matcher(selector, true);\n      var qidToOriginalResults = this.prepareUpdate(selector);\n      var recomputeQids = {};\n      var updateCount = 0;\n      this._eachPossiblyMatchingDocSync(selector, function (doc, id) {\n        var queryResult = matcher.documentMatches(doc);\n        if (queryResult.result) {\n          // XXX Should we save the original even if mod ends up being a no-op?\n          _this1._saveOriginal(id, doc);\n          recomputeQids = _this1._modifyAndNotifySync(doc, mod, queryResult.arrayIndices);\n          ++updateCount;\n          if (!options.multi) {\n            return false; // break\n          }\n        }\n        return true;\n      });\n      Object.keys(recomputeQids).forEach(function (qid) {\n        var query = _this1.queries[qid];\n        if (query) {\n          _this1._recomputeResults(query, qidToOriginalResults[qid]);\n        }\n      });\n      this._observeQueue.drain();\n\n      // If we are doing an upsert, and we didn't modify any documents yet, then\n      // it's time to do an insert. Figure out what document we are inserting, and\n      // generate an id for it.\n      var insertedId;\n      if (updateCount === 0 && options.upsert) {\n        var doc = LocalCollection._createUpsertDocument(selector, mod);\n        if (!doc._id && options.insertedId) {\n          doc._id = options.insertedId;\n        }\n        insertedId = this.insert(doc);\n        updateCount = 1;\n      }\n      return this.finishUpdate({\n        options: options,\n        updateCount: updateCount,\n        callback: callback,\n        selector: selector,\n        mod: mod\n      });\n    }\n    return update;\n  }() // A convenience wrapper on update. LocalCollection.upsert(sel, mod) is\n  // equivalent to LocalCollection.update(sel, mod, {upsert: true,\n  // _returnObject: true}).\n  ;\n  _proto.upsert = function () {\n    function upsert(selector, mod, options, callback) {\n      if (!callback && typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      return this.update(selector, mod, Object.assign({}, options, {\n        upsert: true,\n        _returnObject: true\n      }), callback);\n    }\n    return upsert;\n  }();\n  _proto.upsertAsync = function () {\n    function upsertAsync(selector, mod, options, callback) {\n      if (!callback && typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n      return this.updateAsync(selector, mod, Object.assign({}, options, {\n        upsert: true,\n        _returnObject: true\n      }), callback);\n    }\n    return upsertAsync;\n  }() // Iterates over a subset of documents that could match selector; calls\n  // fn(doc, id) on each of them.  Specifically, if selector specifies\n  // specific _id's, it only looks at those.  doc is *not* cloned: it is the\n  // same object that is in _docs.\n  ;\n  _proto._eachPossiblyMatchingDocAsync = function () {\n    function _eachPossiblyMatchingDocAsync(selector, fn) {\n      var specificIds, _iterator2, _step2, id, doc, _t;\n      return _regeneratorRuntime.async(function (_context7) {\n        while (1) switch (_context7.prev = _context7.next) {\n          case 0:\n            specificIds = LocalCollection._idsMatchedBySelector(selector);\n            if (!specificIds) {\n              _context7.next = 6;\n              break;\n            }\n            _iterator2 = _createForOfIteratorHelperLoose(specificIds);\n          case 1:\n            if ((_step2 = _iterator2()).done) {\n              _context7.next = 5;\n              break;\n            }\n            id = _step2.value;\n            doc = this._docs.get(id);\n            _t = doc;\n            if (!_t) {\n              _context7.next = 3;\n              break;\n            }\n            _context7.next = 2;\n            return _regeneratorRuntime.awrap(fn(doc, id));\n          case 2:\n            _t = !_context7.sent;\n          case 3:\n            if (!_t) {\n              _context7.next = 4;\n              break;\n            }\n            return _context7.abrupt(\"continue\", 5);\n          case 4:\n            _context7.next = 1;\n            break;\n          case 5:\n            _context7.next = 7;\n            break;\n          case 6:\n            _context7.next = 7;\n            return _regeneratorRuntime.awrap(this._docs.forEachAsync(fn));\n          case 7:\n          case \"end\":\n            return _context7.stop();\n        }\n      }, null, this, null, Promise);\n    }\n    return _eachPossiblyMatchingDocAsync;\n  }();\n  _proto._eachPossiblyMatchingDocSync = function () {\n    function _eachPossiblyMatchingDocSync(selector, fn) {\n      var specificIds = LocalCollection._idsMatchedBySelector(selector);\n      if (specificIds) {\n        for (var _iterator3 = _createForOfIteratorHelperLoose(specificIds), _step3; !(_step3 = _iterator3()).done;) {\n          var id = _step3.value;\n          var doc = this._docs.get(id);\n          if (doc && !fn(doc, id)) {\n            break;\n          }\n        }\n      } else {\n        this._docs.forEach(fn);\n      }\n    }\n    return _eachPossiblyMatchingDocSync;\n  }();\n  _proto._getMatchedDocAndModify = function () {\n    function _getMatchedDocAndModify(doc, mod, arrayIndices) {\n      var _this10 = this;\n      var matched_before = {};\n      Object.keys(this.queries).forEach(function (qid) {\n        var query = _this10.queries[qid];\n        if (query.dirty) {\n          return;\n        }\n        if (query.ordered) {\n          matched_before[qid] = query.matcher.documentMatches(doc).result;\n        } else {\n          // Because we don't support skip or limit (yet) in unordered queries, we\n          // can just do a direct lookup.\n          matched_before[qid] = query.results.has(doc._id);\n        }\n      });\n      return matched_before;\n    }\n    return _getMatchedDocAndModify;\n  }();\n  _proto._modifyAndNotifySync = function () {\n    function _modifyAndNotifySync(doc, mod, arrayIndices) {\n      var matched_before = this._getMatchedDocAndModify(doc, mod, arrayIndices);\n      var old_doc = EJSON.clone(doc);\n      LocalCollection._modify(doc, mod, {\n        arrayIndices: arrayIndices\n      });\n      var recomputeQids = {};\n      for (var _i3 = 0, _Object$keys3 = Object.keys(this.queries); _i3 < _Object$keys3.length; _i3++) {\n        var qid = _Object$keys3[_i3];\n        var query = this.queries[qid];\n        if (query.dirty) {\n          continue;\n        }\n        var afterMatch = query.matcher.documentMatches(doc);\n        var after = afterMatch.result;\n        var before = matched_before[qid];\n        if (after && query.distances && afterMatch.distance !== undefined) {\n          query.distances.set(doc._id, afterMatch.distance);\n        }\n        if (query.cursor.skip || query.cursor.limit) {\n          // We need to recompute any query where the doc may have been in the\n          // cursor's window either before or after the update. (Note that if skip\n          // or limit is set, \"before\" and \"after\" being true do not necessarily\n          // mean that the document is in the cursor's output after skip/limit is\n          // applied... but if they are false, then the document definitely is NOT\n          // in the output. So it's safe to skip recompute if neither before or\n          // after are true.)\n          if (before || after) {\n            recomputeQids[qid] = true;\n          }\n        } else if (before && !after) {\n          LocalCollection._removeFromResultsSync(query, doc);\n        } else if (!before && after) {\n          LocalCollection._insertInResultsSync(query, doc);\n        } else if (before && after) {\n          LocalCollection._updateInResultsSync(query, doc, old_doc);\n        }\n      }\n      return recomputeQids;\n    }\n    return _modifyAndNotifySync;\n  }();\n  _proto._modifyAndNotifyAsync = function () {\n    function _modifyAndNotifyAsync(doc, mod, arrayIndices) {\n      var matched_before, old_doc, recomputeQids, _i4, _Object$keys4, qid, query, afterMatch, after, before;\n      return _regeneratorRuntime.async(function (_context8) {\n        while (1) switch (_context8.prev = _context8.next) {\n          case 0:\n            matched_before = this._getMatchedDocAndModify(doc, mod, arrayIndices);\n            old_doc = EJSON.clone(doc);\n            LocalCollection._modify(doc, mod, {\n              arrayIndices: arrayIndices\n            });\n            recomputeQids = {};\n            _i4 = 0, _Object$keys4 = Object.keys(this.queries);\n          case 1:\n            if (!(_i4 < _Object$keys4.length)) {\n              _context8.next = 9;\n              break;\n            }\n            qid = _Object$keys4[_i4];\n            query = this.queries[qid];\n            if (!query.dirty) {\n              _context8.next = 2;\n              break;\n            }\n            return _context8.abrupt(\"continue\", 8);\n          case 2:\n            afterMatch = query.matcher.documentMatches(doc);\n            after = afterMatch.result;\n            before = matched_before[qid];\n            if (after && query.distances && afterMatch.distance !== undefined) {\n              query.distances.set(doc._id, afterMatch.distance);\n            }\n            if (!(query.cursor.skip || query.cursor.limit)) {\n              _context8.next = 3;\n              break;\n            }\n            // We need to recompute any query where the doc may have been in the\n            // cursor's window either before or after the update. (Note that if skip\n            // or limit is set, \"before\" and \"after\" being true do not necessarily\n            // mean that the document is in the cursor's output after skip/limit is\n            // applied... but if they are false, then the document definitely is NOT\n            // in the output. So it's safe to skip recompute if neither before or\n            // after are true.)\n            if (before || after) {\n              recomputeQids[qid] = true;\n            }\n            _context8.next = 8;\n            break;\n          case 3:\n            if (!(before && !after)) {\n              _context8.next = 5;\n              break;\n            }\n            _context8.next = 4;\n            return _regeneratorRuntime.awrap(LocalCollection._removeFromResultsAsync(query, doc));\n          case 4:\n            _context8.next = 8;\n            break;\n          case 5:\n            if (!(!before && after)) {\n              _context8.next = 7;\n              break;\n            }\n            _context8.next = 6;\n            return _regeneratorRuntime.awrap(LocalCollection._insertInResultsAsync(query, doc));\n          case 6:\n            _context8.next = 8;\n            break;\n          case 7:\n            if (!(before && after)) {\n              _context8.next = 8;\n              break;\n            }\n            _context8.next = 8;\n            return _regeneratorRuntime.awrap(LocalCollection._updateInResultsAsync(query, doc, old_doc));\n          case 8:\n            _i4++;\n            _context8.next = 1;\n            break;\n          case 9:\n            return _context8.abrupt(\"return\", recomputeQids);\n          case 10:\n          case \"end\":\n            return _context8.stop();\n        }\n      }, null, this, null, Promise);\n    }\n    return _modifyAndNotifyAsync;\n  }() // Recomputes the results of a query and runs observe callbacks for the\n  // difference between the previous results and the current results (unless\n  // paused). Used for skip/limit queries.\n  //\n  // When this is used by insert or remove, it can just use query.results for\n  // the old results (and there's no need to pass in oldResults), because these\n  // operations don't mutate the documents in the collection. Update needs to\n  // pass in an oldResults which was deep-copied before the modifier was\n  // applied.\n  //\n  // oldResults is guaranteed to be ignored if the query is not paused.\n  ;\n  _proto._recomputeResults = function () {\n    function _recomputeResults(query, oldResults) {\n      if (this.paused) {\n        // There's no reason to recompute the results now as we're still paused.\n        // By flagging the query as \"dirty\", the recompute will be performed\n        // when resumeObservers is called.\n        query.dirty = true;\n        return;\n      }\n      if (!this.paused && !oldResults) {\n        oldResults = query.results;\n      }\n      if (query.distances) {\n        query.distances.clear();\n      }\n      query.results = query.cursor._getRawObjects({\n        distances: query.distances,\n        ordered: query.ordered\n      });\n      if (!this.paused) {\n        LocalCollection._diffQueryChanges(query.ordered, oldResults, query.results, query, {\n          projectionFn: query.projectionFn\n        });\n      }\n    }\n    return _recomputeResults;\n  }();\n  _proto._saveOriginal = function () {\n    function _saveOriginal(id, doc) {\n      // Are we even trying to save originals?\n      if (!this._savedOriginals) {\n        return;\n      }\n\n      // Have we previously mutated the original (and so 'doc' is not actually\n      // original)?  (Note the 'has' check rather than truth: we store undefined\n      // here for inserted docs!)\n      if (this._savedOriginals.has(id)) {\n        return;\n      }\n      this._savedOriginals.set(id, EJSON.clone(doc));\n    }\n    return _saveOriginal;\n  }();\n  return LocalCollection;\n}();\nLocalCollection.Cursor = Cursor;\nLocalCollection.ObserveHandle = ObserveHandle;\n\n// XXX maybe move these into another ObserveHelpers package or something\n\n// _CachingChangeObserver is an object which receives observeChanges callbacks\n// and keeps a cache of the current cursor state up to date in this.docs. Users\n// of this class should read the docs field but not modify it. You should pass\n// the \"applyChange\" field as the callbacks to the underlying observeChanges\n// call. Optionally, you can specify your own observeChanges callbacks which are\n// invoked immediately before the docs field is updated; this object is made\n// available as `this` to those callbacks.\nLocalCollection._CachingChangeObserver = function () {\n  function _CachingChangeObserver() {\n    var _this11 = this;\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var orderedFromCallbacks = options.callbacks && LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks);\n    if (hasOwn.call(options, 'ordered')) {\n      this.ordered = options.ordered;\n      if (options.callbacks && options.ordered !== orderedFromCallbacks) {\n        throw Error('ordered option doesn\\'t match callbacks');\n      }\n    } else if (options.callbacks) {\n      this.ordered = orderedFromCallbacks;\n    } else {\n      throw Error('must provide ordered or callbacks');\n    }\n    var callbacks = options.callbacks || {};\n    if (this.ordered) {\n      this.docs = new OrderedDict(MongoID.idStringify);\n      this.applyChange = {\n        addedBefore: function (id, fields, before) {\n          // Take a shallow copy since the top-level properties can be changed\n          var doc = _objectSpread({}, fields);\n          doc._id = id;\n          if (callbacks.addedBefore) {\n            callbacks.addedBefore.call(_this11, id, EJSON.clone(fields), before);\n          }\n\n          // This line triggers if we provide added with movedBefore.\n          if (callbacks.added) {\n            callbacks.added.call(_this11, id, EJSON.clone(fields));\n          }\n\n          // XXX could `before` be a falsy ID?  Technically\n          // idStringify seems to allow for them -- though\n          // OrderedDict won't call stringify on a falsy arg.\n          _this11.docs.putBefore(id, doc, before || null);\n        },\n        movedBefore: function (id, before) {\n          if (callbacks.movedBefore) {\n            callbacks.movedBefore.call(_this11, id, before);\n          }\n          _this11.docs.moveBefore(id, before || null);\n        }\n      };\n    } else {\n      this.docs = new LocalCollection._IdMap();\n      this.applyChange = {\n        added: function (id, fields) {\n          // Take a shallow copy since the top-level properties can be changed\n          var doc = _objectSpread({}, fields);\n          if (callbacks.added) {\n            callbacks.added.call(_this11, id, EJSON.clone(fields));\n          }\n          doc._id = id;\n          _this11.docs.set(id, doc);\n        }\n      };\n    }\n\n    // The methods in _IdMap and OrderedDict used by these callbacks are\n    // identical.\n    this.applyChange.changed = function (id, fields) {\n      var doc = _this11.docs.get(id);\n      if (!doc) {\n        throw new Error(\"Unknown id for changed: \" + id);\n      }\n      if (callbacks.changed) {\n        callbacks.changed.call(_this11, id, EJSON.clone(fields));\n      }\n      DiffSequence.applyChanges(doc, fields);\n    };\n    this.applyChange.removed = function (id) {\n      if (callbacks.removed) {\n        callbacks.removed.call(_this11, id);\n      }\n      _this11.docs.remove(id);\n    };\n  }\n  return _CachingChangeObserver;\n}();\nLocalCollection._IdMap = /*#__PURE__*/function (_IdMap2) {\n  function _IdMap() {\n    return _IdMap2.call(this, MongoID.idStringify, MongoID.idParse) || this;\n  }\n  _inheritsLoose(_IdMap, _IdMap2);\n  return _IdMap;\n}(IdMap);\n\n// Wrap a transform function to return objects that have the _id field\n// of the untransformed document. This ensures that subsystems such as\n// the observe-sequence package that call `observe` can keep track of\n// the documents identities.\n//\n// - Require that it returns objects\n// - If the return value has an _id field, verify that it matches the\n//   original _id field\n// - If the return value doesn't have an _id field, add it back.\nLocalCollection.wrapTransform = function (transform) {\n  if (!transform) {\n    return null;\n  }\n\n  // No need to doubly-wrap transforms.\n  if (transform.__wrappedTransform__) {\n    return transform;\n  }\n  var wrapped = function (doc) {\n    if (!hasOwn.call(doc, '_id')) {\n      // XXX do we ever have a transform on the oplog's collection? because that\n      // collection has no _id.\n      throw new Error('can only transform documents with _id');\n    }\n    var id = doc._id;\n\n    // XXX consider making tracker a weak dependency and checking\n    // Package.tracker here\n    var transformed = Tracker.nonreactive(function () {\n      return transform(doc);\n    });\n    if (!LocalCollection._isPlainObject(transformed)) {\n      throw new Error('transform must return object');\n    }\n    if (hasOwn.call(transformed, '_id')) {\n      if (!EJSON.equals(transformed._id, id)) {\n        throw new Error('transformed document can\\'t have different _id');\n      }\n    } else {\n      transformed._id = id;\n    }\n    return transformed;\n  };\n  wrapped.__wrappedTransform__ = true;\n  return wrapped;\n};\n\n// XXX the sorted-query logic below is laughably inefficient. we'll\n// need to come up with a better datastructure for this.\n//\n// XXX the logic for observing with a skip or a limit is even more\n// laughably inefficient. we recompute the whole results every time!\n\n// This binary search puts a value between any equal values, and the first\n// lesser value.\nLocalCollection._binarySearch = function (cmp, array, value) {\n  var first = 0;\n  var range = array.length;\n  while (range > 0) {\n    var halfRange = Math.floor(range / 2);\n    if (cmp(value, array[first + halfRange]) >= 0) {\n      first += halfRange + 1;\n      range -= halfRange + 1;\n    } else {\n      range = halfRange;\n    }\n  }\n  return first;\n};\nLocalCollection._checkSupportedProjection = function (fields) {\n  if (fields !== Object(fields) || Array.isArray(fields)) {\n    throw MinimongoError('fields option must be an object');\n  }\n  Object.keys(fields).forEach(function (keyPath) {\n    if (keyPath.split('.').includes('$')) {\n      throw MinimongoError('Minimongo doesn\\'t support $ operator in projections yet.');\n    }\n    var value = fields[keyPath];\n    if (_typeof(value) === 'object' && ['$elemMatch', '$meta', '$slice'].some(function (key) {\n      return hasOwn.call(value, key);\n    })) {\n      throw MinimongoError('Minimongo doesn\\'t support operators in projections yet.');\n    }\n    if (![1, 0, true, false].includes(value)) {\n      throw MinimongoError('Projection values should be one of 1, 0, true, or false');\n    }\n  });\n};\n\n// Knows how to compile a fields projection to a predicate function.\n// @returns - Function: a closure that filters out an object according to the\n//            fields projection rules:\n//            @param obj - Object: MongoDB-styled document\n//            @returns - Object: a document with the fields filtered out\n//                       according to projection rules. Doesn't retain subfields\n//                       of passed argument.\nLocalCollection._compileProjection = function (fields) {\n  LocalCollection._checkSupportedProjection(fields);\n  var _idProjection = fields._id === undefined ? true : fields._id;\n  var details = projectionDetails(fields);\n\n  // returns transformed doc according to ruleTree\n  var transform = function (doc, ruleTree) {\n    // Special case for \"sets\"\n    if (Array.isArray(doc)) {\n      return doc.map(function (subdoc) {\n        return transform(subdoc, ruleTree);\n      });\n    }\n    var result = details.including ? {} : EJSON.clone(doc);\n    Object.keys(ruleTree).forEach(function (key) {\n      if (doc == null || !hasOwn.call(doc, key)) {\n        return;\n      }\n      var rule = ruleTree[key];\n      if (rule === Object(rule)) {\n        // For sub-objects/subsets we branch\n        if (doc[key] === Object(doc[key])) {\n          result[key] = transform(doc[key], rule);\n        }\n      } else if (details.including) {\n        // Otherwise we don't even touch this subfield\n        result[key] = EJSON.clone(doc[key]);\n      } else {\n        delete result[key];\n      }\n    });\n    return doc != null ? result : doc;\n  };\n  return function (doc) {\n    var result = transform(doc, details.tree);\n    if (_idProjection && hasOwn.call(doc, '_id')) {\n      result._id = doc._id;\n    }\n    if (!_idProjection && hasOwn.call(result, '_id')) {\n      delete result._id;\n    }\n    return result;\n  };\n};\n\n// Calculates the document to insert in case we're doing an upsert and the\n// selector does not match any elements\nLocalCollection._createUpsertDocument = function (selector, modifier) {\n  var selectorDocument = populateDocumentWithQueryFields(selector);\n  var isModify = LocalCollection._isModificationMod(modifier);\n  var newDoc = {};\n  if (selectorDocument._id) {\n    newDoc._id = selectorDocument._id;\n    delete selectorDocument._id;\n  }\n\n  // This double _modify call is made to help with nested properties (see issue\n  // #8631). We do this even if it's a replacement for validation purposes (e.g.\n  // ambiguous id's)\n  LocalCollection._modify(newDoc, {\n    $set: selectorDocument\n  });\n  LocalCollection._modify(newDoc, modifier, {\n    isInsert: true\n  });\n  if (isModify) {\n    return newDoc;\n  }\n\n  // Replacement can take _id from query document\n  var replacement = Object.assign({}, modifier);\n  if (newDoc._id) {\n    replacement._id = newDoc._id;\n  }\n  return replacement;\n};\nLocalCollection._diffObjects = function (left, right, callbacks) {\n  return DiffSequence.diffObjects(left, right, callbacks);\n};\n\n// ordered: bool.\n// old_results and new_results: collections of documents.\n//    if ordered, they are arrays.\n//    if unordered, they are IdMaps\nLocalCollection._diffQueryChanges = function (ordered, oldResults, newResults, observer, options) {\n  return DiffSequence.diffQueryChanges(ordered, oldResults, newResults, observer, options);\n};\nLocalCollection._diffQueryOrderedChanges = function (oldResults, newResults, observer, options) {\n  return DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options);\n};\nLocalCollection._diffQueryUnorderedChanges = function (oldResults, newResults, observer, options) {\n  return DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options);\n};\nLocalCollection._findInOrderedResults = function (query, doc) {\n  if (!query.ordered) {\n    throw new Error('Can\\'t call _findInOrderedResults on unordered query');\n  }\n  for (var i = 0; i < query.results.length; i++) {\n    if (query.results[i] === doc) {\n      return i;\n    }\n  }\n  throw Error('object missing from query');\n};\n\n// If this is a selector which explicitly constrains the match by ID to a finite\n// number of documents, returns a list of their IDs.  Otherwise returns\n// null. Note that the selector may have other restrictions so it may not even\n// match those document!  We care about $in and $and since those are generated\n// access-controlled update and remove.\nLocalCollection._idsMatchedBySelector = function (selector) {\n  // Is the selector just an ID?\n  if (LocalCollection._selectorIsId(selector)) {\n    return [selector];\n  }\n  if (!selector) {\n    return null;\n  }\n\n  // Do we have an _id clause?\n  if (hasOwn.call(selector, '_id')) {\n    // Is the _id clause just an ID?\n    if (LocalCollection._selectorIsId(selector._id)) {\n      return [selector._id];\n    }\n\n    // Is the _id clause {_id: {$in: [\"x\", \"y\", \"z\"]}}?\n    if (selector._id && Array.isArray(selector._id.$in) && selector._id.$in.length && selector._id.$in.every(LocalCollection._selectorIsId)) {\n      return selector._id.$in;\n    }\n    return null;\n  }\n\n  // If this is a top-level $and, and any of the clauses constrain their\n  // documents, then the whole selector is constrained by any one clause's\n  // constraint. (Well, by their intersection, but that seems unlikely.)\n  if (Array.isArray(selector.$and)) {\n    for (var i = 0; i < selector.$and.length; ++i) {\n      var subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);\n      if (subIds) {\n        return subIds;\n      }\n    }\n  }\n  return null;\n};\nLocalCollection._insertInResultsSync = function (query, doc) {\n  var fields = EJSON.clone(doc);\n  delete fields._id;\n  if (query.ordered) {\n    if (!query.sorter) {\n      query.addedBefore(doc._id, query.projectionFn(fields), null);\n      query.results.push(doc);\n    } else {\n      var i = LocalCollection._insertInSortedList(query.sorter.getComparator({\n        distances: query.distances\n      }), query.results, doc);\n      var next = query.results[i + 1];\n      if (next) {\n        next = next._id;\n      } else {\n        next = null;\n      }\n      query.addedBefore(doc._id, query.projectionFn(fields), next);\n    }\n    query.added(doc._id, query.projectionFn(fields));\n  } else {\n    query.added(doc._id, query.projectionFn(fields));\n    query.results.set(doc._id, doc);\n  }\n};\nLocalCollection._insertInResultsAsync = function () {\n  function _callee2(query, doc) {\n    var fields, i, next;\n    return _regeneratorRuntime.async(function (_context9) {\n      while (1) switch (_context9.prev = _context9.next) {\n        case 0:\n          fields = EJSON.clone(doc);\n          delete fields._id;\n          if (!query.ordered) {\n            _context9.next = 5;\n            break;\n          }\n          if (query.sorter) {\n            _context9.next = 2;\n            break;\n          }\n          _context9.next = 1;\n          return _regeneratorRuntime.awrap(query.addedBefore(doc._id, query.projectionFn(fields), null));\n        case 1:\n          query.results.push(doc);\n          _context9.next = 3;\n          break;\n        case 2:\n          i = LocalCollection._insertInSortedList(query.sorter.getComparator({\n            distances: query.distances\n          }), query.results, doc);\n          next = query.results[i + 1];\n          if (next) {\n            next = next._id;\n          } else {\n            next = null;\n          }\n          _context9.next = 3;\n          return _regeneratorRuntime.awrap(query.addedBefore(doc._id, query.projectionFn(fields), next));\n        case 3:\n          _context9.next = 4;\n          return _regeneratorRuntime.awrap(query.added(doc._id, query.projectionFn(fields)));\n        case 4:\n          _context9.next = 7;\n          break;\n        case 5:\n          _context9.next = 6;\n          return _regeneratorRuntime.awrap(query.added(doc._id, query.projectionFn(fields)));\n        case 6:\n          query.results.set(doc._id, doc);\n        case 7:\n        case \"end\":\n          return _context9.stop();\n      }\n    }, null, null, null, Promise);\n  }\n  return _callee2;\n}();\nLocalCollection._insertInSortedList = function (cmp, array, value) {\n  if (array.length === 0) {\n    array.push(value);\n    return 0;\n  }\n  var i = LocalCollection._binarySearch(cmp, array, value);\n  array.splice(i, 0, value);\n  return i;\n};\nLocalCollection._isModificationMod = function (mod) {\n  var isModify = false;\n  var isReplace = false;\n  Object.keys(mod).forEach(function (key) {\n    if (key.substr(0, 1) === '$') {\n      isModify = true;\n    } else {\n      isReplace = true;\n    }\n  });\n  if (isModify && isReplace) {\n    throw new Error('Update parameter cannot have both modifier and non-modifier fields.');\n  }\n  return isModify;\n};\n\n// XXX maybe this should be EJSON.isObject, though EJSON doesn't know about\n// RegExp\n// XXX note that _type(undefined) === 3!!!!\nLocalCollection._isPlainObject = function (x) {\n  return x && LocalCollection._f._type(x) === 3;\n};\n\n// XXX need a strategy for passing the binding of $ into this\n// function, from the compiled selector\n//\n// maybe just {key.up.to.just.before.dollarsign: array_index}\n//\n// XXX atomicity: if one modification fails, do we roll back the whole\n// change?\n//\n// options:\n//   - isInsert is set when _modify is being called to compute the document to\n//     insert as part of an upsert operation. We use this primarily to figure\n//     out when to set the fields in $setOnInsert, if present.\nLocalCollection._modify = function (doc, modifier) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  if (!LocalCollection._isPlainObject(modifier)) {\n    throw MinimongoError('Modifier must be an object');\n  }\n\n  // Make sure the caller can't mutate our data structures.\n  modifier = EJSON.clone(modifier);\n  var isModifier = isOperatorObject(modifier);\n  var newDoc = isModifier ? EJSON.clone(doc) : modifier;\n  if (isModifier) {\n    // apply modifiers to the doc.\n    Object.keys(modifier).forEach(function (operator) {\n      // Treat $setOnInsert as $set if this is an insert.\n      var setOnInsert = options.isInsert && operator === '$setOnInsert';\n      var modFunc = MODIFIERS[setOnInsert ? '$set' : operator];\n      var operand = modifier[operator];\n      if (!modFunc) {\n        throw MinimongoError(\"Invalid modifier specified \" + operator);\n      }\n      Object.keys(operand).forEach(function (keypath) {\n        var arg = operand[keypath];\n        if (keypath === '') {\n          throw MinimongoError('An empty update path is not valid.');\n        }\n        var keyparts = keypath.split('.');\n        if (!keyparts.every(Boolean)) {\n          throw MinimongoError(\"The update path '\" + keypath + \"' contains an empty field name, \" + 'which is not allowed.');\n        }\n        var target = findModTarget(newDoc, keyparts, {\n          arrayIndices: options.arrayIndices,\n          forbidArray: operator === '$rename',\n          noCreate: NO_CREATE_MODIFIERS[operator]\n        });\n        modFunc(target, keyparts.pop(), arg, keypath, newDoc);\n      });\n    });\n    if (doc._id && !EJSON.equals(doc._id, newDoc._id)) {\n      throw MinimongoError(\"After applying the update to the document {_id: \\\"\" + doc._id + \"\\\", ...},\" + ' the (immutable) field \\'_id\\' was found to have been altered to ' + (\"_id: \\\"\" + newDoc._id + \"\\\"\"));\n    }\n  } else {\n    if (doc._id && modifier._id && !EJSON.equals(doc._id, modifier._id)) {\n      throw MinimongoError(\"The _id field cannot be changed from {_id: \\\"\" + doc._id + \"\\\"} to \" + (\"{_id: \\\"\" + modifier._id + \"\\\"}\"));\n    }\n\n    // replace the whole document\n    assertHasValidFieldNames(modifier);\n  }\n\n  // move new document into place.\n  Object.keys(doc).forEach(function (key) {\n    // Note: this used to be for (var key in doc) however, this does not\n    // work right in Opera. Deleting from a doc while iterating over it\n    // would sometimes cause opera to skip some keys.\n    if (key !== '_id') {\n      delete doc[key];\n    }\n  });\n  Object.keys(newDoc).forEach(function (key) {\n    doc[key] = newDoc[key];\n  });\n};\nLocalCollection._observeFromObserveChanges = function (cursor, observeCallbacks) {\n  var transform = cursor.getTransform() || function (doc) {\n    return doc;\n  };\n  var suppressed = !!observeCallbacks._suppress_initial;\n  var observeChangesCallbacks;\n  if (LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {\n    // The \"_no_indices\" option sets all index arguments to -1 and skips the\n    // linear scans required to generate them.  This lets observers that don't\n    // need absolute indices benefit from the other features of this API --\n    // relative order, transforms, and applyChanges -- without the speed hit.\n    var indices = !observeCallbacks._no_indices;\n    observeChangesCallbacks = {\n      addedBefore: function (id, fields, before) {\n        var check = suppressed || !(observeCallbacks.addedAt || observeCallbacks.added);\n        if (check) {\n          return;\n        }\n        var doc = transform(Object.assign(fields, {\n          _id: id\n        }));\n        if (observeCallbacks.addedAt) {\n          observeCallbacks.addedAt(doc, indices ? before ? this.docs.indexOf(before) : this.docs.size() : -1, before);\n        } else {\n          observeCallbacks.added(doc);\n        }\n      },\n      changed: function (id, fields) {\n        if (!(observeCallbacks.changedAt || observeCallbacks.changed)) {\n          return;\n        }\n        var doc = EJSON.clone(this.docs.get(id));\n        if (!doc) {\n          throw new Error(\"Unknown id for changed: \" + id);\n        }\n        var oldDoc = transform(EJSON.clone(doc));\n        DiffSequence.applyChanges(doc, fields);\n        if (observeCallbacks.changedAt) {\n          observeCallbacks.changedAt(transform(doc), oldDoc, indices ? this.docs.indexOf(id) : -1);\n        } else {\n          observeCallbacks.changed(transform(doc), oldDoc);\n        }\n      },\n      movedBefore: function (id, before) {\n        if (!observeCallbacks.movedTo) {\n          return;\n        }\n        var from = indices ? this.docs.indexOf(id) : -1;\n        var to = indices ? before ? this.docs.indexOf(before) : this.docs.size() : -1;\n\n        // When not moving backwards, adjust for the fact that removing the\n        // document slides everything back one slot.\n        if (to > from) {\n          --to;\n        }\n        observeCallbacks.movedTo(transform(EJSON.clone(this.docs.get(id))), from, to, before || null);\n      },\n      removed: function (id) {\n        if (!(observeCallbacks.removedAt || observeCallbacks.removed)) {\n          return;\n        }\n\n        // technically maybe there should be an EJSON.clone here, but it's about\n        // to be removed from this.docs!\n        var doc = transform(this.docs.get(id));\n        if (observeCallbacks.removedAt) {\n          observeCallbacks.removedAt(doc, indices ? this.docs.indexOf(id) : -1);\n        } else {\n          observeCallbacks.removed(doc);\n        }\n      }\n    };\n  } else {\n    observeChangesCallbacks = {\n      added: function (id, fields) {\n        if (!suppressed && observeCallbacks.added) {\n          observeCallbacks.added(transform(Object.assign(fields, {\n            _id: id\n          })));\n        }\n      },\n      changed: function (id, fields) {\n        if (observeCallbacks.changed) {\n          var oldDoc = this.docs.get(id);\n          var doc = EJSON.clone(oldDoc);\n          DiffSequence.applyChanges(doc, fields);\n          observeCallbacks.changed(transform(doc), transform(EJSON.clone(oldDoc)));\n        }\n      },\n      removed: function (id) {\n        if (observeCallbacks.removed) {\n          observeCallbacks.removed(transform(this.docs.get(id)));\n        }\n      }\n    };\n  }\n  var changeObserver = new LocalCollection._CachingChangeObserver({\n    callbacks: observeChangesCallbacks\n  });\n\n  // CachingChangeObserver clones all received input on its callbacks\n  // So we can mark it as safe to reduce the ejson clones.\n  // This is tested by the `mongo-livedata - (extended) scribbling` tests\n  changeObserver.applyChange._fromObserve = true;\n  var handle = cursor.observeChanges(changeObserver.applyChange, {\n    nonMutatingCallbacks: true\n  });\n\n  // If needed, re-enable callbacks as soon as the initial batch is ready.\n  var setSuppressed = function (h) {\n    var _h$isReadyPromise;\n    if (h.isReady) suppressed = false;else (_h$isReadyPromise = h.isReadyPromise) === null || _h$isReadyPromise === void 0 ? void 0 : _h$isReadyPromise.then(function () {\n      return suppressed = false;\n    });\n  };\n  // When we call cursor.observeChanges() it can be the on from\n  // the mongo package (instead of the minimongo one) and it doesn't have isReady and isReadyPromise\n  if (Meteor._isPromise(handle)) {\n    handle.then(setSuppressed);\n  } else {\n    setSuppressed(handle);\n  }\n  return handle;\n};\nLocalCollection._observeCallbacksAreOrdered = function (callbacks) {\n  if (callbacks.added && callbacks.addedAt) {\n    throw new Error('Please specify only one of added() and addedAt()');\n  }\n  if (callbacks.changed && callbacks.changedAt) {\n    throw new Error('Please specify only one of changed() and changedAt()');\n  }\n  if (callbacks.removed && callbacks.removedAt) {\n    throw new Error('Please specify only one of removed() and removedAt()');\n  }\n  return !!(callbacks.addedAt || callbacks.changedAt || callbacks.movedTo || callbacks.removedAt);\n};\nLocalCollection._observeChangesCallbacksAreOrdered = function (callbacks) {\n  if (callbacks.added && callbacks.addedBefore) {\n    throw new Error('Please specify only one of added() and addedBefore()');\n  }\n  return !!(callbacks.addedBefore || callbacks.movedBefore);\n};\nLocalCollection._removeFromResultsSync = function (query, doc) {\n  if (query.ordered) {\n    var i = LocalCollection._findInOrderedResults(query, doc);\n    query.removed(doc._id);\n    query.results.splice(i, 1);\n  } else {\n    var id = doc._id; // in case callback mutates doc\n\n    query.removed(doc._id);\n    query.results.remove(id);\n  }\n};\nLocalCollection._removeFromResultsAsync = function () {\n  function _callee3(query, doc) {\n    var i, id;\n    return _regeneratorRuntime.async(function (_context0) {\n      while (1) switch (_context0.prev = _context0.next) {\n        case 0:\n          if (!query.ordered) {\n            _context0.next = 2;\n            break;\n          }\n          i = LocalCollection._findInOrderedResults(query, doc);\n          _context0.next = 1;\n          return _regeneratorRuntime.awrap(query.removed(doc._id));\n        case 1:\n          query.results.splice(i, 1);\n          _context0.next = 4;\n          break;\n        case 2:\n          id = doc._id; // in case callback mutates doc\n          _context0.next = 3;\n          return _regeneratorRuntime.awrap(query.removed(doc._id));\n        case 3:\n          query.results.remove(id);\n        case 4:\n        case \"end\":\n          return _context0.stop();\n      }\n    }, null, null, null, Promise);\n  }\n  return _callee3;\n}();\n\n// Is this selector just shorthand for lookup by _id?\nLocalCollection._selectorIsId = function (selector) {\n  return typeof selector === 'number' || typeof selector === 'string' || selector instanceof MongoID.ObjectID;\n};\n\n// Is the selector just lookup by _id (shorthand or not)?\nLocalCollection._selectorIsIdPerhapsAsObject = function (selector) {\n  return LocalCollection._selectorIsId(selector) || LocalCollection._selectorIsId(selector && selector._id) && Object.keys(selector).length === 1;\n};\nLocalCollection._updateInResultsSync = function (query, doc, old_doc) {\n  if (!EJSON.equals(doc._id, old_doc._id)) {\n    throw new Error('Can\\'t change a doc\\'s _id while updating');\n  }\n  var projectionFn = query.projectionFn;\n  var changedFields = DiffSequence.makeChangedFields(projectionFn(doc), projectionFn(old_doc));\n  if (!query.ordered) {\n    if (Object.keys(changedFields).length) {\n      query.changed(doc._id, changedFields);\n      query.results.set(doc._id, doc);\n    }\n    return;\n  }\n  var old_idx = LocalCollection._findInOrderedResults(query, doc);\n  if (Object.keys(changedFields).length) {\n    query.changed(doc._id, changedFields);\n  }\n  if (!query.sorter) {\n    return;\n  }\n\n  // just take it out and put it back in again, and see if the index changes\n  query.results.splice(old_idx, 1);\n  var new_idx = LocalCollection._insertInSortedList(query.sorter.getComparator({\n    distances: query.distances\n  }), query.results, doc);\n  if (old_idx !== new_idx) {\n    var next = query.results[new_idx + 1];\n    if (next) {\n      next = next._id;\n    } else {\n      next = null;\n    }\n    query.movedBefore && query.movedBefore(doc._id, next);\n  }\n};\nLocalCollection._updateInResultsAsync = function () {\n  function _callee4(query, doc, old_doc) {\n    var projectionFn, changedFields, old_idx, new_idx, next, _t2;\n    return _regeneratorRuntime.async(function (_context1) {\n      while (1) switch (_context1.prev = _context1.next) {\n        case 0:\n          if (EJSON.equals(doc._id, old_doc._id)) {\n            _context1.next = 1;\n            break;\n          }\n          throw new Error('Can\\'t change a doc\\'s _id while updating');\n        case 1:\n          projectionFn = query.projectionFn;\n          changedFields = DiffSequence.makeChangedFields(projectionFn(doc), projectionFn(old_doc));\n          if (query.ordered) {\n            _context1.next = 4;\n            break;\n          }\n          if (!Object.keys(changedFields).length) {\n            _context1.next = 3;\n            break;\n          }\n          _context1.next = 2;\n          return _regeneratorRuntime.awrap(query.changed(doc._id, changedFields));\n        case 2:\n          query.results.set(doc._id, doc);\n        case 3:\n          return _context1.abrupt(\"return\");\n        case 4:\n          old_idx = LocalCollection._findInOrderedResults(query, doc);\n          if (!Object.keys(changedFields).length) {\n            _context1.next = 5;\n            break;\n          }\n          _context1.next = 5;\n          return _regeneratorRuntime.awrap(query.changed(doc._id, changedFields));\n        case 5:\n          if (query.sorter) {\n            _context1.next = 6;\n            break;\n          }\n          return _context1.abrupt(\"return\");\n        case 6:\n          // just take it out and put it back in again, and see if the index changes\n          query.results.splice(old_idx, 1);\n          new_idx = LocalCollection._insertInSortedList(query.sorter.getComparator({\n            distances: query.distances\n          }), query.results, doc);\n          if (!(old_idx !== new_idx)) {\n            _context1.next = 7;\n            break;\n          }\n          next = query.results[new_idx + 1];\n          if (next) {\n            next = next._id;\n          } else {\n            next = null;\n          }\n          _t2 = query.movedBefore;\n          if (!_t2) {\n            _context1.next = 7;\n            break;\n          }\n          _context1.next = 7;\n          return _regeneratorRuntime.awrap(query.movedBefore(doc._id, next));\n        case 7:\n        case \"end\":\n          return _context1.stop();\n      }\n    }, null, null, null, Promise);\n  }\n  return _callee4;\n}();\nvar MODIFIERS = {\n  $currentDate: function (target, field, arg) {\n    if (_typeof(arg) === 'object' && hasOwn.call(arg, '$type')) {\n      if (arg.$type !== 'date') {\n        throw MinimongoError('Minimongo does currently only support the date type in ' + '$currentDate modifiers', {\n          field: field\n        });\n      }\n    } else if (arg !== true) {\n      throw MinimongoError('Invalid $currentDate modifier', {\n        field: field\n      });\n    }\n    target[field] = new Date();\n  },\n  $inc: function (target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $inc allowed for numbers only', {\n        field: field\n      });\n    }\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError('Cannot apply $inc modifier to non-number', {\n          field: field\n        });\n      }\n      target[field] += arg;\n    } else {\n      target[field] = arg;\n    }\n  },\n  $min: function (target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $min allowed for numbers only', {\n        field: field\n      });\n    }\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError('Cannot apply $min modifier to non-number', {\n          field: field\n        });\n      }\n      if (target[field] > arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $max: function (target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $max allowed for numbers only', {\n        field: field\n      });\n    }\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError('Cannot apply $max modifier to non-number', {\n          field: field\n        });\n      }\n      if (target[field] < arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $mul: function (target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $mul allowed for numbers only', {\n        field: field\n      });\n    }\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError('Cannot apply $mul modifier to non-number', {\n          field: field\n        });\n      }\n      target[field] *= arg;\n    } else {\n      target[field] = 0;\n    }\n  },\n  $rename: function (target, field, arg, keypath, doc) {\n    // no idea why mongo has this restriction..\n    if (keypath === arg) {\n      throw MinimongoError('$rename source must differ from target', {\n        field: field\n      });\n    }\n    if (target === null) {\n      throw MinimongoError('$rename source field invalid', {\n        field: field\n      });\n    }\n    if (typeof arg !== 'string') {\n      throw MinimongoError('$rename target must be a string', {\n        field: field\n      });\n    }\n    if (arg.includes('\\0')) {\n      // Null bytes are not allowed in Mongo field names\n      // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\n      throw MinimongoError('The \\'to\\' field for $rename cannot contain an embedded null byte', {\n        field: field\n      });\n    }\n    if (target === undefined) {\n      return;\n    }\n    var object = target[field];\n    delete target[field];\n    var keyparts = arg.split('.');\n    var target2 = findModTarget(doc, keyparts, {\n      forbidArray: true\n    });\n    if (target2 === null) {\n      throw MinimongoError('$rename target field invalid', {\n        field: field\n      });\n    }\n    target2[keyparts.pop()] = object;\n  },\n  $set: function (target, field, arg) {\n    if (target !== Object(target)) {\n      // not an array or an object\n      var error = MinimongoError('Cannot set property on non-object field', {\n        field: field\n      });\n      error.setPropertyError = true;\n      throw error;\n    }\n    if (target === null) {\n      var _error = MinimongoError('Cannot set property on null', {\n        field: field\n      });\n      _error.setPropertyError = true;\n      throw _error;\n    }\n    assertHasValidFieldNames(arg);\n    target[field] = arg;\n  },\n  $setOnInsert: function (target, field, arg) {\n    // converted to `$set` in `_modify`\n  },\n  $unset: function (target, field, arg) {\n    if (target !== undefined) {\n      if (target instanceof Array) {\n        if (field in target) {\n          target[field] = null;\n        }\n      } else {\n        delete target[field];\n      }\n    }\n  },\n  $push: function (target, field, arg) {\n    if (target[field] === undefined) {\n      target[field] = [];\n    }\n    if (!(target[field] instanceof Array)) {\n      throw MinimongoError('Cannot apply $push modifier to non-array', {\n        field: field\n      });\n    }\n    if (!(arg && arg.$each)) {\n      // Simple mode: not $each\n      assertHasValidFieldNames(arg);\n      target[field].push(arg);\n      return;\n    }\n\n    // Fancy mode: $each (and maybe $slice and $sort and $position)\n    var toPush = arg.$each;\n    if (!(toPush instanceof Array)) {\n      throw MinimongoError('$each must be an array', {\n        field: field\n      });\n    }\n    assertHasValidFieldNames(toPush);\n\n    // Parse $position\n    var position = undefined;\n    if ('$position' in arg) {\n      if (typeof arg.$position !== 'number') {\n        throw MinimongoError('$position must be a numeric value', {\n          field: field\n        });\n      }\n\n      // XXX should check to make sure integer\n      if (arg.$position < 0) {\n        throw MinimongoError('$position in $push must be zero or positive', {\n          field: field\n        });\n      }\n      position = arg.$position;\n    }\n\n    // Parse $slice.\n    var slice = undefined;\n    if ('$slice' in arg) {\n      if (typeof arg.$slice !== 'number') {\n        throw MinimongoError('$slice must be a numeric value', {\n          field: field\n        });\n      }\n\n      // XXX should check to make sure integer\n      slice = arg.$slice;\n    }\n\n    // Parse $sort.\n    var sortFunction = undefined;\n    if (arg.$sort) {\n      if (slice === undefined) {\n        throw MinimongoError('$sort requires $slice to be present', {\n          field: field\n        });\n      }\n\n      // XXX this allows us to use a $sort whose value is an array, but that's\n      // actually an extension of the Node driver, so it won't work\n      // server-side. Could be confusing!\n      // XXX is it correct that we don't do geo-stuff here?\n      sortFunction = new Minimongo.Sorter(arg.$sort).getComparator();\n      toPush.forEach(function (element) {\n        if (LocalCollection._f._type(element) !== 3) {\n          throw MinimongoError('$push like modifiers using $sort require all elements to be ' + 'objects', {\n            field: field\n          });\n        }\n      });\n    }\n\n    // Actually push.\n    if (position === undefined) {\n      toPush.forEach(function (element) {\n        target[field].push(element);\n      });\n    } else {\n      var _target$field;\n      var spliceArguments = [position, 0];\n      toPush.forEach(function (element) {\n        spliceArguments.push(element);\n      });\n      (_target$field = target[field]).splice.apply(_target$field, spliceArguments);\n    }\n\n    // Actually sort.\n    if (sortFunction) {\n      target[field].sort(sortFunction);\n    }\n\n    // Actually slice.\n    if (slice !== undefined) {\n      if (slice === 0) {\n        target[field] = []; // differs from Array.slice!\n      } else if (slice < 0) {\n        target[field] = target[field].slice(slice);\n      } else {\n        target[field] = target[field].slice(0, slice);\n      }\n    }\n  },\n  $pushAll: function (target, field, arg) {\n    if (!(_typeof(arg) === 'object' && arg instanceof Array)) {\n      throw MinimongoError('Modifier $pushAll/pullAll allowed for arrays only');\n    }\n    assertHasValidFieldNames(arg);\n    var toPush = target[field];\n    if (toPush === undefined) {\n      target[field] = arg;\n    } else if (!(toPush instanceof Array)) {\n      throw MinimongoError('Cannot apply $pushAll modifier to non-array', {\n        field: field\n      });\n    } else {\n      toPush.push.apply(toPush, _toConsumableArray(arg));\n    }\n  },\n  $addToSet: function (target, field, arg) {\n    var isEach = false;\n    if (_typeof(arg) === 'object') {\n      // check if first key is '$each'\n      var keys = Object.keys(arg);\n      if (keys[0] === '$each') {\n        isEach = true;\n      }\n    }\n    var values = isEach ? arg.$each : [arg];\n    assertHasValidFieldNames(values);\n    var toAdd = target[field];\n    if (toAdd === undefined) {\n      target[field] = values;\n    } else if (!(toAdd instanceof Array)) {\n      throw MinimongoError('Cannot apply $addToSet modifier to non-array', {\n        field: field\n      });\n    } else {\n      values.forEach(function (value) {\n        if (toAdd.some(function (element) {\n          return LocalCollection._f._equal(value, element);\n        })) {\n          return;\n        }\n        toAdd.push(value);\n      });\n    }\n  },\n  $pop: function (target, field, arg) {\n    if (target === undefined) {\n      return;\n    }\n    var toPop = target[field];\n    if (toPop === undefined) {\n      return;\n    }\n    if (!(toPop instanceof Array)) {\n      throw MinimongoError('Cannot apply $pop modifier to non-array', {\n        field: field\n      });\n    }\n    if (typeof arg === 'number' && arg < 0) {\n      toPop.splice(0, 1);\n    } else {\n      toPop.pop();\n    }\n  },\n  $pull: function (target, field, arg) {\n    if (target === undefined) {\n      return;\n    }\n    var toPull = target[field];\n    if (toPull === undefined) {\n      return;\n    }\n    if (!(toPull instanceof Array)) {\n      throw MinimongoError('Cannot apply $pull/pullAll modifier to non-array', {\n        field: field\n      });\n    }\n    var out;\n    if (arg != null && _typeof(arg) === 'object' && !(arg instanceof Array)) {\n      // XXX would be much nicer to compile this once, rather than\n      // for each document we modify.. but usually we're not\n      // modifying that many documents, so we'll let it slide for\n      // now\n\n      // XXX Minimongo.Matcher isn't up for the job, because we need\n      // to permit stuff like {$pull: {a: {$gt: 4}}}.. something\n      // like {$gt: 4} is not normally a complete selector.\n      // same issue as $elemMatch possibly?\n      var matcher = new Minimongo.Matcher(arg);\n      out = toPull.filter(function (element) {\n        return !matcher.documentMatches(element).result;\n      });\n    } else {\n      out = toPull.filter(function (element) {\n        return !LocalCollection._f._equal(element, arg);\n      });\n    }\n    target[field] = out;\n  },\n  $pullAll: function (target, field, arg) {\n    if (!(_typeof(arg) === 'object' && arg instanceof Array)) {\n      throw MinimongoError('Modifier $pushAll/pullAll allowed for arrays only', {\n        field: field\n      });\n    }\n    if (target === undefined) {\n      return;\n    }\n    var toPull = target[field];\n    if (toPull === undefined) {\n      return;\n    }\n    if (!(toPull instanceof Array)) {\n      throw MinimongoError('Cannot apply $pull/pullAll modifier to non-array', {\n        field: field\n      });\n    }\n    target[field] = toPull.filter(function (object) {\n      return !arg.some(function (element) {\n        return LocalCollection._f._equal(object, element);\n      });\n    });\n  },\n  $bit: function (target, field, arg) {\n    // XXX mongo only supports $bit on integers, and we only support\n    // native javascript numbers (doubles) so far, so we can't support $bit\n    throw MinimongoError('$bit is not supported', {\n      field: field\n    });\n  },\n  $v: function () {\n    // As discussed in https://github.com/meteor/meteor/issues/9623,\n    // the `$v` operator is not needed by Meteor, but problems can occur if\n    // it's not at least callable (as of Mongo >= 3.6). It's defined here as\n    // a no-op to work around these problems.\n  }\n};\nvar NO_CREATE_MODIFIERS = {\n  $pop: true,\n  $pull: true,\n  $pullAll: true,\n  $rename: true,\n  $unset: true\n};\n\n// Make sure field names do not contain Mongo restricted\n// characters ('.', '$', '\\0').\n// https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\nvar invalidCharMsg = {\n  $: 'start with \\'$\\'',\n  '.': 'contain \\'.\\'',\n  '\\0': 'contain null bytes'\n};\n\n// checks if all field names in an object are valid\nfunction assertHasValidFieldNames(doc) {\n  if (doc && _typeof(doc) === 'object') {\n    JSON.stringify(doc, function (key, value) {\n      assertIsValidFieldName(key);\n      return value;\n    });\n  }\n}\nfunction assertIsValidFieldName(key) {\n  var match;\n  if (typeof key === 'string' && (match = key.match(/^\\$|\\.|\\0/))) {\n    throw MinimongoError(\"Key \" + key + \" must not \" + invalidCharMsg[match[0]]);\n  }\n}\n\n// for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],\n// and then you would operate on the 'e' property of the returned\n// object.\n//\n// if options.noCreate is falsey, creates intermediate levels of\n// structure as necessary, like mkdir -p (and raises an exception if\n// that would mean giving a non-numeric property to an array.) if\n// options.noCreate is true, return undefined instead.\n//\n// may modify the last element of keyparts to signal to the caller that it needs\n// to use a different value to index into the returned object (for example,\n// ['a', '01'] -> ['a', 1]).\n//\n// if forbidArray is true, return null if the keypath goes through an array.\n//\n// if options.arrayIndices is set, use its first element for the (first) '$' in\n// the path.\nfunction findModTarget(doc, keyparts) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var usedArrayIndex = false;\n  for (var i = 0; i < keyparts.length; i++) {\n    var last = i === keyparts.length - 1;\n    var keypart = keyparts[i];\n    if (!isIndexable(doc)) {\n      if (options.noCreate) {\n        return undefined;\n      }\n      var error = MinimongoError(\"cannot use the part '\" + keypart + \"' to traverse \" + doc);\n      error.setPropertyError = true;\n      throw error;\n    }\n    if (doc instanceof Array) {\n      if (options.forbidArray) {\n        return null;\n      }\n      if (keypart === '$') {\n        if (usedArrayIndex) {\n          throw MinimongoError('Too many positional (i.e. \\'$\\') elements');\n        }\n        if (!options.arrayIndices || !options.arrayIndices.length) {\n          throw MinimongoError('The positional operator did not find the match needed from the ' + 'query');\n        }\n        keypart = options.arrayIndices[0];\n        usedArrayIndex = true;\n      } else if (isNumericKey(keypart)) {\n        keypart = parseInt(keypart);\n      } else {\n        if (options.noCreate) {\n          return undefined;\n        }\n        throw MinimongoError(\"can't append to array using string field name [\" + keypart + \"]\");\n      }\n      if (last) {\n        keyparts[i] = keypart; // handle 'a.01'\n      }\n      if (options.noCreate && keypart >= doc.length) {\n        return undefined;\n      }\n      while (doc.length < keypart) {\n        doc.push(null);\n      }\n      if (!last) {\n        if (doc.length === keypart) {\n          doc.push({});\n        } else if (_typeof(doc[keypart]) !== 'object') {\n          throw MinimongoError(\"can't modify field '\" + keyparts[i + 1] + \"' of list value \" + JSON.stringify(doc[keypart]));\n        }\n      }\n    } else {\n      assertIsValidFieldName(keypart);\n      if (!(keypart in doc)) {\n        if (options.noCreate) {\n          return undefined;\n        }\n        if (!last) {\n          doc[keypart] = {};\n        }\n      }\n    }\n    if (last) {\n      return doc;\n    }\n    doc = doc[keypart];\n  }\n\n  // notreached\n}","map":{"version":3,"names":["_toConsumableArray","module","link","default","v","_typeof","_inheritsLoose","_objectSpread","_createForOfIteratorHelperLoose","_readOnlyError","_regeneratorRuntime","export","LocalCollection","Cursor","ObserveHandle","hasOwn","isIndexable","isNumericKey","isOperatorObject","populateDocumentWithQueryFields","projectionDetails","getAsyncMethodName","name","_docs","_IdMap","_observeQueue","Meteor","isClient","_SynchronousQueue","_AsynchronousQueue","next_qid","queries","Object","create","_savedOriginals","paused","_proto","prototype","countDocuments","selector","options","find","countAsync","estimatedDocumentCount","arguments","length","findOne","undefined","limit","fetch","findOneAsync","_args","async","_context","prev","next","awrap","fetchAsync","abrupt","sent","stop","Promise","prepareInsert","doc","assertHasValidFieldNames","call","_id","_useOID","MongoID","ObjectID","Random","id","has","MinimongoError","_saveOriginal","set","insert","callback","_this","EJSON","clone","queriesToRecompute","_i","_Object$keys","keys","qid","query","dirty","matchResult","matcher","documentMatches","result","distances","distance","cursor","skip","push","_insertInResultsSync","forEach","_recomputeResults","drain","defer","insertAsync","_this2","_i2","_Object$keys2","_context2","_insertInResultsAsync","pauseObservers","_this3","resultsSnapshot","results","clearResultQueries","_this4","size","clear","ordered","prepareRemove","_this5","Minimongo","Matcher","remove","_eachPossiblyMatchingDocSync","queryRemove","_loop","removeId","i","removeDoc","get","_this6","equals","_this$prepareRemove","_removeFromResultsSync","removeAsync","_this7","_this$prepareRemove2","_iterator","_step","_remove","_context3","done","value","_removeFromResultsAsync","_resumeObservers","_this8","_diffQueryChanges","projectionFn","resumeObserversServer","_context4","resumeObserversClient","retrieveOriginals","Error","originals","saveOriginals","prepareUpdate","_this9","qidToOriginalResults","docMap","idsMatched","_idsMatchedBySelector","Array","memoizedCloneIfNeeded","docToMemoize","some","map","finishUpdate","_ref","updateCount","insertedId","_returnObject","numberAffected","updateAsync","mod","_this0","recomputeQids","_context6","Function","_eachPossiblyMatchingDocAsync","_callee","queryResult","_context5","_modifyAndNotifyAsync","arrayIndices","multi","upsert","_createUpsertDocument","update","_this1","_modifyAndNotifySync","assign","upsertAsync","fn","specificIds","_iterator2","_step2","_t","_context7","forEachAsync","_iterator3","_step3","_getMatchedDocAndModify","_this10","matched_before","old_doc","_modify","_i3","_Object$keys3","afterMatch","after","before","_updateInResultsSync","_i4","_Object$keys4","_context8","_updateInResultsAsync","oldResults","_getRawObjects","_CachingChangeObserver","_this11","orderedFromCallbacks","callbacks","_observeChangesCallbacksAreOrdered","docs","OrderedDict","idStringify","applyChange","addedBefore","fields","added","putBefore","movedBefore","moveBefore","changed","DiffSequence","applyChanges","removed","_IdMap2","idParse","IdMap","wrapTransform","transform","__wrappedTransform__","wrapped","transformed","Tracker","nonreactive","_isPlainObject","_binarySearch","cmp","array","first","range","halfRange","Math","floor","_checkSupportedProjection","isArray","keyPath","split","includes","key","_compileProjection","_idProjection","details","ruleTree","subdoc","including","rule","tree","modifier","selectorDocument","isModify","_isModificationMod","newDoc","$set","isInsert","replacement","_diffObjects","left","right","diffObjects","newResults","observer","diffQueryChanges","_diffQueryOrderedChanges","diffQueryOrderedChanges","_diffQueryUnorderedChanges","diffQueryUnorderedChanges","_findInOrderedResults","_selectorIsId","$in","every","$and","subIds","sorter","_insertInSortedList","getComparator","_callee2","_context9","splice","isReplace","substr","x","_f","_type","isModifier","operator","setOnInsert","modFunc","MODIFIERS","operand","keypath","arg","keyparts","Boolean","target","findModTarget","forbidArray","noCreate","NO_CREATE_MODIFIERS","pop","_observeFromObserveChanges","observeCallbacks","getTransform","suppressed","_suppress_initial","observeChangesCallbacks","_observeCallbacksAreOrdered","indices","_no_indices","check","addedAt","indexOf","changedAt","oldDoc","movedTo","from","to","removedAt","changeObserver","_fromObserve","handle","observeChanges","nonMutatingCallbacks","setSuppressed","h","_h$isReadyPromise","isReady","isReadyPromise","then","_isPromise","_callee3","_context0","_selectorIsIdPerhapsAsObject","changedFields","makeChangedFields","old_idx","new_idx","_callee4","_t2","_context1","$currentDate","field","$type","Date","$inc","$min","$max","$mul","$rename","object","target2","error","setPropertyError","$setOnInsert","$unset","$push","$each","toPush","position","$position","slice","$slice","sortFunction","$sort","Sorter","element","_target$field","spliceArguments","apply","sort","$pushAll","$addToSet","isEach","values","toAdd","_equal","$pop","toPop","$pull","toPull","out","filter","$pullAll","$bit","$v","invalidCharMsg","$","JSON","stringify","assertIsValidFieldName","match","usedArrayIndex","last","keypart","parseInt"],"sources":["packages/minimongo/local_collection.js"],"sourcesContent":["import Cursor from './cursor.js';\nimport ObserveHandle from './observe_handle.js';\nimport {\n  hasOwn,\n  isIndexable,\n  isNumericKey,\n  isOperatorObject,\n  populateDocumentWithQueryFields,\n  projectionDetails,\n} from './common.js';\n\nimport { getAsyncMethodName } from './constants';\n\n// XXX type checking on selectors (graceful error if malformed)\n\n// LocalCollection: a set of documents that supports queries and modifiers.\nexport default class LocalCollection {\n  constructor(name) {\n    this.name = name;\n    // _id -> document (also containing id)\n    this._docs = new LocalCollection._IdMap;\n\n    this._observeQueue = Meteor.isClient\n      ? new Meteor._SynchronousQueue()\n      : new Meteor._AsynchronousQueue();\n\n    this.next_qid = 1; // live query id generator\n\n    // qid -> live query object. keys:\n    //  ordered: bool. ordered queries have addedBefore/movedBefore callbacks.\n    //  results: array (ordered) or object (unordered) of current results\n    //    (aliased with this._docs!)\n    //  resultsSnapshot: snapshot of results. null if not paused.\n    //  cursor: Cursor object for the query.\n    //  selector, sorter, (callbacks): functions\n    this.queries = Object.create(null);\n\n    // null if not saving originals; an IdMap from id to original document value\n    // if saving originals. See comments before saveOriginals().\n    this._savedOriginals = null;\n\n    // True when observers are paused and we should not send callbacks.\n    this.paused = false;\n  }\n\n  countDocuments(selector, options) {\n    return this.find(selector ?? {}, options).countAsync();\n  }\n\n  estimatedDocumentCount(options) {\n    return this.find({}, options).countAsync();\n  }\n\n  // options may include sort, skip, limit, reactive\n  // sort may be any of these forms:\n  //     {a: 1, b: -1}\n  //     [[\"a\", \"asc\"], [\"b\", \"desc\"]]\n  //     [\"a\", [\"b\", \"desc\"]]\n  //   (in the first form you're beholden to key enumeration order in\n  //   your javascript VM)\n  //\n  // reactive: if given, and false, don't register with Tracker (default\n  // is true)\n  //\n  // XXX possibly should support retrieving a subset of fields? and\n  // have it be a hint (ignored on the client, when not copying the\n  // doc?)\n  //\n  // XXX sort does not yet support subkeys ('a.b') .. fix that!\n  // XXX add one more sort form: \"key\"\n  // XXX tests\n  find(selector, options) {\n    // default syntax for everything is to omit the selector argument.\n    // but if selector is explicitly passed in as false or undefined, we\n    // want a selector that matches nothing.\n    if (arguments.length === 0) {\n      selector = {};\n    }\n\n    return new LocalCollection.Cursor(this, selector, options);\n  }\n\n  findOne(selector, options = {}) {\n    if (arguments.length === 0) {\n      selector = {};\n    }\n\n    // NOTE: by setting limit 1 here, we end up using very inefficient\n    // code that recomputes the whole query on each update. The upside is\n    // that when you reactively depend on a findOne you only get\n    // invalidated when the found object changes, not any object in the\n    // collection. Most findOne will be by id, which has a fast path, so\n    // this might not be a big deal. In most cases, invalidation causes\n    // the called to re-query anyway, so this should be a net performance\n    // improvement.\n    options.limit = 1;\n\n    return this.find(selector, options).fetch()[0];\n  }\n  async findOneAsync(selector, options = {}) {\n    if (arguments.length === 0) {\n      selector = {};\n    }\n    options.limit = 1;\n    return (await this.find(selector, options).fetchAsync())[0];\n  }\n  prepareInsert(doc) {\n    assertHasValidFieldNames(doc);\n\n    // if you really want to use ObjectIDs, set this global.\n    // Mongo.Collection specifies its own ids and does not use this code.\n    if (!hasOwn.call(doc, '_id')) {\n      doc._id = LocalCollection._useOID ? new MongoID.ObjectID() : Random.id();\n    }\n\n    const id = doc._id;\n\n    if (this._docs.has(id)) {\n      throw MinimongoError(`Duplicate _id '${id}'`);\n    }\n\n    this._saveOriginal(id, undefined);\n    this._docs.set(id, doc);\n\n    return id;\n  }\n\n  // XXX possibly enforce that 'undefined' does not appear (we assume\n  // this in our handling of null and $exists)\n  insert(doc, callback) {\n    doc = EJSON.clone(doc);\n    const id = this.prepareInsert(doc);\n    const queriesToRecompute = [];\n\n    // trigger live queries that match\n    for (const qid of Object.keys(this.queries)) {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        continue;\n      }\n\n      const matchResult = query.matcher.documentMatches(doc);\n\n      if (matchResult.result) {\n        if (query.distances && matchResult.distance !== undefined) {\n          query.distances.set(id, matchResult.distance);\n        }\n\n        if (query.cursor.skip || query.cursor.limit) {\n          queriesToRecompute.push(qid);\n        } else {\n          LocalCollection._insertInResultsSync(query, doc);\n        }\n      }\n    }\n\n    queriesToRecompute.forEach(qid => {\n      if (this.queries[qid]) {\n        this._recomputeResults(this.queries[qid]);\n      }\n    });\n\n    this._observeQueue.drain();\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, id);\n      });\n    }\n\n    return id;\n  }\n  async insertAsync(doc, callback) {\n    doc = EJSON.clone(doc);\n    const id = this.prepareInsert(doc);\n    const queriesToRecompute = [];\n\n    // trigger live queries that match\n    for (const qid of Object.keys(this.queries)) {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        continue;\n      }\n\n      const matchResult = query.matcher.documentMatches(doc);\n\n      if (matchResult.result) {\n        if (query.distances && matchResult.distance !== undefined) {\n          query.distances.set(id, matchResult.distance);\n        }\n\n        if (query.cursor.skip || query.cursor.limit) {\n          queriesToRecompute.push(qid);\n        } else {\n          await LocalCollection._insertInResultsAsync(query, doc);\n        }\n      }\n    }\n\n    queriesToRecompute.forEach(qid => {\n      if (this.queries[qid]) {\n        this._recomputeResults(this.queries[qid]);\n      }\n    });\n\n    await this._observeQueue.drain();\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, id);\n      });\n    }\n\n    return id;\n  }\n\n  // Pause the observers. No callbacks from observers will fire until\n  // 'resumeObservers' is called.\n  pauseObservers() {\n    // No-op if already paused.\n    if (this.paused) {\n      return;\n    }\n\n    // Set the 'paused' flag such that new observer messages don't fire.\n    this.paused = true;\n\n    // Take a snapshot of the query results for each query.\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n      query.resultsSnapshot = EJSON.clone(query.results);\n    });\n  }\n\n  clearResultQueries(callback) {\n    const result = this._docs.size();\n\n    this._docs.clear();\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.ordered) {\n        query.results = [];\n      } else {\n        query.results.clear();\n      }\n    });\n\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, result);\n      });\n    }\n\n    return result;\n  }\n\n\n  prepareRemove(selector) {\n    const matcher = new Minimongo.Matcher(selector);\n    const remove = [];\n\n    this._eachPossiblyMatchingDocSync(selector, (doc, id) => {\n      if (matcher.documentMatches(doc).result) {\n        remove.push(id);\n      }\n    });\n\n    const queriesToRecompute = [];\n    const queryRemove = [];\n\n    for (let i = 0; i < remove.length; i++) {\n      const removeId = remove[i];\n      const removeDoc = this._docs.get(removeId);\n\n      Object.keys(this.queries).forEach(qid => {\n        const query = this.queries[qid];\n\n        if (query.dirty) {\n          return;\n        }\n\n        if (query.matcher.documentMatches(removeDoc).result) {\n          if (query.cursor.skip || query.cursor.limit) {\n            queriesToRecompute.push(qid);\n          } else {\n            queryRemove.push({qid, doc: removeDoc});\n          }\n        }\n      });\n\n      this._saveOriginal(removeId, removeDoc);\n      this._docs.remove(removeId);\n    }\n\n    return { queriesToRecompute, queryRemove, remove };\n  }\n\n  remove(selector, callback) {\n    // Easy special case: if we're not calling observeChanges callbacks and\n    // we're not saving originals and we got asked to remove everything, then\n    // just empty everything directly.\n    if (this.paused && !this._savedOriginals && EJSON.equals(selector, {})) {\n      return this.clearResultQueries(callback);\n    }\n\n    const { queriesToRecompute, queryRemove, remove } = this.prepareRemove(selector);\n\n    // run live query callbacks _after_ we've removed the documents.\n    queryRemove.forEach(remove => {\n      const query = this.queries[remove.qid];\n\n      if (query) {\n        query.distances && query.distances.remove(remove.doc._id);\n        LocalCollection._removeFromResultsSync(query, remove.doc);\n      }\n    });\n\n    queriesToRecompute.forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query) {\n        this._recomputeResults(query);\n      }\n    });\n\n    this._observeQueue.drain();\n\n    const result = remove.length;\n\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, result);\n      });\n    }\n\n    return result;\n  }\n\n  async removeAsync(selector, callback) {\n    // Easy special case: if we're not calling observeChanges callbacks and\n    // we're not saving originals and we got asked to remove everything, then\n    // just empty everything directly.\n    if (this.paused && !this._savedOriginals && EJSON.equals(selector, {})) {\n      return this.clearResultQueries(callback);\n    }\n\n    const { queriesToRecompute, queryRemove, remove } = this.prepareRemove(selector);\n\n    // run live query callbacks _after_ we've removed the documents.\n    for (const remove of queryRemove) {\n      const query = this.queries[remove.qid];\n\n      if (query) {\n        query.distances && query.distances.remove(remove.doc._id);\n        await LocalCollection._removeFromResultsAsync(query, remove.doc);\n      }\n    }\n    queriesToRecompute.forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query) {\n        this._recomputeResults(query);\n      }\n    });\n\n    await this._observeQueue.drain();\n\n    const result = remove.length;\n\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, result);\n      });\n    }\n\n    return result;\n  }\n\n  // Resume the observers. Observers immediately receive change\n  // notifications to bring them to the current state of the\n  // database. Note that this is not just replaying all the changes that\n  // happened during the pause, it is a smarter 'coalesced' diff.\n  _resumeObservers() {\n    // No-op if not paused.\n    if (!this.paused) {\n      return;\n    }\n\n    // Unset the 'paused' flag. Make sure to do this first, otherwise\n    // observer methods won't actually fire when we trigger them.\n    this.paused = false;\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        query.dirty = false;\n\n        // re-compute results will perform `LocalCollection._diffQueryChanges`\n        // automatically.\n        this._recomputeResults(query, query.resultsSnapshot);\n      } else {\n        // Diff the current results against the snapshot and send to observers.\n        // pass the query object for its observer callbacks.\n        LocalCollection._diffQueryChanges(\n          query.ordered,\n          query.resultsSnapshot,\n          query.results,\n          query,\n          {projectionFn: query.projectionFn}\n        );\n      }\n\n      query.resultsSnapshot = null;\n    });\n  }\n\n  async resumeObserversServer() {\n    this._resumeObservers();\n    await this._observeQueue.drain();\n  }\n  resumeObserversClient() {\n    this._resumeObservers();\n    this._observeQueue.drain();\n  }\n\n  retrieveOriginals() {\n    if (!this._savedOriginals) {\n      throw new Error('Called retrieveOriginals without saveOriginals');\n    }\n\n    const originals = this._savedOriginals;\n\n    this._savedOriginals = null;\n\n    return originals;\n  }\n\n  // To track what documents are affected by a piece of code, call\n  // saveOriginals() before it and retrieveOriginals() after it.\n  // retrieveOriginals returns an object whose keys are the ids of the documents\n  // that were affected since the call to saveOriginals(), and the values are\n  // equal to the document's contents at the time of saveOriginals. (In the case\n  // of an inserted document, undefined is the value.) You must alternate\n  // between calls to saveOriginals() and retrieveOriginals().\n  saveOriginals() {\n    if (this._savedOriginals) {\n      throw new Error('Called saveOriginals twice without retrieveOriginals');\n    }\n\n    this._savedOriginals = new LocalCollection._IdMap;\n  }\n\n  prepareUpdate(selector) {\n    // Save the original results of any query that we might need to\n    // _recomputeResults on, because _modifyAndNotify will mutate the objects in\n    // it. (We don't need to save the original results of paused queries because\n    // they already have a resultsSnapshot and we won't be diffing in\n    // _recomputeResults.)\n    const qidToOriginalResults = {};\n\n    // We should only clone each document once, even if it appears in multiple\n    // queries\n    const docMap = new LocalCollection._IdMap;\n    const idsMatched = LocalCollection._idsMatchedBySelector(selector);\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if ((query.cursor.skip || query.cursor.limit) && ! this.paused) {\n        // Catch the case of a reactive `count()` on a cursor with skip\n        // or limit, which registers an unordered observe. This is a\n        // pretty rare case, so we just clone the entire result set with\n        // no optimizations for documents that appear in these result\n        // sets and other queries.\n        if (query.results instanceof LocalCollection._IdMap) {\n          qidToOriginalResults[qid] = query.results.clone();\n          return;\n        }\n\n        if (!(query.results instanceof Array)) {\n          throw new Error('Assertion failed: query.results not an array');\n        }\n\n        // Clones a document to be stored in `qidToOriginalResults`\n        // because it may be modified before the new and old result sets\n        // are diffed. But if we know exactly which document IDs we're\n        // going to modify, then we only need to clone those.\n        const memoizedCloneIfNeeded = doc => {\n          if (docMap.has(doc._id)) {\n            return docMap.get(doc._id);\n          }\n\n          const docToMemoize = (\n            idsMatched &&\n            !idsMatched.some(id => EJSON.equals(id, doc._id))\n          ) ? doc : EJSON.clone(doc);\n\n          docMap.set(doc._id, docToMemoize);\n\n          return docToMemoize;\n        };\n\n        qidToOriginalResults[qid] = query.results.map(memoizedCloneIfNeeded);\n      }\n    });\n\n    return qidToOriginalResults;\n  }\n\n  finishUpdate({ options, updateCount, callback, insertedId }) {\n\n\n    // Return the number of affected documents, or in the upsert case, an object\n    // containing the number of affected docs and the id of the doc that was\n    // inserted, if any.\n    let result;\n    if (options._returnObject) {\n      result = { numberAffected: updateCount };\n\n      if (insertedId !== undefined) {\n        result.insertedId = insertedId;\n      }\n    } else {\n      result = updateCount;\n    }\n\n    if (callback) {\n      Meteor.defer(() => {\n        callback(null, result);\n      });\n    }\n\n    return result;\n  }\n\n  // XXX atomicity: if multi is true, and one modification fails, do\n  // we rollback the whole operation, or what?\n  async updateAsync(selector, mod, options, callback) {\n    if (! callback && options instanceof Function) {\n      callback = options;\n      options = null;\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    const matcher = new Minimongo.Matcher(selector, true);\n\n    const qidToOriginalResults = this.prepareUpdate(selector);\n\n    let recomputeQids = {};\n\n    let updateCount = 0;\n\n    await this._eachPossiblyMatchingDocAsync(selector, async (doc, id) => {\n      const queryResult = matcher.documentMatches(doc);\n\n      if (queryResult.result) {\n        // XXX Should we save the original even if mod ends up being a no-op?\n        this._saveOriginal(id, doc);\n        recomputeQids = await this._modifyAndNotifyAsync(\n          doc,\n          mod,\n          queryResult.arrayIndices\n        );\n\n        ++updateCount;\n\n        if (!options.multi) {\n          return false; // break\n        }\n      }\n\n      return true;\n    });\n\n    Object.keys(recomputeQids).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query) {\n        this._recomputeResults(query, qidToOriginalResults[qid]);\n      }\n    });\n\n    await this._observeQueue.drain();\n\n    // If we are doing an upsert, and we didn't modify any documents yet, then\n    // it's time to do an insert. Figure out what document we are inserting, and\n    // generate an id for it.\n    let insertedId;\n    if (updateCount === 0 && options.upsert) {\n      const doc = LocalCollection._createUpsertDocument(selector, mod);\n      if (!doc._id && options.insertedId) {\n        doc._id = options.insertedId;\n      }\n\n      insertedId = await this.insertAsync(doc);\n      updateCount = 1;\n    }\n\n    return this.finishUpdate({\n      options,\n      insertedId,\n      updateCount,\n      callback,\n    });\n  }\n  // XXX atomicity: if multi is true, and one modification fails, do\n  // we rollback the whole operation, or what?\n  update(selector, mod, options, callback) {\n    if (! callback && options instanceof Function) {\n      callback = options;\n      options = null;\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    const matcher = new Minimongo.Matcher(selector, true);\n\n    const qidToOriginalResults = this.prepareUpdate(selector);\n\n    let recomputeQids = {};\n\n    let updateCount = 0;\n\n    this._eachPossiblyMatchingDocSync(selector, (doc, id) => {\n      const queryResult = matcher.documentMatches(doc);\n\n      if (queryResult.result) {\n        // XXX Should we save the original even if mod ends up being a no-op?\n        this._saveOriginal(id, doc);\n        recomputeQids = this._modifyAndNotifySync(\n          doc,\n          mod,\n          queryResult.arrayIndices\n        );\n\n        ++updateCount;\n\n        if (!options.multi) {\n          return false; // break\n        }\n      }\n\n      return true;\n    });\n\n    Object.keys(recomputeQids).forEach(qid => {\n      const query = this.queries[qid];\n      if (query) {\n        this._recomputeResults(query, qidToOriginalResults[qid]);\n      }\n    });\n\n    this._observeQueue.drain();\n\n\n    // If we are doing an upsert, and we didn't modify any documents yet, then\n    // it's time to do an insert. Figure out what document we are inserting, and\n    // generate an id for it.\n    let insertedId;\n    if (updateCount === 0 && options.upsert) {\n      const doc = LocalCollection._createUpsertDocument(selector, mod);\n      if (!doc._id && options.insertedId) {\n        doc._id = options.insertedId;\n      }\n\n      insertedId = this.insert(doc);\n      updateCount = 1;\n    }\n\n\n    return this.finishUpdate({\n      options,\n      updateCount,\n      callback,\n      selector,\n      mod,\n    });\n  }\n\n  // A convenience wrapper on update. LocalCollection.upsert(sel, mod) is\n  // equivalent to LocalCollection.update(sel, mod, {upsert: true,\n  // _returnObject: true}).\n  upsert(selector, mod, options, callback) {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    return this.update(\n      selector,\n      mod,\n      Object.assign({}, options, {upsert: true, _returnObject: true}),\n      callback\n    );\n  }\n\n  upsertAsync(selector, mod, options, callback) {\n    if (!callback && typeof options === 'function') {\n      callback = options;\n      options = {};\n    }\n\n    return this.updateAsync(\n      selector,\n      mod,\n      Object.assign({}, options, {upsert: true, _returnObject: true}),\n      callback\n    );\n  }\n\n  // Iterates over a subset of documents that could match selector; calls\n  // fn(doc, id) on each of them.  Specifically, if selector specifies\n  // specific _id's, it only looks at those.  doc is *not* cloned: it is the\n  // same object that is in _docs.\n  async _eachPossiblyMatchingDocAsync(selector, fn) {\n    const specificIds = LocalCollection._idsMatchedBySelector(selector);\n\n    if (specificIds) {\n      for (const id of specificIds) {\n        const doc = this._docs.get(id);\n\n        if (doc && ! (await fn(doc, id))) {\n          break\n        }\n      }\n    } else {\n      await this._docs.forEachAsync(fn);\n    }\n  }\n  _eachPossiblyMatchingDocSync(selector, fn) {\n    const specificIds = LocalCollection._idsMatchedBySelector(selector);\n\n    if (specificIds) {\n      for (const id of specificIds) {\n        const doc = this._docs.get(id);\n\n        if (doc && !fn(doc, id)) {\n          break\n        }\n      }\n    } else {\n      this._docs.forEach(fn);\n    }\n  }\n\n  _getMatchedDocAndModify(doc, mod, arrayIndices) {\n    const matched_before = {};\n\n    Object.keys(this.queries).forEach(qid => {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        return;\n      }\n\n      if (query.ordered) {\n        matched_before[qid] = query.matcher.documentMatches(doc).result;\n      } else {\n        // Because we don't support skip or limit (yet) in unordered queries, we\n        // can just do a direct lookup.\n        matched_before[qid] = query.results.has(doc._id);\n      }\n    });\n\n    return matched_before;\n  }\n\n  _modifyAndNotifySync(doc, mod, arrayIndices) {\n\n    const matched_before = this._getMatchedDocAndModify(doc, mod, arrayIndices);\n\n    const old_doc = EJSON.clone(doc);\n    LocalCollection._modify(doc, mod, {arrayIndices});\n\n    const recomputeQids = {};\n\n    for (const qid of Object.keys(this.queries)) {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        continue;\n      }\n\n      const afterMatch = query.matcher.documentMatches(doc);\n      const after = afterMatch.result;\n      const before = matched_before[qid];\n\n      if (after && query.distances && afterMatch.distance !== undefined) {\n        query.distances.set(doc._id, afterMatch.distance);\n      }\n\n      if (query.cursor.skip || query.cursor.limit) {\n        // We need to recompute any query where the doc may have been in the\n        // cursor's window either before or after the update. (Note that if skip\n        // or limit is set, \"before\" and \"after\" being true do not necessarily\n        // mean that the document is in the cursor's output after skip/limit is\n        // applied... but if they are false, then the document definitely is NOT\n        // in the output. So it's safe to skip recompute if neither before or\n        // after are true.)\n        if (before || after) {\n          recomputeQids[qid] = true;\n        }\n      } else if (before && !after) {\n        LocalCollection._removeFromResultsSync(query, doc);\n      } else if (!before && after) {\n        LocalCollection._insertInResultsSync(query, doc);\n      } else if (before && after) {\n        LocalCollection._updateInResultsSync(query, doc, old_doc);\n      }\n    }\n    return recomputeQids;\n  }\n\n  async _modifyAndNotifyAsync(doc, mod, arrayIndices) {\n\n    const matched_before = this._getMatchedDocAndModify(doc, mod, arrayIndices);\n\n    const old_doc = EJSON.clone(doc);\n    LocalCollection._modify(doc, mod, {arrayIndices});\n\n    const recomputeQids = {};\n    for (const qid of Object.keys(this.queries)) {\n      const query = this.queries[qid];\n\n      if (query.dirty) {\n        continue;\n      }\n\n      const afterMatch = query.matcher.documentMatches(doc);\n      const after = afterMatch.result;\n      const before = matched_before[qid];\n\n      if (after && query.distances && afterMatch.distance !== undefined) {\n        query.distances.set(doc._id, afterMatch.distance);\n      }\n\n      if (query.cursor.skip || query.cursor.limit) {\n        // We need to recompute any query where the doc may have been in the\n        // cursor's window either before or after the update. (Note that if skip\n        // or limit is set, \"before\" and \"after\" being true do not necessarily\n        // mean that the document is in the cursor's output after skip/limit is\n        // applied... but if they are false, then the document definitely is NOT\n        // in the output. So it's safe to skip recompute if neither before or\n        // after are true.)\n        if (before || after) {\n          recomputeQids[qid] = true;\n        }\n      } else if (before && !after) {\n        await LocalCollection._removeFromResultsAsync(query, doc);\n      } else if (!before && after) {\n        await LocalCollection._insertInResultsAsync(query, doc);\n      } else if (before && after) {\n        await LocalCollection._updateInResultsAsync(query, doc, old_doc);\n      }\n    }\n    return recomputeQids;\n  }\n\n  // Recomputes the results of a query and runs observe callbacks for the\n  // difference between the previous results and the current results (unless\n  // paused). Used for skip/limit queries.\n  //\n  // When this is used by insert or remove, it can just use query.results for\n  // the old results (and there's no need to pass in oldResults), because these\n  // operations don't mutate the documents in the collection. Update needs to\n  // pass in an oldResults which was deep-copied before the modifier was\n  // applied.\n  //\n  // oldResults is guaranteed to be ignored if the query is not paused.\n  _recomputeResults(query, oldResults) {\n    if (this.paused) {\n      // There's no reason to recompute the results now as we're still paused.\n      // By flagging the query as \"dirty\", the recompute will be performed\n      // when resumeObservers is called.\n      query.dirty = true;\n      return;\n    }\n\n    if (!this.paused && !oldResults) {\n      oldResults = query.results;\n    }\n\n    if (query.distances) {\n      query.distances.clear();\n    }\n\n    query.results = query.cursor._getRawObjects({\n      distances: query.distances,\n      ordered: query.ordered\n    });\n\n    if (!this.paused) {\n      LocalCollection._diffQueryChanges(\n        query.ordered,\n        oldResults,\n        query.results,\n        query,\n        {projectionFn: query.projectionFn}\n      );\n    }\n  }\n\n  _saveOriginal(id, doc) {\n    // Are we even trying to save originals?\n    if (!this._savedOriginals) {\n      return;\n    }\n\n    // Have we previously mutated the original (and so 'doc' is not actually\n    // original)?  (Note the 'has' check rather than truth: we store undefined\n    // here for inserted docs!)\n    if (this._savedOriginals.has(id)) {\n      return;\n    }\n\n    this._savedOriginals.set(id, EJSON.clone(doc));\n  }\n}\n\nLocalCollection.Cursor = Cursor;\n\nLocalCollection.ObserveHandle = ObserveHandle;\n\n// XXX maybe move these into another ObserveHelpers package or something\n\n// _CachingChangeObserver is an object which receives observeChanges callbacks\n// and keeps a cache of the current cursor state up to date in this.docs. Users\n// of this class should read the docs field but not modify it. You should pass\n// the \"applyChange\" field as the callbacks to the underlying observeChanges\n// call. Optionally, you can specify your own observeChanges callbacks which are\n// invoked immediately before the docs field is updated; this object is made\n// available as `this` to those callbacks.\nLocalCollection._CachingChangeObserver = class _CachingChangeObserver {\n  constructor(options = {}) {\n    const orderedFromCallbacks = (\n      options.callbacks &&\n      LocalCollection._observeChangesCallbacksAreOrdered(options.callbacks)\n    );\n\n    if (hasOwn.call(options, 'ordered')) {\n      this.ordered = options.ordered;\n\n      if (options.callbacks && options.ordered !== orderedFromCallbacks) {\n        throw Error('ordered option doesn\\'t match callbacks');\n      }\n    } else if (options.callbacks) {\n      this.ordered = orderedFromCallbacks;\n    } else {\n      throw Error('must provide ordered or callbacks');\n    }\n\n    const callbacks = options.callbacks || {};\n\n    if (this.ordered) {\n      this.docs = new OrderedDict(MongoID.idStringify);\n      this.applyChange = {\n        addedBefore: (id, fields, before) => {\n          // Take a shallow copy since the top-level properties can be changed\n          const doc = { ...fields };\n\n          doc._id = id;\n\n          if (callbacks.addedBefore) {\n            callbacks.addedBefore.call(this, id, EJSON.clone(fields), before);\n          }\n\n          // This line triggers if we provide added with movedBefore.\n          if (callbacks.added) {\n            callbacks.added.call(this, id, EJSON.clone(fields));\n          }\n\n          // XXX could `before` be a falsy ID?  Technically\n          // idStringify seems to allow for them -- though\n          // OrderedDict won't call stringify on a falsy arg.\n          this.docs.putBefore(id, doc, before || null);\n        },\n        movedBefore: (id, before) => {\n          if (callbacks.movedBefore) {\n            callbacks.movedBefore.call(this, id, before);\n          }\n\n          this.docs.moveBefore(id, before || null);\n        },\n      };\n    } else {\n      this.docs = new LocalCollection._IdMap;\n      this.applyChange = {\n        added: (id, fields) => {\n          // Take a shallow copy since the top-level properties can be changed\n          const doc = { ...fields };\n\n          if (callbacks.added) {\n            callbacks.added.call(this, id, EJSON.clone(fields));\n          }\n\n          doc._id = id;\n\n          this.docs.set(id,  doc);\n        },\n      };\n    }\n\n    // The methods in _IdMap and OrderedDict used by these callbacks are\n    // identical.\n    this.applyChange.changed = (id, fields) => {\n      const doc = this.docs.get(id);\n\n      if (!doc) {\n        throw new Error(`Unknown id for changed: ${id}`);\n      }\n\n      if (callbacks.changed) {\n        callbacks.changed.call(this, id, EJSON.clone(fields));\n      }\n\n      DiffSequence.applyChanges(doc, fields);\n    };\n\n    this.applyChange.removed = id => {\n      if (callbacks.removed) {\n        callbacks.removed.call(this, id);\n      }\n\n      this.docs.remove(id);\n    };\n  }\n};\n\nLocalCollection._IdMap = class _IdMap extends IdMap {\n  constructor() {\n    super(MongoID.idStringify, MongoID.idParse);\n  }\n};\n\n// Wrap a transform function to return objects that have the _id field\n// of the untransformed document. This ensures that subsystems such as\n// the observe-sequence package that call `observe` can keep track of\n// the documents identities.\n//\n// - Require that it returns objects\n// - If the return value has an _id field, verify that it matches the\n//   original _id field\n// - If the return value doesn't have an _id field, add it back.\nLocalCollection.wrapTransform = transform => {\n  if (!transform) {\n    return null;\n  }\n\n  // No need to doubly-wrap transforms.\n  if (transform.__wrappedTransform__) {\n    return transform;\n  }\n\n  const wrapped = doc => {\n    if (!hasOwn.call(doc, '_id')) {\n      // XXX do we ever have a transform on the oplog's collection? because that\n      // collection has no _id.\n      throw new Error('can only transform documents with _id');\n    }\n\n    const id = doc._id;\n\n    // XXX consider making tracker a weak dependency and checking\n    // Package.tracker here\n    const transformed = Tracker.nonreactive(() => transform(doc));\n\n    if (!LocalCollection._isPlainObject(transformed)) {\n      throw new Error('transform must return object');\n    }\n\n    if (hasOwn.call(transformed, '_id')) {\n      if (!EJSON.equals(transformed._id, id)) {\n        throw new Error('transformed document can\\'t have different _id');\n      }\n    } else {\n      transformed._id = id;\n    }\n\n    return transformed;\n  };\n\n  wrapped.__wrappedTransform__ = true;\n\n  return wrapped;\n};\n\n// XXX the sorted-query logic below is laughably inefficient. we'll\n// need to come up with a better datastructure for this.\n//\n// XXX the logic for observing with a skip or a limit is even more\n// laughably inefficient. we recompute the whole results every time!\n\n// This binary search puts a value between any equal values, and the first\n// lesser value.\nLocalCollection._binarySearch = (cmp, array, value) => {\n  let first = 0;\n  let range = array.length;\n\n  while (range > 0) {\n    const halfRange = Math.floor(range / 2);\n\n    if (cmp(value, array[first + halfRange]) >= 0) {\n      first += halfRange + 1;\n      range -= halfRange + 1;\n    } else {\n      range = halfRange;\n    }\n  }\n\n  return first;\n};\n\nLocalCollection._checkSupportedProjection = fields => {\n  if (fields !== Object(fields) || Array.isArray(fields)) {\n    throw MinimongoError('fields option must be an object');\n  }\n\n  Object.keys(fields).forEach(keyPath => {\n    if (keyPath.split('.').includes('$')) {\n      throw MinimongoError(\n        'Minimongo doesn\\'t support $ operator in projections yet.'\n      );\n    }\n\n    const value = fields[keyPath];\n\n    if (typeof value === 'object' &&\n        ['$elemMatch', '$meta', '$slice'].some(key =>\n          hasOwn.call(value, key)\n        )) {\n      throw MinimongoError(\n        'Minimongo doesn\\'t support operators in projections yet.'\n      );\n    }\n\n    if (![1, 0, true, false].includes(value)) {\n      throw MinimongoError(\n        'Projection values should be one of 1, 0, true, or false'\n      );\n    }\n  });\n};\n\n// Knows how to compile a fields projection to a predicate function.\n// @returns - Function: a closure that filters out an object according to the\n//            fields projection rules:\n//            @param obj - Object: MongoDB-styled document\n//            @returns - Object: a document with the fields filtered out\n//                       according to projection rules. Doesn't retain subfields\n//                       of passed argument.\nLocalCollection._compileProjection = fields => {\n  LocalCollection._checkSupportedProjection(fields);\n\n  const _idProjection = fields._id === undefined ? true : fields._id;\n  const details = projectionDetails(fields);\n\n  // returns transformed doc according to ruleTree\n  const transform = (doc, ruleTree) => {\n    // Special case for \"sets\"\n    if (Array.isArray(doc)) {\n      return doc.map(subdoc => transform(subdoc, ruleTree));\n    }\n\n    const result = details.including ? {} : EJSON.clone(doc);\n\n    Object.keys(ruleTree).forEach(key => {\n      if (doc == null || !hasOwn.call(doc, key)) {\n        return;\n      }\n\n      const rule = ruleTree[key];\n\n      if (rule === Object(rule)) {\n        // For sub-objects/subsets we branch\n        if (doc[key] === Object(doc[key])) {\n          result[key] = transform(doc[key], rule);\n        }\n      } else if (details.including) {\n        // Otherwise we don't even touch this subfield\n        result[key] = EJSON.clone(doc[key]);\n      } else {\n        delete result[key];\n      }\n    });\n\n    return doc != null ? result : doc;\n  };\n\n  return doc => {\n    const result = transform(doc, details.tree);\n\n    if (_idProjection && hasOwn.call(doc, '_id')) {\n      result._id = doc._id;\n    }\n\n    if (!_idProjection && hasOwn.call(result, '_id')) {\n      delete result._id;\n    }\n\n    return result;\n  };\n};\n\n// Calculates the document to insert in case we're doing an upsert and the\n// selector does not match any elements\nLocalCollection._createUpsertDocument = (selector, modifier) => {\n  const selectorDocument = populateDocumentWithQueryFields(selector);\n  const isModify = LocalCollection._isModificationMod(modifier);\n\n  const newDoc = {};\n\n  if (selectorDocument._id) {\n    newDoc._id = selectorDocument._id;\n    delete selectorDocument._id;\n  }\n\n  // This double _modify call is made to help with nested properties (see issue\n  // #8631). We do this even if it's a replacement for validation purposes (e.g.\n  // ambiguous id's)\n  LocalCollection._modify(newDoc, {$set: selectorDocument});\n  LocalCollection._modify(newDoc, modifier, {isInsert: true});\n\n  if (isModify) {\n    return newDoc;\n  }\n\n  // Replacement can take _id from query document\n  const replacement = Object.assign({}, modifier);\n  if (newDoc._id) {\n    replacement._id = newDoc._id;\n  }\n\n  return replacement;\n};\n\nLocalCollection._diffObjects = (left, right, callbacks) => {\n  return DiffSequence.diffObjects(left, right, callbacks);\n};\n\n// ordered: bool.\n// old_results and new_results: collections of documents.\n//    if ordered, they are arrays.\n//    if unordered, they are IdMaps\nLocalCollection._diffQueryChanges = (ordered, oldResults, newResults, observer, options) =>\n  DiffSequence.diffQueryChanges(ordered, oldResults, newResults, observer, options)\n;\n\nLocalCollection._diffQueryOrderedChanges = (oldResults, newResults, observer, options) =>\n  DiffSequence.diffQueryOrderedChanges(oldResults, newResults, observer, options)\n;\n\nLocalCollection._diffQueryUnorderedChanges = (oldResults, newResults, observer, options) =>\n  DiffSequence.diffQueryUnorderedChanges(oldResults, newResults, observer, options)\n;\n\nLocalCollection._findInOrderedResults = (query, doc) => {\n  if (!query.ordered) {\n    throw new Error('Can\\'t call _findInOrderedResults on unordered query');\n  }\n\n  for (let i = 0; i < query.results.length; i++) {\n    if (query.results[i] === doc) {\n      return i;\n    }\n  }\n\n  throw Error('object missing from query');\n};\n\n// If this is a selector which explicitly constrains the match by ID to a finite\n// number of documents, returns a list of their IDs.  Otherwise returns\n// null. Note that the selector may have other restrictions so it may not even\n// match those document!  We care about $in and $and since those are generated\n// access-controlled update and remove.\nLocalCollection._idsMatchedBySelector = selector => {\n  // Is the selector just an ID?\n  if (LocalCollection._selectorIsId(selector)) {\n    return [selector];\n  }\n\n  if (!selector) {\n    return null;\n  }\n\n  // Do we have an _id clause?\n  if (hasOwn.call(selector, '_id')) {\n    // Is the _id clause just an ID?\n    if (LocalCollection._selectorIsId(selector._id)) {\n      return [selector._id];\n    }\n\n    // Is the _id clause {_id: {$in: [\"x\", \"y\", \"z\"]}}?\n    if (selector._id\n        && Array.isArray(selector._id.$in)\n        && selector._id.$in.length\n        && selector._id.$in.every(LocalCollection._selectorIsId)) {\n      return selector._id.$in;\n    }\n\n    return null;\n  }\n\n  // If this is a top-level $and, and any of the clauses constrain their\n  // documents, then the whole selector is constrained by any one clause's\n  // constraint. (Well, by their intersection, but that seems unlikely.)\n  if (Array.isArray(selector.$and)) {\n    for (let i = 0; i < selector.$and.length; ++i) {\n      const subIds = LocalCollection._idsMatchedBySelector(selector.$and[i]);\n\n      if (subIds) {\n        return subIds;\n      }\n    }\n  }\n\n  return null;\n};\n\nLocalCollection._insertInResultsSync = (query, doc) => {\n  const fields = EJSON.clone(doc);\n\n  delete fields._id;\n\n  if (query.ordered) {\n    if (!query.sorter) {\n      query.addedBefore(doc._id, query.projectionFn(fields), null);\n      query.results.push(doc);\n    } else {\n      const i = LocalCollection._insertInSortedList(\n        query.sorter.getComparator({distances: query.distances}),\n        query.results,\n        doc\n      );\n\n      let next = query.results[i + 1];\n      if (next) {\n        next = next._id;\n      } else {\n        next = null;\n      }\n\n      query.addedBefore(doc._id, query.projectionFn(fields), next);\n    }\n\n    query.added(doc._id, query.projectionFn(fields));\n  } else {\n    query.added(doc._id, query.projectionFn(fields));\n    query.results.set(doc._id, doc);\n  }\n};\n\nLocalCollection._insertInResultsAsync = async (query, doc) => {\n  const fields = EJSON.clone(doc);\n\n  delete fields._id;\n\n  if (query.ordered) {\n    if (!query.sorter) {\n      await query.addedBefore(doc._id, query.projectionFn(fields), null);\n      query.results.push(doc);\n    } else {\n      const i = LocalCollection._insertInSortedList(\n        query.sorter.getComparator({distances: query.distances}),\n        query.results,\n        doc\n      );\n\n      let next = query.results[i + 1];\n      if (next) {\n        next = next._id;\n      } else {\n        next = null;\n      }\n\n      await query.addedBefore(doc._id, query.projectionFn(fields), next);\n    }\n\n    await query.added(doc._id, query.projectionFn(fields));\n  } else {\n    await query.added(doc._id, query.projectionFn(fields));\n    query.results.set(doc._id, doc);\n  }\n};\n\nLocalCollection._insertInSortedList = (cmp, array, value) => {\n  if (array.length === 0) {\n    array.push(value);\n    return 0;\n  }\n\n  const i = LocalCollection._binarySearch(cmp, array, value);\n\n  array.splice(i, 0, value);\n\n  return i;\n};\n\nLocalCollection._isModificationMod = mod => {\n  let isModify = false;\n  let isReplace = false;\n\n  Object.keys(mod).forEach(key => {\n    if (key.substr(0, 1) === '$') {\n      isModify = true;\n    } else {\n      isReplace = true;\n    }\n  });\n\n  if (isModify && isReplace) {\n    throw new Error(\n      'Update parameter cannot have both modifier and non-modifier fields.'\n    );\n  }\n\n  return isModify;\n};\n\n// XXX maybe this should be EJSON.isObject, though EJSON doesn't know about\n// RegExp\n// XXX note that _type(undefined) === 3!!!!\nLocalCollection._isPlainObject = x => {\n  return x && LocalCollection._f._type(x) === 3;\n};\n\n// XXX need a strategy for passing the binding of $ into this\n// function, from the compiled selector\n//\n// maybe just {key.up.to.just.before.dollarsign: array_index}\n//\n// XXX atomicity: if one modification fails, do we roll back the whole\n// change?\n//\n// options:\n//   - isInsert is set when _modify is being called to compute the document to\n//     insert as part of an upsert operation. We use this primarily to figure\n//     out when to set the fields in $setOnInsert, if present.\nLocalCollection._modify = (doc, modifier, options = {}) => {\n  if (!LocalCollection._isPlainObject(modifier)) {\n    throw MinimongoError('Modifier must be an object');\n  }\n\n  // Make sure the caller can't mutate our data structures.\n  modifier = EJSON.clone(modifier);\n\n  const isModifier = isOperatorObject(modifier);\n  const newDoc = isModifier ? EJSON.clone(doc) : modifier;\n\n  if (isModifier) {\n    // apply modifiers to the doc.\n    Object.keys(modifier).forEach(operator => {\n      // Treat $setOnInsert as $set if this is an insert.\n      const setOnInsert = options.isInsert && operator === '$setOnInsert';\n      const modFunc = MODIFIERS[setOnInsert ? '$set' : operator];\n      const operand = modifier[operator];\n\n      if (!modFunc) {\n        throw MinimongoError(`Invalid modifier specified ${operator}`);\n      }\n\n      Object.keys(operand).forEach(keypath => {\n        const arg = operand[keypath];\n\n        if (keypath === '') {\n          throw MinimongoError('An empty update path is not valid.');\n        }\n\n        const keyparts = keypath.split('.');\n\n        if (!keyparts.every(Boolean)) {\n          throw MinimongoError(\n            `The update path '${keypath}' contains an empty field name, ` +\n            'which is not allowed.'\n          );\n        }\n\n        const target = findModTarget(newDoc, keyparts, {\n          arrayIndices: options.arrayIndices,\n          forbidArray: operator === '$rename',\n          noCreate: NO_CREATE_MODIFIERS[operator]\n        });\n\n        modFunc(target, keyparts.pop(), arg, keypath, newDoc);\n      });\n    });\n\n    if (doc._id && !EJSON.equals(doc._id, newDoc._id)) {\n      throw MinimongoError(\n        `After applying the update to the document {_id: \"${doc._id}\", ...},` +\n        ' the (immutable) field \\'_id\\' was found to have been altered to ' +\n        `_id: \"${newDoc._id}\"`\n      );\n    }\n  } else {\n    if (doc._id && modifier._id && !EJSON.equals(doc._id, modifier._id)) {\n      throw MinimongoError(\n        `The _id field cannot be changed from {_id: \"${doc._id}\"} to ` +\n        `{_id: \"${modifier._id}\"}`\n      );\n    }\n\n    // replace the whole document\n    assertHasValidFieldNames(modifier);\n  }\n\n  // move new document into place.\n  Object.keys(doc).forEach(key => {\n    // Note: this used to be for (var key in doc) however, this does not\n    // work right in Opera. Deleting from a doc while iterating over it\n    // would sometimes cause opera to skip some keys.\n    if (key !== '_id') {\n      delete doc[key];\n    }\n  });\n\n  Object.keys(newDoc).forEach(key => {\n    doc[key] = newDoc[key];\n  });\n};\n\nLocalCollection._observeFromObserveChanges = (cursor, observeCallbacks) => {\n  const transform = cursor.getTransform() || (doc => doc);\n  let suppressed = !!observeCallbacks._suppress_initial;\n\n  let observeChangesCallbacks;\n  if (LocalCollection._observeCallbacksAreOrdered(observeCallbacks)) {\n    // The \"_no_indices\" option sets all index arguments to -1 and skips the\n    // linear scans required to generate them.  This lets observers that don't\n    // need absolute indices benefit from the other features of this API --\n    // relative order, transforms, and applyChanges -- without the speed hit.\n    const indices = !observeCallbacks._no_indices;\n\n    observeChangesCallbacks = {\n      addedBefore(id, fields, before) {\n        const check = suppressed || !(observeCallbacks.addedAt || observeCallbacks.added)\n        if (check) {\n          return;\n        }\n\n        const doc = transform(Object.assign(fields, {_id: id}));\n\n        if (observeCallbacks.addedAt) {\n          observeCallbacks.addedAt(\n              doc,\n              indices\n                  ? before\n                      ? this.docs.indexOf(before)\n                      : this.docs.size()\n                  : -1,\n              before\n          );\n        } else {\n          observeCallbacks.added(doc);\n        }\n      },\n      changed(id, fields) {\n\n        if (!(observeCallbacks.changedAt || observeCallbacks.changed)) {\n          return;\n        }\n\n        let doc = EJSON.clone(this.docs.get(id));\n        if (!doc) {\n          throw new Error(`Unknown id for changed: ${id}`);\n        }\n\n        const oldDoc = transform(EJSON.clone(doc));\n\n        DiffSequence.applyChanges(doc, fields);\n\n        if (observeCallbacks.changedAt) {\n          observeCallbacks.changedAt(\n              transform(doc),\n              oldDoc,\n              indices ? this.docs.indexOf(id) : -1\n          );\n        } else {\n          observeCallbacks.changed(transform(doc), oldDoc);\n        }\n      },\n      movedBefore(id, before) {\n        if (!observeCallbacks.movedTo) {\n          return;\n        }\n\n        const from = indices ? this.docs.indexOf(id) : -1;\n        let to = indices\n            ? before\n                ? this.docs.indexOf(before)\n                : this.docs.size()\n            : -1;\n\n        // When not moving backwards, adjust for the fact that removing the\n        // document slides everything back one slot.\n        if (to > from) {\n          --to;\n        }\n\n        observeCallbacks.movedTo(\n            transform(EJSON.clone(this.docs.get(id))),\n            from,\n            to,\n            before || null\n        );\n      },\n      removed(id) {\n        if (!(observeCallbacks.removedAt || observeCallbacks.removed)) {\n          return;\n        }\n\n        // technically maybe there should be an EJSON.clone here, but it's about\n        // to be removed from this.docs!\n        const doc = transform(this.docs.get(id));\n\n        if (observeCallbacks.removedAt) {\n          observeCallbacks.removedAt(doc, indices ? this.docs.indexOf(id) : -1);\n        } else {\n          observeCallbacks.removed(doc);\n        }\n      },\n    };\n  } else {\n    observeChangesCallbacks = {\n      added(id, fields) {\n        if (!suppressed && observeCallbacks.added) {\n          observeCallbacks.added(transform(Object.assign(fields, {_id: id})));\n        }\n      },\n      changed(id, fields) {\n        if (observeCallbacks.changed) {\n          const oldDoc = this.docs.get(id);\n          const doc = EJSON.clone(oldDoc);\n\n          DiffSequence.applyChanges(doc, fields);\n\n          observeCallbacks.changed(\n              transform(doc),\n              transform(EJSON.clone(oldDoc))\n          );\n        }\n      },\n      removed(id) {\n        if (observeCallbacks.removed) {\n          observeCallbacks.removed(transform(this.docs.get(id)));\n        }\n      },\n    };\n  }\n\n  const changeObserver = new LocalCollection._CachingChangeObserver({\n    callbacks: observeChangesCallbacks\n  });\n\n  // CachingChangeObserver clones all received input on its callbacks\n  // So we can mark it as safe to reduce the ejson clones.\n  // This is tested by the `mongo-livedata - (extended) scribbling` tests\n  changeObserver.applyChange._fromObserve = true;\n  const handle = cursor.observeChanges(changeObserver.applyChange,\n      { nonMutatingCallbacks: true });\n\n  // If needed, re-enable callbacks as soon as the initial batch is ready.\n  const setSuppressed = (h) => {\n    if (h.isReady) suppressed = false;\n    else h.isReadyPromise?.then(() => (suppressed = false));\n  };\n  // When we call cursor.observeChanges() it can be the on from\n  // the mongo package (instead of the minimongo one) and it doesn't have isReady and isReadyPromise\n  if (Meteor._isPromise(handle)) {\n    handle.then(setSuppressed);\n  } else {\n    setSuppressed(handle);\n  }\n  return handle;\n};\n\nLocalCollection._observeCallbacksAreOrdered = callbacks => {\n  if (callbacks.added && callbacks.addedAt) {\n    throw new Error('Please specify only one of added() and addedAt()');\n  }\n\n  if (callbacks.changed && callbacks.changedAt) {\n    throw new Error('Please specify only one of changed() and changedAt()');\n  }\n\n  if (callbacks.removed && callbacks.removedAt) {\n    throw new Error('Please specify only one of removed() and removedAt()');\n  }\n\n  return !!(\n    callbacks.addedAt ||\n    callbacks.changedAt ||\n    callbacks.movedTo ||\n    callbacks.removedAt\n  );\n};\n\nLocalCollection._observeChangesCallbacksAreOrdered = callbacks => {\n  if (callbacks.added && callbacks.addedBefore) {\n    throw new Error('Please specify only one of added() and addedBefore()');\n  }\n\n  return !!(callbacks.addedBefore || callbacks.movedBefore);\n};\n\nLocalCollection._removeFromResultsSync = (query, doc) => {\n  if (query.ordered) {\n    const i = LocalCollection._findInOrderedResults(query, doc);\n\n    query.removed(doc._id);\n    query.results.splice(i, 1);\n  } else {\n    const id = doc._id;  // in case callback mutates doc\n\n    query.removed(doc._id);\n    query.results.remove(id);\n  }\n};\n\nLocalCollection._removeFromResultsAsync = async (query, doc) => {\n  if (query.ordered) {\n    const i = LocalCollection._findInOrderedResults(query, doc);\n\n    await query.removed(doc._id);\n    query.results.splice(i, 1);\n  } else {\n    const id = doc._id;  // in case callback mutates doc\n\n    await query.removed(doc._id);\n    query.results.remove(id);\n  }\n};\n\n// Is this selector just shorthand for lookup by _id?\nLocalCollection._selectorIsId = selector =>\n  typeof selector === 'number' ||\n  typeof selector === 'string' ||\n  selector instanceof MongoID.ObjectID\n;\n\n// Is the selector just lookup by _id (shorthand or not)?\nLocalCollection._selectorIsIdPerhapsAsObject = selector =>\n  LocalCollection._selectorIsId(selector) ||\n  LocalCollection._selectorIsId(selector && selector._id) &&\n  Object.keys(selector).length === 1\n;\n\nLocalCollection._updateInResultsSync = (query, doc, old_doc) => {\n  if (!EJSON.equals(doc._id, old_doc._id)) {\n    throw new Error('Can\\'t change a doc\\'s _id while updating');\n  }\n\n  const projectionFn = query.projectionFn;\n  const changedFields = DiffSequence.makeChangedFields(\n    projectionFn(doc),\n    projectionFn(old_doc)\n  );\n\n  if (!query.ordered) {\n    if (Object.keys(changedFields).length) {\n      query.changed(doc._id, changedFields);\n      query.results.set(doc._id, doc);\n    }\n\n    return;\n  }\n\n  const old_idx = LocalCollection._findInOrderedResults(query, doc);\n\n  if (Object.keys(changedFields).length) {\n    query.changed(doc._id, changedFields);\n  }\n\n  if (!query.sorter) {\n    return;\n  }\n\n  // just take it out and put it back in again, and see if the index changes\n  query.results.splice(old_idx, 1);\n\n  const new_idx = LocalCollection._insertInSortedList(\n    query.sorter.getComparator({distances: query.distances}),\n    query.results,\n    doc\n  );\n\n  if (old_idx !== new_idx) {\n    let next = query.results[new_idx + 1];\n    if (next) {\n      next = next._id;\n    } else {\n      next = null;\n    }\n\n    query.movedBefore && query.movedBefore(doc._id, next);\n  }\n};\n\nLocalCollection._updateInResultsAsync = async (query, doc, old_doc) => {\n  if (!EJSON.equals(doc._id, old_doc._id)) {\n    throw new Error('Can\\'t change a doc\\'s _id while updating');\n  }\n\n  const projectionFn = query.projectionFn;\n  const changedFields = DiffSequence.makeChangedFields(\n    projectionFn(doc),\n    projectionFn(old_doc)\n  );\n\n  if (!query.ordered) {\n    if (Object.keys(changedFields).length) {\n      await query.changed(doc._id, changedFields);\n      query.results.set(doc._id, doc);\n    }\n\n    return;\n  }\n\n  const old_idx = LocalCollection._findInOrderedResults(query, doc);\n\n  if (Object.keys(changedFields).length) {\n    await query.changed(doc._id, changedFields);\n  }\n\n  if (!query.sorter) {\n    return;\n  }\n\n  // just take it out and put it back in again, and see if the index changes\n  query.results.splice(old_idx, 1);\n\n  const new_idx = LocalCollection._insertInSortedList(\n    query.sorter.getComparator({distances: query.distances}),\n    query.results,\n    doc\n  );\n\n  if (old_idx !== new_idx) {\n    let next = query.results[new_idx + 1];\n    if (next) {\n      next = next._id;\n    } else {\n      next = null;\n    }\n\n    query.movedBefore && await query.movedBefore(doc._id, next);\n  }\n};\n\nconst MODIFIERS = {\n  $currentDate(target, field, arg) {\n    if (typeof arg === 'object' && hasOwn.call(arg, '$type')) {\n      if (arg.$type !== 'date') {\n        throw MinimongoError(\n          'Minimongo does currently only support the date type in ' +\n          '$currentDate modifiers',\n          {field}\n        );\n      }\n    } else if (arg !== true) {\n      throw MinimongoError('Invalid $currentDate modifier', {field});\n    }\n\n    target[field] = new Date();\n  },\n  $inc(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $inc allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $inc modifier to non-number',\n          {field}\n        );\n      }\n\n      target[field] += arg;\n    } else {\n      target[field] = arg;\n    }\n  },\n  $min(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $min allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $min modifier to non-number',\n          {field}\n        );\n      }\n\n      if (target[field] > arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $max(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $max allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $max modifier to non-number',\n          {field}\n        );\n      }\n\n      if (target[field] < arg) {\n        target[field] = arg;\n      }\n    } else {\n      target[field] = arg;\n    }\n  },\n  $mul(target, field, arg) {\n    if (typeof arg !== 'number') {\n      throw MinimongoError('Modifier $mul allowed for numbers only', {field});\n    }\n\n    if (field in target) {\n      if (typeof target[field] !== 'number') {\n        throw MinimongoError(\n          'Cannot apply $mul modifier to non-number',\n          {field}\n        );\n      }\n\n      target[field] *= arg;\n    } else {\n      target[field] = 0;\n    }\n  },\n  $rename(target, field, arg, keypath, doc) {\n    // no idea why mongo has this restriction..\n    if (keypath === arg) {\n      throw MinimongoError('$rename source must differ from target', {field});\n    }\n\n    if (target === null) {\n      throw MinimongoError('$rename source field invalid', {field});\n    }\n\n    if (typeof arg !== 'string') {\n      throw MinimongoError('$rename target must be a string', {field});\n    }\n\n    if (arg.includes('\\0')) {\n      // Null bytes are not allowed in Mongo field names\n      // https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\n      throw MinimongoError(\n        'The \\'to\\' field for $rename cannot contain an embedded null byte',\n        {field}\n      );\n    }\n\n    if (target === undefined) {\n      return;\n    }\n\n    const object = target[field];\n\n    delete target[field];\n\n    const keyparts = arg.split('.');\n    const target2 = findModTarget(doc, keyparts, {forbidArray: true});\n\n    if (target2 === null) {\n      throw MinimongoError('$rename target field invalid', {field});\n    }\n\n    target2[keyparts.pop()] = object;\n  },\n  $set(target, field, arg) {\n    if (target !== Object(target)) { // not an array or an object\n      const error = MinimongoError(\n        'Cannot set property on non-object field',\n        {field}\n      );\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    if (target === null) {\n      const error = MinimongoError('Cannot set property on null', {field});\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    assertHasValidFieldNames(arg);\n\n    target[field] = arg;\n  },\n  $setOnInsert(target, field, arg) {\n    // converted to `$set` in `_modify`\n  },\n  $unset(target, field, arg) {\n    if (target !== undefined) {\n      if (target instanceof Array) {\n        if (field in target) {\n          target[field] = null;\n        }\n      } else {\n        delete target[field];\n      }\n    }\n  },\n  $push(target, field, arg) {\n    if (target[field] === undefined) {\n      target[field] = [];\n    }\n\n    if (!(target[field] instanceof Array)) {\n      throw MinimongoError('Cannot apply $push modifier to non-array', {field});\n    }\n\n    if (!(arg && arg.$each)) {\n      // Simple mode: not $each\n      assertHasValidFieldNames(arg);\n\n      target[field].push(arg);\n\n      return;\n    }\n\n    // Fancy mode: $each (and maybe $slice and $sort and $position)\n    const toPush = arg.$each;\n    if (!(toPush instanceof Array)) {\n      throw MinimongoError('$each must be an array', {field});\n    }\n\n    assertHasValidFieldNames(toPush);\n\n    // Parse $position\n    let position = undefined;\n    if ('$position' in arg) {\n      if (typeof arg.$position !== 'number') {\n        throw MinimongoError('$position must be a numeric value', {field});\n      }\n\n      // XXX should check to make sure integer\n      if (arg.$position < 0) {\n        throw MinimongoError(\n          '$position in $push must be zero or positive',\n          {field}\n        );\n      }\n\n      position = arg.$position;\n    }\n\n    // Parse $slice.\n    let slice = undefined;\n    if ('$slice' in arg) {\n      if (typeof arg.$slice !== 'number') {\n        throw MinimongoError('$slice must be a numeric value', {field});\n      }\n\n      // XXX should check to make sure integer\n      slice = arg.$slice;\n    }\n\n    // Parse $sort.\n    let sortFunction = undefined;\n    if (arg.$sort) {\n      if (slice === undefined) {\n        throw MinimongoError('$sort requires $slice to be present', {field});\n      }\n\n      // XXX this allows us to use a $sort whose value is an array, but that's\n      // actually an extension of the Node driver, so it won't work\n      // server-side. Could be confusing!\n      // XXX is it correct that we don't do geo-stuff here?\n      sortFunction = new Minimongo.Sorter(arg.$sort).getComparator();\n\n      toPush.forEach(element => {\n        if (LocalCollection._f._type(element) !== 3) {\n          throw MinimongoError(\n            '$push like modifiers using $sort require all elements to be ' +\n            'objects',\n            {field}\n          );\n        }\n      });\n    }\n\n    // Actually push.\n    if (position === undefined) {\n      toPush.forEach(element => {\n        target[field].push(element);\n      });\n    } else {\n      const spliceArguments = [position, 0];\n\n      toPush.forEach(element => {\n        spliceArguments.push(element);\n      });\n\n      target[field].splice(...spliceArguments);\n    }\n\n    // Actually sort.\n    if (sortFunction) {\n      target[field].sort(sortFunction);\n    }\n\n    // Actually slice.\n    if (slice !== undefined) {\n      if (slice === 0) {\n        target[field] = []; // differs from Array.slice!\n      } else if (slice < 0) {\n        target[field] = target[field].slice(slice);\n      } else {\n        target[field] = target[field].slice(0, slice);\n      }\n    }\n  },\n  $pushAll(target, field, arg) {\n    if (!(typeof arg === 'object' && arg instanceof Array)) {\n      throw MinimongoError('Modifier $pushAll/pullAll allowed for arrays only');\n    }\n\n    assertHasValidFieldNames(arg);\n\n    const toPush = target[field];\n\n    if (toPush === undefined) {\n      target[field] = arg;\n    } else if (!(toPush instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $pushAll modifier to non-array',\n        {field}\n      );\n    } else {\n      toPush.push(...arg);\n    }\n  },\n  $addToSet(target, field, arg) {\n    let isEach = false;\n\n    if (typeof arg === 'object') {\n      // check if first key is '$each'\n      const keys = Object.keys(arg);\n      if (keys[0] === '$each') {\n        isEach = true;\n      }\n    }\n\n    const values = isEach ? arg.$each : [arg];\n\n    assertHasValidFieldNames(values);\n\n    const toAdd = target[field];\n    if (toAdd === undefined) {\n      target[field] = values;\n    } else if (!(toAdd instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $addToSet modifier to non-array',\n        {field}\n      );\n    } else {\n      values.forEach(value => {\n        if (toAdd.some(element => LocalCollection._f._equal(value, element))) {\n          return;\n        }\n\n        toAdd.push(value);\n      });\n    }\n  },\n  $pop(target, field, arg) {\n    if (target === undefined) {\n      return;\n    }\n\n    const toPop = target[field];\n\n    if (toPop === undefined) {\n      return;\n    }\n\n    if (!(toPop instanceof Array)) {\n      throw MinimongoError('Cannot apply $pop modifier to non-array', {field});\n    }\n\n    if (typeof arg === 'number' && arg < 0) {\n      toPop.splice(0, 1);\n    } else {\n      toPop.pop();\n    }\n  },\n  $pull(target, field, arg) {\n    if (target === undefined) {\n      return;\n    }\n\n    const toPull = target[field];\n    if (toPull === undefined) {\n      return;\n    }\n\n    if (!(toPull instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $pull/pullAll modifier to non-array',\n        {field}\n      );\n    }\n\n    let out;\n    if (arg != null && typeof arg === 'object' && !(arg instanceof Array)) {\n      // XXX would be much nicer to compile this once, rather than\n      // for each document we modify.. but usually we're not\n      // modifying that many documents, so we'll let it slide for\n      // now\n\n      // XXX Minimongo.Matcher isn't up for the job, because we need\n      // to permit stuff like {$pull: {a: {$gt: 4}}}.. something\n      // like {$gt: 4} is not normally a complete selector.\n      // same issue as $elemMatch possibly?\n      const matcher = new Minimongo.Matcher(arg);\n\n      out = toPull.filter(element => !matcher.documentMatches(element).result);\n    } else {\n      out = toPull.filter(element => !LocalCollection._f._equal(element, arg));\n    }\n\n    target[field] = out;\n  },\n  $pullAll(target, field, arg) {\n    if (!(typeof arg === 'object' && arg instanceof Array)) {\n      throw MinimongoError(\n        'Modifier $pushAll/pullAll allowed for arrays only',\n        {field}\n      );\n    }\n\n    if (target === undefined) {\n      return;\n    }\n\n    const toPull = target[field];\n\n    if (toPull === undefined) {\n      return;\n    }\n\n    if (!(toPull instanceof Array)) {\n      throw MinimongoError(\n        'Cannot apply $pull/pullAll modifier to non-array',\n        {field}\n      );\n    }\n\n    target[field] = toPull.filter(object =>\n      !arg.some(element => LocalCollection._f._equal(object, element))\n    );\n  },\n  $bit(target, field, arg) {\n    // XXX mongo only supports $bit on integers, and we only support\n    // native javascript numbers (doubles) so far, so we can't support $bit\n    throw MinimongoError('$bit is not supported', {field});\n  },\n  $v() {\n    // As discussed in https://github.com/meteor/meteor/issues/9623,\n    // the `$v` operator is not needed by Meteor, but problems can occur if\n    // it's not at least callable (as of Mongo >= 3.6). It's defined here as\n    // a no-op to work around these problems.\n  }\n};\n\nconst NO_CREATE_MODIFIERS = {\n  $pop: true,\n  $pull: true,\n  $pullAll: true,\n  $rename: true,\n  $unset: true\n};\n\n// Make sure field names do not contain Mongo restricted\n// characters ('.', '$', '\\0').\n// https://docs.mongodb.com/manual/reference/limits/#Restrictions-on-Field-Names\nconst invalidCharMsg = {\n  $: 'start with \\'$\\'',\n  '.': 'contain \\'.\\'',\n  '\\0': 'contain null bytes'\n};\n\n// checks if all field names in an object are valid\nfunction assertHasValidFieldNames(doc) {\n  if (doc && typeof doc === 'object') {\n    JSON.stringify(doc, (key, value) => {\n      assertIsValidFieldName(key);\n      return value;\n    });\n  }\n}\n\nfunction assertIsValidFieldName(key) {\n  let match;\n  if (typeof key === 'string' && (match = key.match(/^\\$|\\.|\\0/))) {\n    throw MinimongoError(`Key ${key} must not ${invalidCharMsg[match[0]]}`);\n  }\n}\n\n// for a.b.c.2.d.e, keyparts should be ['a', 'b', 'c', '2', 'd', 'e'],\n// and then you would operate on the 'e' property of the returned\n// object.\n//\n// if options.noCreate is falsey, creates intermediate levels of\n// structure as necessary, like mkdir -p (and raises an exception if\n// that would mean giving a non-numeric property to an array.) if\n// options.noCreate is true, return undefined instead.\n//\n// may modify the last element of keyparts to signal to the caller that it needs\n// to use a different value to index into the returned object (for example,\n// ['a', '01'] -> ['a', 1]).\n//\n// if forbidArray is true, return null if the keypath goes through an array.\n//\n// if options.arrayIndices is set, use its first element for the (first) '$' in\n// the path.\nfunction findModTarget(doc, keyparts, options = {}) {\n  let usedArrayIndex = false;\n\n  for (let i = 0; i < keyparts.length; i++) {\n    const last = i === keyparts.length - 1;\n    let keypart = keyparts[i];\n\n    if (!isIndexable(doc)) {\n      if (options.noCreate) {\n        return undefined;\n      }\n\n      const error = MinimongoError(\n        `cannot use the part '${keypart}' to traverse ${doc}`\n      );\n      error.setPropertyError = true;\n      throw error;\n    }\n\n    if (doc instanceof Array) {\n      if (options.forbidArray) {\n        return null;\n      }\n\n      if (keypart === '$') {\n        if (usedArrayIndex) {\n          throw MinimongoError('Too many positional (i.e. \\'$\\') elements');\n        }\n\n        if (!options.arrayIndices || !options.arrayIndices.length) {\n          throw MinimongoError(\n            'The positional operator did not find the match needed from the ' +\n            'query'\n          );\n        }\n\n        keypart = options.arrayIndices[0];\n        usedArrayIndex = true;\n      } else if (isNumericKey(keypart)) {\n        keypart = parseInt(keypart);\n      } else {\n        if (options.noCreate) {\n          return undefined;\n        }\n\n        throw MinimongoError(\n          `can't append to array using string field name [${keypart}]`\n        );\n      }\n\n      if (last) {\n        keyparts[i] = keypart; // handle 'a.01'\n      }\n\n      if (options.noCreate && keypart >= doc.length) {\n        return undefined;\n      }\n\n      while (doc.length < keypart) {\n        doc.push(null);\n      }\n\n      if (!last) {\n        if (doc.length === keypart) {\n          doc.push({});\n        } else if (typeof doc[keypart] !== 'object') {\n          throw MinimongoError(\n            `can't modify field '${keyparts[i + 1]}' of list value ` +\n            JSON.stringify(doc[keypart])\n          );\n        }\n      }\n    } else {\n      assertIsValidFieldName(keypart);\n\n      if (!(keypart in doc)) {\n        if (options.noCreate) {\n          return undefined;\n        }\n\n        if (!last) {\n          doc[keypart] = {};\n        }\n      }\n    }\n\n    if (last) {\n      return doc;\n    }\n\n    doc = doc[keypart];\n  }\n\n  // notreached\n}\n"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"1e1b84d33426e91b8d42091f0d0793a93412b562"}
