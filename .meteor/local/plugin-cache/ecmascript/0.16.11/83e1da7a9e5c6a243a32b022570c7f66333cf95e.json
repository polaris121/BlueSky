{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\snntv\\OneDrive\\Documents\\AI Agent\\projects\\Meteor\\BlueSky\\packages\\ddp-client\\common\\connection_stream_handlers.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.linux.x86_64"},"sourceFileName":"packages/ddp-client/common/connection_stream_handlers.js","filename":"C:\\Users\\snntv\\OneDrive\\Documents\\AI Agent\\projects\\Meteor\\BlueSky\\packages\\ddp-client\\common\\connection_stream_handlers.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"production","cwd":"C:\\Users\\snntv\\OneDrive\\Documents\\AI Agent\\projects\\Meteor\\BlueSky","root":"C:\\Users\\snntv\\OneDrive\\Documents\\AI Agent\\projects\\Meteor\\BlueSky","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"C:\\Users\\snntv\\OneDrive\\Documents\\AI Agent\\projects\\Meteor\\BlueSky\\packages\\ddp-client\\common\\connection_stream_handlers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/ddp-client/common/connection_stream_handlers.js"}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      ConnectionStreamHandlers: () => ConnectionStreamHandlers\n    });\n    let DDPCommon;\n    module.link(\"meteor/ddp-common\", {\n      DDPCommon(v) {\n        DDPCommon = v;\n      }\n    }, 0);\n    let Meteor;\n    module.link(\"meteor/meteor\", {\n      Meteor(v) {\n        Meteor = v;\n      }\n    }, 1);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class ConnectionStreamHandlers {\n      constructor(connection) {\n        this._connection = connection;\n      }\n\n      /**\n       * Handles incoming raw messages from the DDP stream\n       * @param {String} raw_msg The raw message received from the stream\n       */\n      async onMessage(raw_msg) {\n        let msg;\n        try {\n          msg = DDPCommon.parseDDP(raw_msg);\n        } catch (e) {\n          Meteor._debug('Exception while parsing DDP', e);\n          return;\n        }\n\n        // Any message counts as receiving a pong, as it demonstrates that\n        // the server is still alive.\n        if (this._connection._heartbeat) {\n          this._connection._heartbeat.messageReceived();\n        }\n        if (msg === null || !msg.msg) {\n          if (!msg || !msg.testMessageOnConnect) {\n            if (Object.keys(msg).length === 1 && msg.server_id) return;\n            Meteor._debug('discarding invalid livedata message', msg);\n          }\n          return;\n        }\n\n        // Important: This was missing from previous version\n        // We need to set the current version before routing the message\n        if (msg.msg === 'connected') {\n          this._connection._version = this._connection._versionSuggestion;\n        }\n        await this._routeMessage(msg);\n      }\n\n      /**\n       * Routes messages to their appropriate handlers based on message type\n       * @private\n       * @param {Object} msg The parsed DDP message\n       */\n      async _routeMessage(msg) {\n        switch (msg.msg) {\n          case 'connected':\n            await this._connection._livedata_connected(msg);\n            this._connection.options.onConnected();\n            break;\n          case 'failed':\n            await this._handleFailedMessage(msg);\n            break;\n          case 'ping':\n            if (this._connection.options.respondToPings) {\n              this._connection._send({\n                msg: 'pong',\n                id: msg.id\n              });\n            }\n            break;\n          case 'pong':\n            // noop, as we assume everything's a pong\n            break;\n          case 'added':\n          case 'changed':\n          case 'removed':\n          case 'ready':\n          case 'updated':\n            await this._connection._livedata_data(msg);\n            break;\n          case 'nosub':\n            await this._connection._livedata_nosub(msg);\n            break;\n          case 'result':\n            await this._connection._livedata_result(msg);\n            break;\n          case 'error':\n            this._connection._livedata_error(msg);\n            break;\n          default:\n            Meteor._debug('discarding unknown livedata message type', msg);\n        }\n      }\n\n      /**\n       * Handles failed connection messages\n       * @private\n       * @param {Object} msg The failed message object\n       */\n      _handleFailedMessage(msg) {\n        if (this._connection._supportedDDPVersions.indexOf(msg.version) >= 0) {\n          this._connection._versionSuggestion = msg.version;\n          this._connection._stream.reconnect({\n            _force: true\n          });\n        } else {\n          const description = 'DDP version negotiation failed; server requested version ' + msg.version;\n          this._connection._stream.disconnect({\n            _permanent: true,\n            _error: description\n          });\n          this._connection.options.onDDPVersionNegotiationFailure(description);\n        }\n      }\n\n      /**\n       * Handles connection reset events\n       */\n      onReset() {\n        // Reset is called even on the first connection, so this is\n        // the only place we send this message.\n        const msg = this._buildConnectMessage();\n        this._connection._send(msg);\n\n        // Mark non-retry calls as failed and handle outstanding methods\n        this._handleOutstandingMethodsOnReset();\n\n        // Now, to minimize setup latency, go ahead and blast out all of\n        // our pending methods ands subscriptions before we've even taken\n        // the necessary RTT to know if we successfully reconnected.\n        this._connection._callOnReconnectAndSendAppropriateOutstandingMethods();\n        this._resendSubscriptions();\n      }\n\n      /**\n       * Builds the initial connect message\n       * @private\n       * @returns {Object} The connect message object\n       */\n      _buildConnectMessage() {\n        const msg = {\n          msg: 'connect'\n        };\n        if (this._connection._lastSessionId) {\n          msg.session = this._connection._lastSessionId;\n        }\n        msg.version = this._connection._versionSuggestion || this._connection._supportedDDPVersions[0];\n        this._connection._versionSuggestion = msg.version;\n        msg.support = this._connection._supportedDDPVersions;\n        return msg;\n      }\n\n      /**\n       * Handles outstanding methods during a reset\n       * @private\n       */\n      _handleOutstandingMethodsOnReset() {\n        const blocks = this._connection._outstandingMethodBlocks;\n        if (blocks.length === 0) return;\n        const currentMethodBlock = blocks[0].methods;\n        blocks[0].methods = currentMethodBlock.filter(methodInvoker => {\n          // Methods with 'noRetry' option set are not allowed to re-send after\n          // recovering dropped connection.\n          if (methodInvoker.sentMessage && methodInvoker.noRetry) {\n            methodInvoker.receiveResult(new Meteor.Error('invocation-failed', 'Method invocation might have failed due to dropped connection. ' + 'Failing because `noRetry` option was passed to Meteor.apply.'));\n          }\n\n          // Only keep a method if it wasn't sent or it's allowed to retry.\n          return !(methodInvoker.sentMessage && methodInvoker.noRetry);\n        });\n\n        // Clear empty blocks\n        if (blocks.length > 0 && blocks[0].methods.length === 0) {\n          blocks.shift();\n        }\n\n        // Reset all method invokers as unsent\n        Object.values(this._connection._methodInvokers).forEach(invoker => {\n          invoker.sentMessage = false;\n        });\n      }\n\n      /**\n       * Resends all active subscriptions\n       * @private\n       */\n      _resendSubscriptions() {\n        Object.entries(this._connection._subscriptions).forEach(_ref => {\n          let [id, sub] = _ref;\n          this._connection._sendQueued({\n            msg: 'sub',\n            id: id,\n            name: sub.name,\n            params: sub.params\n          });\n        });\n      }\n    }\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","ConnectionStreamHandlers","DDPCommon","link","v","Meteor","__reifyWaitForDeps__","constructor","connection","_connection","onMessage","raw_msg","msg","parseDDP","e","_debug","_heartbeat","messageReceived","testMessageOnConnect","Object","keys","length","server_id","_version","_versionSuggestion","_routeMessage","_livedata_connected","options","onConnected","_handleFailedMessage","respondToPings","_send","id","_livedata_data","_livedata_nosub","_livedata_result","_livedata_error","_supportedDDPVersions","indexOf","version","_stream","reconnect","_force","description","disconnect","_permanent","_error","onDDPVersionNegotiationFailure","onReset","_buildConnectMessage","_handleOutstandingMethodsOnReset","_callOnReconnectAndSendAppropriateOutstandingMethods","_resendSubscriptions","_lastSessionId","session","support","blocks","_outstandingMethodBlocks","currentMethodBlock","methods","filter","methodInvoker","sentMessage","noRetry","receiveResult","Error","shift","values","_methodInvokers","forEach","invoker","entries","_subscriptions","_ref","sub","_sendQueued","name","params","__reify_async_result__","_reifyError","self","async"],"sources":["packages/ddp-client/common/connection_stream_handlers.js"],"sourcesContent":["import { DDPCommon } from 'meteor/ddp-common';\nimport { Meteor } from 'meteor/meteor';\n\nexport class ConnectionStreamHandlers {\n  constructor(connection) {\n    this._connection = connection;\n  }\n\n  /**\n   * Handles incoming raw messages from the DDP stream\n   * @param {String} raw_msg The raw message received from the stream\n   */\n  async onMessage(raw_msg) {\n    let msg;\n    try {\n      msg = DDPCommon.parseDDP(raw_msg);\n    } catch (e) {\n      Meteor._debug('Exception while parsing DDP', e);\n      return;\n    }\n\n    // Any message counts as receiving a pong, as it demonstrates that\n    // the server is still alive.\n    if (this._connection._heartbeat) {\n      this._connection._heartbeat.messageReceived();\n    }\n\n    if (msg === null || !msg.msg) {\n      if(!msg || !msg.testMessageOnConnect) {\n        if (Object.keys(msg).length === 1 && msg.server_id) return;\n        Meteor._debug('discarding invalid livedata message', msg);\n      }\n      return;\n    }\n\n    // Important: This was missing from previous version\n    // We need to set the current version before routing the message\n    if (msg.msg === 'connected') {\n      this._connection._version = this._connection._versionSuggestion;\n    }\n\n    await this._routeMessage(msg);\n  }\n\n  /**\n   * Routes messages to their appropriate handlers based on message type\n   * @private\n   * @param {Object} msg The parsed DDP message\n   */\n  async _routeMessage(msg) {\n    switch (msg.msg) {\n      case 'connected':\n        await this._connection._livedata_connected(msg);\n        this._connection.options.onConnected();\n        break;\n\n      case 'failed':\n        await this._handleFailedMessage(msg);\n        break;\n\n      case 'ping':\n        if (this._connection.options.respondToPings) {\n          this._connection._send({ msg: 'pong', id: msg.id });\n        }\n        break;\n\n      case 'pong':\n        // noop, as we assume everything's a pong\n        break;\n\n      case 'added':\n      case 'changed':\n      case 'removed':\n      case 'ready':\n      case 'updated':\n        await this._connection._livedata_data(msg);\n        break;\n\n      case 'nosub':\n        await this._connection._livedata_nosub(msg);\n        break;\n\n      case 'result':\n        await this._connection._livedata_result(msg);\n        break;\n\n      case 'error':\n        this._connection._livedata_error(msg);\n        break;\n\n      default:\n        Meteor._debug('discarding unknown livedata message type', msg);\n    }\n  }\n\n  /**\n   * Handles failed connection messages\n   * @private\n   * @param {Object} msg The failed message object\n   */\n  _handleFailedMessage(msg) {\n    if (this._connection._supportedDDPVersions.indexOf(msg.version) >= 0) {\n      this._connection._versionSuggestion = msg.version;\n      this._connection._stream.reconnect({ _force: true });\n    } else {\n      const description =\n        'DDP version negotiation failed; server requested version ' +\n        msg.version;\n      this._connection._stream.disconnect({ _permanent: true, _error: description });\n      this._connection.options.onDDPVersionNegotiationFailure(description);\n    }\n  }\n\n  /**\n   * Handles connection reset events\n   */\n  onReset() {\n    // Reset is called even on the first connection, so this is\n    // the only place we send this message.\n    const msg = this._buildConnectMessage();\n    this._connection._send(msg);\n\n    // Mark non-retry calls as failed and handle outstanding methods\n    this._handleOutstandingMethodsOnReset();\n\n    // Now, to minimize setup latency, go ahead and blast out all of\n    // our pending methods ands subscriptions before we've even taken\n    // the necessary RTT to know if we successfully reconnected.\n    this._connection._callOnReconnectAndSendAppropriateOutstandingMethods();\n    this._resendSubscriptions();\n  }\n\n  /**\n   * Builds the initial connect message\n   * @private\n   * @returns {Object} The connect message object\n   */\n  _buildConnectMessage() {\n    const msg = { msg: 'connect' };\n    if (this._connection._lastSessionId) {\n      msg.session = this._connection._lastSessionId;\n    }\n    msg.version = this._connection._versionSuggestion || this._connection._supportedDDPVersions[0];\n    this._connection._versionSuggestion = msg.version;\n    msg.support = this._connection._supportedDDPVersions;\n    return msg;\n  }\n\n  /**\n   * Handles outstanding methods during a reset\n   * @private\n   */\n  _handleOutstandingMethodsOnReset() {\n    const blocks = this._connection._outstandingMethodBlocks;\n    if (blocks.length === 0) return;\n\n    const currentMethodBlock = blocks[0].methods;\n    blocks[0].methods = currentMethodBlock.filter(\n      methodInvoker => {\n        // Methods with 'noRetry' option set are not allowed to re-send after\n        // recovering dropped connection.\n        if (methodInvoker.sentMessage && methodInvoker.noRetry) {\n          methodInvoker.receiveResult(\n            new Meteor.Error(\n              'invocation-failed',\n              'Method invocation might have failed due to dropped connection. ' +\n              'Failing because `noRetry` option was passed to Meteor.apply.'\n            )\n          );\n        }\n\n        // Only keep a method if it wasn't sent or it's allowed to retry.\n        return !(methodInvoker.sentMessage && methodInvoker.noRetry);\n      }\n    );\n\n    // Clear empty blocks\n    if (blocks.length > 0 && blocks[0].methods.length === 0) {\n      blocks.shift();\n    }\n\n    // Reset all method invokers as unsent\n    Object.values(this._connection._methodInvokers).forEach(invoker => {\n      invoker.sentMessage = false;\n    });\n  }\n\n  /**\n   * Resends all active subscriptions\n   * @private\n   */\n  _resendSubscriptions() {\n    Object.entries(this._connection._subscriptions).forEach(([id, sub]) => {\n      this._connection._sendQueued({\n        msg: 'sub',\n        id: id,\n        name: sub.name,\n        params: sub.params\n      });\n    });\n  }\n}"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"83e1da7a9e5c6a243a32b022570c7f66333cf95e"}
