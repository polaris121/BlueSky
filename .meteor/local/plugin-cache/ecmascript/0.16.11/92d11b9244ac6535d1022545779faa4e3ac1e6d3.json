{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\snntv\\OneDrive\\Documents\\AI Agent\\projects\\Meteor\\BlueSky\\packages\\ddp-client\\common\\connection_stream_handlers.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser.legacy"},"sourceFileName":"packages/ddp-client/common/connection_stream_handlers.js","filename":"C:\\Users\\snntv\\OneDrive\\Documents\\AI Agent\\projects\\Meteor\\BlueSky\\packages\\ddp-client\\common\\connection_stream_handlers.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"C:\\Users\\snntv\\OneDrive\\Documents\\AI Agent\\projects\\Meteor\\BlueSky","root":"C:\\Users\\snntv\\OneDrive\\Documents\\AI Agent\\projects\\Meteor\\BlueSky","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"base$0$3","visitor":{"FunctionExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$4","visitor":{"ForInStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null,null]},"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true,"DoWhileStatement":{"exit":[null]},"ForInStatement":{"exit":[null]},"ForStatement":{"exit":[null]},"WhileStatement":{"exit":[null]},"ForOfStatement":{"exit":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"StaticBlock":{"enter":[null]},"TSModuleBlock":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectPattern":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-regenerator","visitor":{"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"C:\\Users\\snntv\\OneDrive\\Documents\\AI Agent\\projects\\Meteor\\BlueSky\\packages\\ddp-client\\common\\connection_stream_handlers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/ddp-client/common/connection_stream_handlers.js"}},"code":"var _slicedToArray;\nmodule.link(\"@babel/runtime/helpers/slicedToArray\", {\n  default: function (v) {\n    _slicedToArray = v;\n  }\n}, 0);\nvar _regeneratorRuntime;\nmodule.link(\"@babel/runtime/regenerator\", {\n  default: function (v) {\n    _regeneratorRuntime = v;\n  }\n}, 1);\nmodule.export({\n  ConnectionStreamHandlers: function () {\n    return ConnectionStreamHandlers;\n  }\n});\nvar DDPCommon;\nmodule.link(\"meteor/ddp-common\", {\n  DDPCommon: function (v) {\n    DDPCommon = v;\n  }\n}, 0);\nvar Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor: function (v) {\n    Meteor = v;\n  }\n}, 1);\nvar ConnectionStreamHandlers = /*#__PURE__*/function () {\n  function ConnectionStreamHandlers(connection) {\n    this._connection = connection;\n  }\n\n  /**\n   * Handles incoming raw messages from the DDP stream\n   * @param {String} raw_msg The raw message received from the stream\n   */\n  var _proto = ConnectionStreamHandlers.prototype;\n  _proto.onMessage = function () {\n    function onMessage(raw_msg) {\n      var msg, _t;\n      return _regeneratorRuntime.async(function (_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            msg = DDPCommon.parseDDP(raw_msg);\n            _context.next = 2;\n            break;\n          case 1:\n            _context.prev = 1;\n            _t = _context[\"catch\"](0);\n            Meteor._debug('Exception while parsing DDP', _t);\n            return _context.abrupt(\"return\");\n          case 2:\n            // Any message counts as receiving a pong, as it demonstrates that\n            // the server is still alive.\n            if (this._connection._heartbeat) {\n              this._connection._heartbeat.messageReceived();\n            }\n            if (!(msg === null || !msg.msg)) {\n              _context.next = 5;\n              break;\n            }\n            if (!(!msg || !msg.testMessageOnConnect)) {\n              _context.next = 4;\n              break;\n            }\n            if (!(Object.keys(msg).length === 1 && msg.server_id)) {\n              _context.next = 3;\n              break;\n            }\n            return _context.abrupt(\"return\");\n          case 3:\n            Meteor._debug('discarding invalid livedata message', msg);\n          case 4:\n            return _context.abrupt(\"return\");\n          case 5:\n            // Important: This was missing from previous version\n            // We need to set the current version before routing the message\n            if (msg.msg === 'connected') {\n              this._connection._version = this._connection._versionSuggestion;\n            }\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(this._routeMessage(msg));\n          case 6:\n          case \"end\":\n            return _context.stop();\n        }\n      }, null, this, [[0, 1]], Promise);\n    }\n    return onMessage;\n  }()\n  /**\n   * Routes messages to their appropriate handlers based on message type\n   * @private\n   * @param {Object} msg The parsed DDP message\n   */\n  ;\n  _proto._routeMessage = function () {\n    function _routeMessage(msg) {\n      var _t2;\n      return _regeneratorRuntime.async(function (_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            _t2 = msg.msg;\n            _context2.next = _t2 === 'connected' ? 1 : _t2 === 'failed' ? 3 : _t2 === 'ping' ? 5 : _t2 === 'pong' ? 6 : _t2 === 'added' ? 7 : _t2 === 'changed' ? 7 : _t2 === 'removed' ? 7 : _t2 === 'ready' ? 7 : _t2 === 'updated' ? 7 : _t2 === 'nosub' ? 9 : _t2 === 'result' ? 11 : _t2 === 'error' ? 13 : 14;\n            break;\n          case 1:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(this._connection._livedata_connected(msg));\n          case 2:\n            this._connection.options.onConnected();\n            return _context2.abrupt(\"continue\", 15);\n          case 3:\n            _context2.next = 4;\n            return _regeneratorRuntime.awrap(this._handleFailedMessage(msg));\n          case 4:\n            return _context2.abrupt(\"continue\", 15);\n          case 5:\n            if (this._connection.options.respondToPings) {\n              this._connection._send({\n                msg: 'pong',\n                id: msg.id\n              });\n            }\n            return _context2.abrupt(\"continue\", 15);\n          case 6:\n            return _context2.abrupt(\"continue\", 15);\n          case 7:\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(this._connection._livedata_data(msg));\n          case 8:\n            return _context2.abrupt(\"continue\", 15);\n          case 9:\n            _context2.next = 10;\n            return _regeneratorRuntime.awrap(this._connection._livedata_nosub(msg));\n          case 10:\n            return _context2.abrupt(\"continue\", 15);\n          case 11:\n            _context2.next = 12;\n            return _regeneratorRuntime.awrap(this._connection._livedata_result(msg));\n          case 12:\n            return _context2.abrupt(\"continue\", 15);\n          case 13:\n            this._connection._livedata_error(msg);\n            return _context2.abrupt(\"continue\", 15);\n          case 14:\n            Meteor._debug('discarding unknown livedata message type', msg);\n          case 15:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, null, this, null, Promise);\n    }\n    return _routeMessage;\n  }()\n  /**\n   * Handles failed connection messages\n   * @private\n   * @param {Object} msg The failed message object\n   */\n  ;\n  _proto._handleFailedMessage = function () {\n    function _handleFailedMessage(msg) {\n      if (this._connection._supportedDDPVersions.indexOf(msg.version) >= 0) {\n        this._connection._versionSuggestion = msg.version;\n        this._connection._stream.reconnect({\n          _force: true\n        });\n      } else {\n        var description = 'DDP version negotiation failed; server requested version ' + msg.version;\n        this._connection._stream.disconnect({\n          _permanent: true,\n          _error: description\n        });\n        this._connection.options.onDDPVersionNegotiationFailure(description);\n      }\n    }\n    return _handleFailedMessage;\n  }()\n  /**\n   * Handles connection reset events\n   */\n  ;\n  _proto.onReset = function () {\n    function onReset() {\n      // Reset is called even on the first connection, so this is\n      // the only place we send this message.\n      var msg = this._buildConnectMessage();\n      this._connection._send(msg);\n\n      // Mark non-retry calls as failed and handle outstanding methods\n      this._handleOutstandingMethodsOnReset();\n\n      // Now, to minimize setup latency, go ahead and blast out all of\n      // our pending methods ands subscriptions before we've even taken\n      // the necessary RTT to know if we successfully reconnected.\n      this._connection._callOnReconnectAndSendAppropriateOutstandingMethods();\n      this._resendSubscriptions();\n    }\n    return onReset;\n  }()\n  /**\n   * Builds the initial connect message\n   * @private\n   * @returns {Object} The connect message object\n   */\n  ;\n  _proto._buildConnectMessage = function () {\n    function _buildConnectMessage() {\n      var msg = {\n        msg: 'connect'\n      };\n      if (this._connection._lastSessionId) {\n        msg.session = this._connection._lastSessionId;\n      }\n      msg.version = this._connection._versionSuggestion || this._connection._supportedDDPVersions[0];\n      this._connection._versionSuggestion = msg.version;\n      msg.support = this._connection._supportedDDPVersions;\n      return msg;\n    }\n    return _buildConnectMessage;\n  }()\n  /**\n   * Handles outstanding methods during a reset\n   * @private\n   */\n  ;\n  _proto._handleOutstandingMethodsOnReset = function () {\n    function _handleOutstandingMethodsOnReset() {\n      var blocks = this._connection._outstandingMethodBlocks;\n      if (blocks.length === 0) return;\n      var currentMethodBlock = blocks[0].methods;\n      blocks[0].methods = currentMethodBlock.filter(function (methodInvoker) {\n        // Methods with 'noRetry' option set are not allowed to re-send after\n        // recovering dropped connection.\n        if (methodInvoker.sentMessage && methodInvoker.noRetry) {\n          methodInvoker.receiveResult(new Meteor.Error('invocation-failed', 'Method invocation might have failed due to dropped connection. ' + 'Failing because `noRetry` option was passed to Meteor.apply.'));\n        }\n\n        // Only keep a method if it wasn't sent or it's allowed to retry.\n        return !(methodInvoker.sentMessage && methodInvoker.noRetry);\n      });\n\n      // Clear empty blocks\n      if (blocks.length > 0 && blocks[0].methods.length === 0) {\n        blocks.shift();\n      }\n\n      // Reset all method invokers as unsent\n      Object.values(this._connection._methodInvokers).forEach(function (invoker) {\n        invoker.sentMessage = false;\n      });\n    }\n    return _handleOutstandingMethodsOnReset;\n  }()\n  /**\n   * Resends all active subscriptions\n   * @private\n   */\n  ;\n  _proto._resendSubscriptions = function () {\n    function _resendSubscriptions() {\n      var _this = this;\n      Object.entries(this._connection._subscriptions).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          id = _ref2[0],\n          sub = _ref2[1];\n        _this._connection._sendQueued({\n          msg: 'sub',\n          id: id,\n          name: sub.name,\n          params: sub.params\n        });\n      });\n    }\n    return _resendSubscriptions;\n  }();\n  return ConnectionStreamHandlers;\n}();","map":{"version":3,"names":["_slicedToArray","module","link","default","v","_regeneratorRuntime","export","ConnectionStreamHandlers","DDPCommon","Meteor","connection","_connection","_proto","prototype","onMessage","raw_msg","msg","_t","async","_context","prev","next","parseDDP","_debug","abrupt","_heartbeat","messageReceived","testMessageOnConnect","Object","keys","length","server_id","_version","_versionSuggestion","awrap","_routeMessage","stop","Promise","_t2","_context2","_livedata_connected","options","onConnected","_handleFailedMessage","respondToPings","_send","id","_livedata_data","_livedata_nosub","_livedata_result","_livedata_error","_supportedDDPVersions","indexOf","version","_stream","reconnect","_force","description","disconnect","_permanent","_error","onDDPVersionNegotiationFailure","onReset","_buildConnectMessage","_handleOutstandingMethodsOnReset","_callOnReconnectAndSendAppropriateOutstandingMethods","_resendSubscriptions","_lastSessionId","session","support","blocks","_outstandingMethodBlocks","currentMethodBlock","methods","filter","methodInvoker","sentMessage","noRetry","receiveResult","Error","shift","values","_methodInvokers","forEach","invoker","_this","entries","_subscriptions","_ref","_ref2","sub","_sendQueued","name","params"],"sources":["packages/ddp-client/common/connection_stream_handlers.js"],"sourcesContent":["import { DDPCommon } from 'meteor/ddp-common';\nimport { Meteor } from 'meteor/meteor';\n\nexport class ConnectionStreamHandlers {\n  constructor(connection) {\n    this._connection = connection;\n  }\n\n  /**\n   * Handles incoming raw messages from the DDP stream\n   * @param {String} raw_msg The raw message received from the stream\n   */\n  async onMessage(raw_msg) {\n    let msg;\n    try {\n      msg = DDPCommon.parseDDP(raw_msg);\n    } catch (e) {\n      Meteor._debug('Exception while parsing DDP', e);\n      return;\n    }\n\n    // Any message counts as receiving a pong, as it demonstrates that\n    // the server is still alive.\n    if (this._connection._heartbeat) {\n      this._connection._heartbeat.messageReceived();\n    }\n\n    if (msg === null || !msg.msg) {\n      if(!msg || !msg.testMessageOnConnect) {\n        if (Object.keys(msg).length === 1 && msg.server_id) return;\n        Meteor._debug('discarding invalid livedata message', msg);\n      }\n      return;\n    }\n\n    // Important: This was missing from previous version\n    // We need to set the current version before routing the message\n    if (msg.msg === 'connected') {\n      this._connection._version = this._connection._versionSuggestion;\n    }\n\n    await this._routeMessage(msg);\n  }\n\n  /**\n   * Routes messages to their appropriate handlers based on message type\n   * @private\n   * @param {Object} msg The parsed DDP message\n   */\n  async _routeMessage(msg) {\n    switch (msg.msg) {\n      case 'connected':\n        await this._connection._livedata_connected(msg);\n        this._connection.options.onConnected();\n        break;\n\n      case 'failed':\n        await this._handleFailedMessage(msg);\n        break;\n\n      case 'ping':\n        if (this._connection.options.respondToPings) {\n          this._connection._send({ msg: 'pong', id: msg.id });\n        }\n        break;\n\n      case 'pong':\n        // noop, as we assume everything's a pong\n        break;\n\n      case 'added':\n      case 'changed':\n      case 'removed':\n      case 'ready':\n      case 'updated':\n        await this._connection._livedata_data(msg);\n        break;\n\n      case 'nosub':\n        await this._connection._livedata_nosub(msg);\n        break;\n\n      case 'result':\n        await this._connection._livedata_result(msg);\n        break;\n\n      case 'error':\n        this._connection._livedata_error(msg);\n        break;\n\n      default:\n        Meteor._debug('discarding unknown livedata message type', msg);\n    }\n  }\n\n  /**\n   * Handles failed connection messages\n   * @private\n   * @param {Object} msg The failed message object\n   */\n  _handleFailedMessage(msg) {\n    if (this._connection._supportedDDPVersions.indexOf(msg.version) >= 0) {\n      this._connection._versionSuggestion = msg.version;\n      this._connection._stream.reconnect({ _force: true });\n    } else {\n      const description =\n        'DDP version negotiation failed; server requested version ' +\n        msg.version;\n      this._connection._stream.disconnect({ _permanent: true, _error: description });\n      this._connection.options.onDDPVersionNegotiationFailure(description);\n    }\n  }\n\n  /**\n   * Handles connection reset events\n   */\n  onReset() {\n    // Reset is called even on the first connection, so this is\n    // the only place we send this message.\n    const msg = this._buildConnectMessage();\n    this._connection._send(msg);\n\n    // Mark non-retry calls as failed and handle outstanding methods\n    this._handleOutstandingMethodsOnReset();\n\n    // Now, to minimize setup latency, go ahead and blast out all of\n    // our pending methods ands subscriptions before we've even taken\n    // the necessary RTT to know if we successfully reconnected.\n    this._connection._callOnReconnectAndSendAppropriateOutstandingMethods();\n    this._resendSubscriptions();\n  }\n\n  /**\n   * Builds the initial connect message\n   * @private\n   * @returns {Object} The connect message object\n   */\n  _buildConnectMessage() {\n    const msg = { msg: 'connect' };\n    if (this._connection._lastSessionId) {\n      msg.session = this._connection._lastSessionId;\n    }\n    msg.version = this._connection._versionSuggestion || this._connection._supportedDDPVersions[0];\n    this._connection._versionSuggestion = msg.version;\n    msg.support = this._connection._supportedDDPVersions;\n    return msg;\n  }\n\n  /**\n   * Handles outstanding methods during a reset\n   * @private\n   */\n  _handleOutstandingMethodsOnReset() {\n    const blocks = this._connection._outstandingMethodBlocks;\n    if (blocks.length === 0) return;\n\n    const currentMethodBlock = blocks[0].methods;\n    blocks[0].methods = currentMethodBlock.filter(\n      methodInvoker => {\n        // Methods with 'noRetry' option set are not allowed to re-send after\n        // recovering dropped connection.\n        if (methodInvoker.sentMessage && methodInvoker.noRetry) {\n          methodInvoker.receiveResult(\n            new Meteor.Error(\n              'invocation-failed',\n              'Method invocation might have failed due to dropped connection. ' +\n              'Failing because `noRetry` option was passed to Meteor.apply.'\n            )\n          );\n        }\n\n        // Only keep a method if it wasn't sent or it's allowed to retry.\n        return !(methodInvoker.sentMessage && methodInvoker.noRetry);\n      }\n    );\n\n    // Clear empty blocks\n    if (blocks.length > 0 && blocks[0].methods.length === 0) {\n      blocks.shift();\n    }\n\n    // Reset all method invokers as unsent\n    Object.values(this._connection._methodInvokers).forEach(invoker => {\n      invoker.sentMessage = false;\n    });\n  }\n\n  /**\n   * Resends all active subscriptions\n   * @private\n   */\n  _resendSubscriptions() {\n    Object.entries(this._connection._subscriptions).forEach(([id, sub]) => {\n      this._connection._sendQueued({\n        msg: 'sub',\n        id: id,\n        name: sub.name,\n        params: sub.params\n      });\n    });\n  }\n}"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"92d11b9244ac6535d1022545779faa4e3ac1e6d3"}
