{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\snntv\\OneDrive\\Documents\\AI Agent\\projects\\Meteor\\BlueSky\\packages\\ddp-server\\crossbar.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.windows.x86_64"},"sourceFileName":"packages/ddp-server/crossbar.js","filename":"C:\\Users\\snntv\\OneDrive\\Documents\\AI Agent\\projects\\Meteor\\BlueSky\\packages\\ddp-server\\crossbar.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"C:\\Users\\snntv\\OneDrive\\Documents\\AI Agent\\projects\\Meteor\\BlueSky","root":"C:\\Users\\snntv\\OneDrive\\Documents\\AI Agent\\projects\\Meteor\\BlueSky","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"C:\\Users\\snntv\\OneDrive\\Documents\\AI Agent\\projects\\Meteor\\BlueSky\\packages\\ddp-server\\crossbar.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/ddp-server/crossbar.js"}},"code":"// A \"crossbar\" is a class that provides structured notification registration.\n// See _match for the definition of how a notification matches a trigger.\n// All notifications and triggers must have a string key named 'collection'.\n\nDDPServer._Crossbar = function (options) {\n  var self = this;\n  options = options || {};\n  self.nextId = 1;\n  // map from collection name (string) -> listener id -> object. each object has\n  // keys 'trigger', 'callback'.  As a hack, the empty string means \"no\n  // collection\".\n  self.listenersByCollection = {};\n  self.listenersByCollectionCount = {};\n  self.factPackage = options.factPackage || \"livedata\";\n  self.factName = options.factName || null;\n};\nObject.assign(DDPServer._Crossbar.prototype, {\n  // msg is a trigger or a notification\n  _collectionForMessage: function (msg) {\n    var self = this;\n    if (!('collection' in msg)) {\n      return '';\n    } else if (typeof msg.collection === 'string') {\n      if (msg.collection === '') throw Error(\"Message has empty collection!\");\n      return msg.collection;\n    } else {\n      throw Error(\"Message has non-string collection!\");\n    }\n  },\n  // Listen for notification that match 'trigger'. A notification\n  // matches if it has the key-value pairs in trigger as a\n  // subset. When a notification matches, call 'callback', passing\n  // the actual notification.\n  //\n  // Returns a listen handle, which is an object with a method\n  // stop(). Call stop() to stop listening.\n  //\n  // XXX It should be legal to call fire() from inside a listen()\n  // callback?\n  listen: function (trigger, callback) {\n    var self = this;\n    var id = self.nextId++;\n    var collection = self._collectionForMessage(trigger);\n    var record = {\n      trigger: EJSON.clone(trigger),\n      callback: callback\n    };\n    if (!(collection in self.listenersByCollection)) {\n      self.listenersByCollection[collection] = {};\n      self.listenersByCollectionCount[collection] = 0;\n    }\n    self.listenersByCollection[collection][id] = record;\n    self.listenersByCollectionCount[collection]++;\n    if (self.factName && Package['facts-base']) {\n      Package['facts-base'].Facts.incrementServerFact(self.factPackage, self.factName, 1);\n    }\n    return {\n      stop: function () {\n        if (self.factName && Package['facts-base']) {\n          Package['facts-base'].Facts.incrementServerFact(self.factPackage, self.factName, -1);\n        }\n        delete self.listenersByCollection[collection][id];\n        self.listenersByCollectionCount[collection]--;\n        if (self.listenersByCollectionCount[collection] === 0) {\n          delete self.listenersByCollection[collection];\n          delete self.listenersByCollectionCount[collection];\n        }\n      }\n    };\n  },\n  // Fire the provided 'notification' (an object whose attribute\n  // values are all JSON-compatibile) -- inform all matching listeners\n  // (registered with listen()).\n  //\n  // If fire() is called inside a write fence, then each of the\n  // listener callbacks will be called inside the write fence as well.\n  //\n  // The listeners may be invoked in parallel, rather than serially.\n  fire: async function (notification) {\n    var self = this;\n    var collection = self._collectionForMessage(notification);\n    if (!(collection in self.listenersByCollection)) {\n      return;\n    }\n    var listenersForCollection = self.listenersByCollection[collection];\n    var callbackIds = [];\n    Object.entries(listenersForCollection).forEach(function (_ref) {\n      let [id, l] = _ref;\n      if (self._matches(notification, l.trigger)) {\n        callbackIds.push(id);\n      }\n    });\n\n    // Listener callbacks can yield, so we need to first find all the ones that\n    // match in a single iteration over self.listenersByCollection (which can't\n    // be mutated during this iteration), and then invoke the matching\n    // callbacks, checking before each call to ensure they haven't stopped.\n    // Note that we don't have to check that\n    // self.listenersByCollection[collection] still === listenersForCollection,\n    // because the only way that stops being true is if listenersForCollection\n    // first gets reduced down to the empty object (and then never gets\n    // increased again).\n    for (const id of callbackIds) {\n      if (id in listenersForCollection) {\n        await listenersForCollection[id].callback(notification);\n      }\n    }\n  },\n  // A notification matches a trigger if all keys that exist in both are equal.\n  //\n  // Examples:\n  //  N:{collection: \"C\"} matches T:{collection: \"C\"}\n  //    (a non-targeted write to a collection matches a\n  //     non-targeted query)\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\"}\n  //    (a targeted write to a collection matches a non-targeted query)\n  //  N:{collection: \"C\"} matches T:{collection: \"C\", id: \"X\"}\n  //    (a non-targeted write to a collection matches a\n  //     targeted query)\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\", id: \"X\"}\n  //    (a targeted write to a collection matches a targeted query targeted\n  //     at the same document)\n  //  N:{collection: \"C\", id: \"X\"} does not match T:{collection: \"C\", id: \"Y\"}\n  //    (a targeted write to a collection does not match a targeted query\n  //     targeted at a different document)\n  _matches: function (notification, trigger) {\n    // Most notifications that use the crossbar have a string `collection` and\n    // maybe an `id` that is a string or ObjectID. We're already dividing up\n    // triggers by collection, but let's fast-track \"nope, different ID\" (and\n    // avoid the overly generic EJSON.equals). This makes a noticeable\n    // performance difference; see https://github.com/meteor/meteor/pull/3697\n    if (typeof notification.id === 'string' && typeof trigger.id === 'string' && notification.id !== trigger.id) {\n      return false;\n    }\n    if (notification.id instanceof MongoID.ObjectID && trigger.id instanceof MongoID.ObjectID && !notification.id.equals(trigger.id)) {\n      return false;\n    }\n    return Object.keys(trigger).every(function (key) {\n      return !(key in notification) || EJSON.equals(trigger[key], notification[key]);\n    });\n  }\n});\n\n// The \"invalidation crossbar\" is a specific instance used by the DDP server to\n// implement write fence notifications. Listener callbacks on this crossbar\n// should call beginWrite on the current write fence before they return, if they\n// want to delay the write fence from firing (ie, the DDP method-data-updated\n// message from being sent).\nDDPServer._InvalidationCrossbar = new DDPServer._Crossbar({\n  factName: \"invalidation-crossbar-listeners\"\n});","map":{"version":3,"names":["DDPServer","_Crossbar","options","self","nextId","listenersByCollection","listenersByCollectionCount","factPackage","factName","Object","assign","prototype","_collectionForMessage","msg","collection","Error","listen","trigger","callback","id","record","EJSON","clone","Package","Facts","incrementServerFact","stop","fire","notification","listenersForCollection","callbackIds","entries","forEach","_ref","l","_matches","push","MongoID","ObjectID","equals","keys","every","key","_InvalidationCrossbar"],"sources":["packages/ddp-server/crossbar.js"],"sourcesContent":["// A \"crossbar\" is a class that provides structured notification registration.\n// See _match for the definition of how a notification matches a trigger.\n// All notifications and triggers must have a string key named 'collection'.\n\nDDPServer._Crossbar = function (options) {\n  var self = this;\n  options = options || {};\n\n  self.nextId = 1;\n  // map from collection name (string) -> listener id -> object. each object has\n  // keys 'trigger', 'callback'.  As a hack, the empty string means \"no\n  // collection\".\n  self.listenersByCollection = {};\n  self.listenersByCollectionCount = {};\n  self.factPackage = options.factPackage || \"livedata\";\n  self.factName = options.factName || null;\n};\n\nObject.assign(DDPServer._Crossbar.prototype, {\n  // msg is a trigger or a notification\n  _collectionForMessage: function (msg) {\n    var self = this;\n    if (!('collection' in msg)) {\n      return '';\n    } else if (typeof(msg.collection) === 'string') {\n      if (msg.collection === '')\n        throw Error(\"Message has empty collection!\");\n      return msg.collection;\n    } else {\n      throw Error(\"Message has non-string collection!\");\n    }\n  },\n\n  // Listen for notification that match 'trigger'. A notification\n  // matches if it has the key-value pairs in trigger as a\n  // subset. When a notification matches, call 'callback', passing\n  // the actual notification.\n  //\n  // Returns a listen handle, which is an object with a method\n  // stop(). Call stop() to stop listening.\n  //\n  // XXX It should be legal to call fire() from inside a listen()\n  // callback?\n  listen: function (trigger, callback) {\n    var self = this;\n    var id = self.nextId++;\n\n    var collection = self._collectionForMessage(trigger);\n    var record = {trigger: EJSON.clone(trigger), callback: callback};\n    if (! (collection in self.listenersByCollection)) {\n      self.listenersByCollection[collection] = {};\n      self.listenersByCollectionCount[collection] = 0;\n    }\n    self.listenersByCollection[collection][id] = record;\n    self.listenersByCollectionCount[collection]++;\n\n    if (self.factName && Package['facts-base']) {\n      Package['facts-base'].Facts.incrementServerFact(\n        self.factPackage, self.factName, 1);\n    }\n\n    return {\n      stop: function () {\n        if (self.factName && Package['facts-base']) {\n          Package['facts-base'].Facts.incrementServerFact(\n            self.factPackage, self.factName, -1);\n        }\n        delete self.listenersByCollection[collection][id];\n        self.listenersByCollectionCount[collection]--;\n        if (self.listenersByCollectionCount[collection] === 0) {\n          delete self.listenersByCollection[collection];\n          delete self.listenersByCollectionCount[collection];\n        }\n      }\n    };\n  },\n\n  // Fire the provided 'notification' (an object whose attribute\n  // values are all JSON-compatibile) -- inform all matching listeners\n  // (registered with listen()).\n  //\n  // If fire() is called inside a write fence, then each of the\n  // listener callbacks will be called inside the write fence as well.\n  //\n  // The listeners may be invoked in parallel, rather than serially.\n  fire: async function (notification) {\n    var self = this;\n\n    var collection = self._collectionForMessage(notification);\n\n    if (!(collection in self.listenersByCollection)) {\n      return;\n    }\n\n    var listenersForCollection = self.listenersByCollection[collection];\n    var callbackIds = [];\n    Object.entries(listenersForCollection).forEach(function ([id, l]) {\n      if (self._matches(notification, l.trigger)) {\n        callbackIds.push(id);\n      }\n    });\n\n    // Listener callbacks can yield, so we need to first find all the ones that\n    // match in a single iteration over self.listenersByCollection (which can't\n    // be mutated during this iteration), and then invoke the matching\n    // callbacks, checking before each call to ensure they haven't stopped.\n    // Note that we don't have to check that\n    // self.listenersByCollection[collection] still === listenersForCollection,\n    // because the only way that stops being true is if listenersForCollection\n    // first gets reduced down to the empty object (and then never gets\n    // increased again).\n    for (const id of callbackIds) {\n      if (id in listenersForCollection) {\n        await listenersForCollection[id].callback(notification);\n      }\n    }\n  },\n\n  // A notification matches a trigger if all keys that exist in both are equal.\n  //\n  // Examples:\n  //  N:{collection: \"C\"} matches T:{collection: \"C\"}\n  //    (a non-targeted write to a collection matches a\n  //     non-targeted query)\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\"}\n  //    (a targeted write to a collection matches a non-targeted query)\n  //  N:{collection: \"C\"} matches T:{collection: \"C\", id: \"X\"}\n  //    (a non-targeted write to a collection matches a\n  //     targeted query)\n  //  N:{collection: \"C\", id: \"X\"} matches T:{collection: \"C\", id: \"X\"}\n  //    (a targeted write to a collection matches a targeted query targeted\n  //     at the same document)\n  //  N:{collection: \"C\", id: \"X\"} does not match T:{collection: \"C\", id: \"Y\"}\n  //    (a targeted write to a collection does not match a targeted query\n  //     targeted at a different document)\n  _matches: function (notification, trigger) {\n    // Most notifications that use the crossbar have a string `collection` and\n    // maybe an `id` that is a string or ObjectID. We're already dividing up\n    // triggers by collection, but let's fast-track \"nope, different ID\" (and\n    // avoid the overly generic EJSON.equals). This makes a noticeable\n    // performance difference; see https://github.com/meteor/meteor/pull/3697\n    if (typeof(notification.id) === 'string' &&\n        typeof(trigger.id) === 'string' &&\n        notification.id !== trigger.id) {\n      return false;\n    }\n    if (notification.id instanceof MongoID.ObjectID &&\n        trigger.id instanceof MongoID.ObjectID &&\n        ! notification.id.equals(trigger.id)) {\n      return false;\n    }\n\n    return Object.keys(trigger).every(function (key) {\n      return !(key in notification) || EJSON.equals(trigger[key], notification[key]);\n     });\n  }\n});\n\n// The \"invalidation crossbar\" is a specific instance used by the DDP server to\n// implement write fence notifications. Listener callbacks on this crossbar\n// should call beginWrite on the current write fence before they return, if they\n// want to delay the write fence from firing (ie, the DDP method-data-updated\n// message from being sent).\nDDPServer._InvalidationCrossbar = new DDPServer._Crossbar({\n  factName: \"invalidation-crossbar-listeners\"\n});"],"mappings":"AAAA;AACA;AACA;;AAEAA,SAAS,CAACC,SAAS,GAAG,UAAUC,OAAO,EAAE;EACvC,IAAIC,IAAI,GAAG,IAAI;EACfD,OAAO,GAAGA,OAAO,IAAI,CAAC,CAAC;EAEvBC,IAAI,CAACC,MAAM,GAAG,CAAC;EACf;EACA;EACA;EACAD,IAAI,CAACE,qBAAqB,GAAG,CAAC,CAAC;EAC/BF,IAAI,CAACG,0BAA0B,GAAG,CAAC,CAAC;EACpCH,IAAI,CAACI,WAAW,GAAGL,OAAO,CAACK,WAAW,IAAI,UAAU;EACpDJ,IAAI,CAACK,QAAQ,GAAGN,OAAO,CAACM,QAAQ,IAAI,IAAI;AAC1C,CAAC;AAEDC,MAAM,CAACC,MAAM,CAACV,SAAS,CAACC,SAAS,CAACU,SAAS,EAAE;EAC3C;EACAC,qBAAqB,EAAE,SAAAA,CAAUC,GAAG,EAAE;IACpC,IAAIV,IAAI,GAAG,IAAI;IACf,IAAI,EAAE,YAAY,IAAIU,GAAG,CAAC,EAAE;MAC1B,OAAO,EAAE;IACX,CAAC,MAAM,IAAI,OAAOA,GAAG,CAACC,UAAW,KAAK,QAAQ,EAAE;MAC9C,IAAID,GAAG,CAACC,UAAU,KAAK,EAAE,EACvB,MAAMC,KAAK,CAAC,+BAA+B,CAAC;MAC9C,OAAOF,GAAG,CAACC,UAAU;IACvB,CAAC,MAAM;MACL,MAAMC,KAAK,CAAC,oCAAoC,CAAC;IACnD;EACF,CAAC;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAC,MAAM,EAAE,SAAAA,CAAUC,OAAO,EAAEC,QAAQ,EAAE;IACnC,IAAIf,IAAI,GAAG,IAAI;IACf,IAAIgB,EAAE,GAAGhB,IAAI,CAACC,MAAM,EAAE;IAEtB,IAAIU,UAAU,GAAGX,IAAI,CAACS,qBAAqB,CAACK,OAAO,CAAC;IACpD,IAAIG,MAAM,GAAG;MAACH,OAAO,EAAEI,KAAK,CAACC,KAAK,CAACL,OAAO,CAAC;MAAEC,QAAQ,EAAEA;IAAQ,CAAC;IAChE,IAAI,EAAGJ,UAAU,IAAIX,IAAI,CAACE,qBAAqB,CAAC,EAAE;MAChDF,IAAI,CAACE,qBAAqB,CAACS,UAAU,CAAC,GAAG,CAAC,CAAC;MAC3CX,IAAI,CAACG,0BAA0B,CAACQ,UAAU,CAAC,GAAG,CAAC;IACjD;IACAX,IAAI,CAACE,qBAAqB,CAACS,UAAU,CAAC,CAACK,EAAE,CAAC,GAAGC,MAAM;IACnDjB,IAAI,CAACG,0BAA0B,CAACQ,UAAU,CAAC,EAAE;IAE7C,IAAIX,IAAI,CAACK,QAAQ,IAAIe,OAAO,CAAC,YAAY,CAAC,EAAE;MAC1CA,OAAO,CAAC,YAAY,CAAC,CAACC,KAAK,CAACC,mBAAmB,CAC7CtB,IAAI,CAACI,WAAW,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAAC;IACvC;IAEA,OAAO;MACLkB,IAAI,EAAE,SAAAA,CAAA,EAAY;QAChB,IAAIvB,IAAI,CAACK,QAAQ,IAAIe,OAAO,CAAC,YAAY,CAAC,EAAE;UAC1CA,OAAO,CAAC,YAAY,CAAC,CAACC,KAAK,CAACC,mBAAmB,CAC7CtB,IAAI,CAACI,WAAW,EAAEJ,IAAI,CAACK,QAAQ,EAAE,CAAC,CAAC,CAAC;QACxC;QACA,OAAOL,IAAI,CAACE,qBAAqB,CAACS,UAAU,CAAC,CAACK,EAAE,CAAC;QACjDhB,IAAI,CAACG,0BAA0B,CAACQ,UAAU,CAAC,EAAE;QAC7C,IAAIX,IAAI,CAACG,0BAA0B,CAACQ,UAAU,CAAC,KAAK,CAAC,EAAE;UACrD,OAAOX,IAAI,CAACE,qBAAqB,CAACS,UAAU,CAAC;UAC7C,OAAOX,IAAI,CAACG,0BAA0B,CAACQ,UAAU,CAAC;QACpD;MACF;IACF,CAAC;EACH,CAAC;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAa,IAAI,EAAE,eAAAA,CAAgBC,YAAY,EAAE;IAClC,IAAIzB,IAAI,GAAG,IAAI;IAEf,IAAIW,UAAU,GAAGX,IAAI,CAACS,qBAAqB,CAACgB,YAAY,CAAC;IAEzD,IAAI,EAAEd,UAAU,IAAIX,IAAI,CAACE,qBAAqB,CAAC,EAAE;MAC/C;IACF;IAEA,IAAIwB,sBAAsB,GAAG1B,IAAI,CAACE,qBAAqB,CAACS,UAAU,CAAC;IACnE,IAAIgB,WAAW,GAAG,EAAE;IACpBrB,MAAM,CAACsB,OAAO,CAACF,sBAAsB,CAAC,CAACG,OAAO,CAAC,UAAAC,IAAA,EAAmB;MAAA,IAAT,CAACd,EAAE,EAAEe,CAAC,CAAC,GAAAD,IAAA;MAC9D,IAAI9B,IAAI,CAACgC,QAAQ,CAACP,YAAY,EAAEM,CAAC,CAACjB,OAAO,CAAC,EAAE;QAC1Ca,WAAW,CAACM,IAAI,CAACjB,EAAE,CAAC;MACtB;IACF,CAAC,CAAC;;IAEF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,KAAK,MAAMA,EAAE,IAAIW,WAAW,EAAE;MAC5B,IAAIX,EAAE,IAAIU,sBAAsB,EAAE;QAChC,MAAMA,sBAAsB,CAACV,EAAE,CAAC,CAACD,QAAQ,CAACU,YAAY,CAAC;MACzD;IACF;EACF,CAAC;EAED;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACAO,QAAQ,EAAE,SAAAA,CAAUP,YAAY,EAAEX,OAAO,EAAE;IACzC;IACA;IACA;IACA;IACA;IACA,IAAI,OAAOW,YAAY,CAACT,EAAG,KAAK,QAAQ,IACpC,OAAOF,OAAO,CAACE,EAAG,KAAK,QAAQ,IAC/BS,YAAY,CAACT,EAAE,KAAKF,OAAO,CAACE,EAAE,EAAE;MAClC,OAAO,KAAK;IACd;IACA,IAAIS,YAAY,CAACT,EAAE,YAAYkB,OAAO,CAACC,QAAQ,IAC3CrB,OAAO,CAACE,EAAE,YAAYkB,OAAO,CAACC,QAAQ,IACtC,CAAEV,YAAY,CAACT,EAAE,CAACoB,MAAM,CAACtB,OAAO,CAACE,EAAE,CAAC,EAAE;MACxC,OAAO,KAAK;IACd;IAEA,OAAOV,MAAM,CAAC+B,IAAI,CAACvB,OAAO,CAAC,CAACwB,KAAK,CAAC,UAAUC,GAAG,EAAE;MAC/C,OAAO,EAAEA,GAAG,IAAId,YAAY,CAAC,IAAIP,KAAK,CAACkB,MAAM,CAACtB,OAAO,CAACyB,GAAG,CAAC,EAAEd,YAAY,CAACc,GAAG,CAAC,CAAC;IAC/E,CAAC,CAAC;EACL;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA1C,SAAS,CAAC2C,qBAAqB,GAAG,IAAI3C,SAAS,CAACC,SAAS,CAAC;EACxDO,QAAQ,EAAE;AACZ,CAAC,CAAC","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"5ddc83c15761ec7ccd0c1f2417328b4d7764001a"}
