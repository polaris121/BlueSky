{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\snntv\\OneDrive\\Documents\\AI Agent\\projects\\Meteor\\BlueSky\\packages\\mongo\\collection\\collection.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/mongo/collection/collection.js","filename":"C:\\Users\\snntv\\OneDrive\\Documents\\AI Agent\\projects\\Meteor\\BlueSky\\packages\\mongo\\collection\\collection.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"C:\\Users\\snntv\\OneDrive\\Documents\\AI Agent\\projects\\Meteor\\BlueSky","root":"C:\\Users\\snntv\\OneDrive\\Documents\\AI Agent\\projects\\Meteor\\BlueSky","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"C:\\Users\\snntv\\OneDrive\\Documents\\AI Agent\\projects\\Meteor\\BlueSky\\packages\\mongo\\collection\\collection.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/mongo/collection/collection.js"}},"code":"!function (module1) {\n  let _objectSpread;\n  module1.link(\"@babel/runtime/helpers/objectSpread2\", {\n    default(v) {\n      _objectSpread = v;\n    }\n  }, 0);\n  let normalizeProjection;\n  module1.link(\"../mongo_utils\", {\n    normalizeProjection(v) {\n      normalizeProjection = v;\n    }\n  }, 0);\n  let AsyncMethods;\n  module1.link(\"./methods_async\", {\n    AsyncMethods(v) {\n      AsyncMethods = v;\n    }\n  }, 1);\n  let SyncMethods;\n  module1.link(\"./methods_sync\", {\n    SyncMethods(v) {\n      SyncMethods = v;\n    }\n  }, 2);\n  let IndexMethods;\n  module1.link(\"./methods_index\", {\n    IndexMethods(v) {\n      IndexMethods = v;\n    }\n  }, 3);\n  let ID_GENERATORS, normalizeOptions, setupAutopublish, setupConnection, setupDriver, setupMutationMethods, validateCollectionName;\n  module1.link(\"./collection_utils\", {\n    ID_GENERATORS(v) {\n      ID_GENERATORS = v;\n    },\n    normalizeOptions(v) {\n      normalizeOptions = v;\n    },\n    setupAutopublish(v) {\n      setupAutopublish = v;\n    },\n    setupConnection(v) {\n      setupConnection = v;\n    },\n    setupDriver(v) {\n      setupDriver = v;\n    },\n    setupMutationMethods(v) {\n      setupMutationMethods = v;\n    },\n    validateCollectionName(v) {\n      validateCollectionName = v;\n    }\n  }, 4);\n  let ReplicationMethods;\n  module1.link(\"./methods_replication\", {\n    ReplicationMethods(v) {\n      ReplicationMethods = v;\n    }\n  }, 5);\n  let watchChangeStream;\n  module1.link(\"./watch_change_stream\", {\n    watchChangeStream(v) {\n      watchChangeStream = v;\n    }\n  }, 6);\n  /**\n   * @summary Namespace for MongoDB-related items\n   * @namespace\n   */\n  Mongo = {};\n\n  /**\n   * @summary Constructor for a Collection\n   * @locus Anywhere\n   * @instancename collection\n   * @class\n   * @param {String} name The name of the collection.  If null, creates an unmanaged (unsynchronized) local collection.\n   * @param {Object} [options]\n   * @param {Object} options.connection The server connection that will manage this collection. Uses the default connection if not specified.  Pass the return value of calling [`DDP.connect`](#DDP-connect) to specify a different server. Pass `null` to specify no connection. Unmanaged (`name` is null) collections cannot specify a connection.\n   * @param {String} options.idGeneration The method of generating the `_id` fields of new documents in this collection.  Possible values:\n  \n   - **`'STRING'`**: random strings\n   - **`'MONGO'`**:  random [`Mongo.ObjectID`](#mongo_object_id) values\n  \n  The default id generation technique is `'STRING'`.\n   * @param {Function} options.transform An optional transformation function. Documents will be passed through this function before being returned from `fetch` or `findOneAsync`, and before being passed to callbacks of `observe`, `map`, `forEach`, `allow`, and `deny`. Transforms are *not* applied for the callbacks of `observeChanges` or to cursors returned from publish functions.\n   * @param {Boolean} options.defineMutationMethods Set to `false` to skip setting up the mutation methods that enable insert/update/remove from client code. Default `true`.\n   */\n  // Main Collection constructor\n  Mongo.Collection = function Collection(name, options) {\n    var _ID_GENERATORS$option, _ID_GENERATORS;\n    name = validateCollectionName(name);\n    options = normalizeOptions(options);\n    this._makeNewID = (_ID_GENERATORS$option = (_ID_GENERATORS = ID_GENERATORS)[options.idGeneration]) === null || _ID_GENERATORS$option === void 0 ? void 0 : _ID_GENERATORS$option.call(_ID_GENERATORS, name);\n    this._transform = LocalCollection.wrapTransform(options.transform);\n    this.resolverType = options.resolverType;\n    this._connection = setupConnection(name, options);\n    const driver = setupDriver(name, this._connection, options);\n    this._driver = driver;\n    this._collection = driver.open(name, this._connection);\n    this._name = name;\n    this._settingUpReplicationPromise = this._maybeSetUpReplication(name, options);\n    setupMutationMethods(this, name, options);\n    setupAutopublish(this, name, options);\n    Mongo._collections.set(name, this);\n  };\n  Object.assign(Mongo.Collection.prototype, {\n    _getFindSelector(args) {\n      if (args.length == 0) return {};else return args[0];\n    },\n    _getFindOptions(args) {\n      const [, options] = args || [];\n      const newOptions = normalizeProjection(options);\n      var self = this;\n      if (args.length < 2) {\n        return {\n          transform: self._transform\n        };\n      } else {\n        check(newOptions, Match.Optional(Match.ObjectIncluding({\n          projection: Match.Optional(Match.OneOf(Object, undefined)),\n          sort: Match.Optional(Match.OneOf(Object, Array, Function, undefined)),\n          limit: Match.Optional(Match.OneOf(Number, undefined)),\n          skip: Match.Optional(Match.OneOf(Number, undefined))\n        })));\n        return _objectSpread({\n          transform: self._transform\n        }, newOptions);\n      }\n    }\n  });\n  Object.assign(Mongo.Collection, {\n    async _publishCursor(cursor, sub, collection) {\n      var observeHandle = await cursor.observeChanges({\n        added: function (id, fields) {\n          sub.added(collection, id, fields);\n        },\n        changed: function (id, fields) {\n          sub.changed(collection, id, fields);\n        },\n        removed: function (id) {\n          sub.removed(collection, id);\n        }\n      },\n      // Publications don't mutate the documents\n      // This is tested by the `livedata - publish callbacks clone` test\n      {\n        nonMutatingCallbacks: true\n      });\n\n      // We don't call sub.ready() here: it gets called in livedata_server, after\n      // possibly calling _publishCursor on multiple returned cursors.\n\n      // register stop callback (expects lambda w/ no args).\n      sub.onStop(async function () {\n        return await observeHandle.stop();\n      });\n\n      // return the observeHandle in case it needs to be stopped early\n      return observeHandle;\n    },\n    // protect against dangerous selectors.  falsey and {_id: falsey} are both\n    // likely programmer error, and not what you want, particularly for destructive\n    // operations. If a falsey _id is sent in, a new string _id will be\n    // generated and returned; if a fallbackId is provided, it will be returned\n    // instead.\n    _rewriteSelector(selector) {\n      let {\n        fallbackId\n      } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      // shorthand -- scalars match _id\n      if (LocalCollection._selectorIsId(selector)) selector = {\n        _id: selector\n      };\n      if (Array.isArray(selector)) {\n        // This is consistent with the Mongo console itself; if we don't do this\n        // check passing an empty array ends up selecting all items\n        throw new Error(\"Mongo selector can't be an array.\");\n      }\n      if (!selector || '_id' in selector && !selector._id) {\n        // can't match anything\n        return {\n          _id: fallbackId || Random.id()\n        };\n      }\n      return selector;\n    }\n  });\n  Object.assign(Mongo.Collection.prototype, ReplicationMethods, SyncMethods, AsyncMethods, IndexMethods);\n  Object.assign(Mongo.Collection.prototype, {\n    // Determine if this collection is simply a minimongo representation of a real\n    // database on another server\n    _isRemoteCollection() {\n      // XXX see #MeteorServerNull\n      return this._connection && this._connection !== Meteor.server;\n    },\n    async dropCollectionAsync() {\n      var self = this;\n      if (!self._collection.dropCollectionAsync) throw new Error('Can only call dropCollectionAsync on server collections');\n      await self._collection.dropCollectionAsync();\n    },\n    async createCappedCollectionAsync(byteSize, maxDocuments) {\n      var self = this;\n      if (!(await self._collection.createCappedCollectionAsync)) throw new Error('Can only call createCappedCollectionAsync on server collections');\n      await self._collection.createCappedCollectionAsync(byteSize, maxDocuments);\n    },\n    /**\n     * @summary Returns the [`Collection`](http://mongodb.github.io/node-mongodb-native/3.0/api/Collection.html) object corresponding to this collection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.\n     * @locus Server\n     * @memberof Mongo.Collection\n     * @instance\n     */\n    rawCollection() {\n      var self = this;\n      if (!self._collection.rawCollection) {\n        throw new Error('Can only call rawCollection on server collections');\n      }\n      return self._collection.rawCollection();\n    },\n    /**\n     * @summary Returns the [`Db`](http://mongodb.github.io/node-mongodb-native/3.0/api/Db.html) object corresponding to this collection's database connection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.\n     * @locus Server\n     * @memberof Mongo.Collection\n     * @instance\n     */\n    rawDatabase() {\n      var self = this;\n      if (!(self._driver.mongo && self._driver.mongo.db)) {\n        throw new Error('Can only call rawDatabase on server collections');\n      }\n      return self._driver.mongo.db;\n    }\n  });\n  Object.assign(Mongo, {\n    /**\n     * @summary Retrieve a Meteor collection instance by name. Only collections defined with [`new Mongo.Collection(...)`](#collections) are available with this method. For plain MongoDB collections, you'll want to look at [`rawDatabase()`](#Mongo-Collection-rawDatabase).\n     * @locus Anywhere\n     * @memberof Mongo\n     * @static\n     * @param {string} name Name of your collection as it was defined with `new Mongo.Collection()`.\n     * @returns {Mongo.Collection | undefined}\n     */\n    getCollection(name) {\n      return this._collections.get(name);\n    },\n    /**\n     * @summary A record of all defined Mongo.Collection instances, indexed by collection name.\n     * @type {Map<string, Mongo.Collection>}\n     * @memberof Mongo\n     * @protected\n     */\n    _collections: new Map()\n  });\n\n  /**\n   * @summary Create a Mongo-style `ObjectID`.  If you don't specify a `hexString`, the `ObjectID` will be generated randomly (not using MongoDB's ID construction rules).\n   * @locus Anywhere\n   * @class\n   * @param {String} [hexString] Optional.  The 24-character hexadecimal contents of the ObjectID to create\n   */\n  Mongo.ObjectID = MongoID.ObjectID;\n\n  /**\n   * @summary To create a cursor, use find. To access the documents in a cursor, use forEach, map, or fetch.\n   * @class\n   * @instanceName cursor\n   */\n  Mongo.Cursor = LocalCollection.Cursor;\n\n  /**\n   * @deprecated in 0.9.1\n   */\n  Mongo.Collection.Cursor = Mongo.Cursor;\n\n  /**\n   * @deprecated in 0.9.1\n   */\n  Mongo.Collection.ObjectID = Mongo.ObjectID;\n\n  /**\n   * @deprecated in 0.9.1\n   */\n  Meteor.Collection = Mongo.Collection;\n\n  // Allow deny stuff is now in the allow-deny package\n  Object.assign(Mongo.Collection.prototype, AllowDeny.CollectionPrototype);\n\n  // Só agora que Mongo.Collection existe, adicionamos o método ao prototype\n  Object.assign(Mongo.Collection.prototype, {\n    watchChangeStream\n  });\n}.call(this, module);","map":{"version":3,"names":["_objectSpread","module1","link","default","v","normalizeProjection","AsyncMethods","SyncMethods","IndexMethods","ID_GENERATORS","normalizeOptions","setupAutopublish","setupConnection","setupDriver","setupMutationMethods","validateCollectionName","ReplicationMethods","watchChangeStream","Mongo","Collection","name","options","_ID_GENERATORS$option","_ID_GENERATORS","_makeNewID","idGeneration","call","_transform","LocalCollection","wrapTransform","transform","resolverType","_connection","driver","_driver","_collection","open","_name","_settingUpReplicationPromise","_maybeSetUpReplication","_collections","set","Object","assign","prototype","_getFindSelector","args","length","_getFindOptions","newOptions","self","check","Match","Optional","ObjectIncluding","projection","OneOf","undefined","sort","Array","Function","limit","Number","skip","_publishCursor","cursor","sub","collection","observeHandle","observeChanges","added","id","fields","changed","removed","nonMutatingCallbacks","onStop","stop","_rewriteSelector","selector","fallbackId","arguments","_selectorIsId","_id","isArray","Error","Random","_isRemoteCollection","Meteor","server","dropCollectionAsync","createCappedCollectionAsync","byteSize","maxDocuments","rawCollection","rawDatabase","mongo","db","getCollection","get","Map","ObjectID","MongoID","Cursor","AllowDeny","CollectionPrototype","module"],"sources":["packages/mongo/collection/collection.js"],"sourcesContent":["import { normalizeProjection } from \"../mongo_utils\";\nimport { AsyncMethods } from './methods_async';\nimport { SyncMethods } from './methods_sync';\nimport { IndexMethods } from './methods_index';\nimport {\n  ID_GENERATORS, normalizeOptions,\n  setupAutopublish,\n  setupConnection,\n  setupDriver,\n  setupMutationMethods,\n  validateCollectionName\n} from './collection_utils';\nimport { ReplicationMethods } from './methods_replication';\nimport { watchChangeStream } from './watch_change_stream';\n\n/**\n * @summary Namespace for MongoDB-related items\n * @namespace\n */\nMongo = {};\n\n/**\n * @summary Constructor for a Collection\n * @locus Anywhere\n * @instancename collection\n * @class\n * @param {String} name The name of the collection.  If null, creates an unmanaged (unsynchronized) local collection.\n * @param {Object} [options]\n * @param {Object} options.connection The server connection that will manage this collection. Uses the default connection if not specified.  Pass the return value of calling [`DDP.connect`](#DDP-connect) to specify a different server. Pass `null` to specify no connection. Unmanaged (`name` is null) collections cannot specify a connection.\n * @param {String} options.idGeneration The method of generating the `_id` fields of new documents in this collection.  Possible values:\n\n - **`'STRING'`**: random strings\n - **`'MONGO'`**:  random [`Mongo.ObjectID`](#mongo_object_id) values\n\nThe default id generation technique is `'STRING'`.\n * @param {Function} options.transform An optional transformation function. Documents will be passed through this function before being returned from `fetch` or `findOneAsync`, and before being passed to callbacks of `observe`, `map`, `forEach`, `allow`, and `deny`. Transforms are *not* applied for the callbacks of `observeChanges` or to cursors returned from publish functions.\n * @param {Boolean} options.defineMutationMethods Set to `false` to skip setting up the mutation methods that enable insert/update/remove from client code. Default `true`.\n */\n// Main Collection constructor\nMongo.Collection = function Collection(name, options) {\n  name = validateCollectionName(name);\n\n  options = normalizeOptions(options);\n\n  this._makeNewID = ID_GENERATORS[options.idGeneration]?.(name);\n\n  this._transform = LocalCollection.wrapTransform(options.transform);\n  this.resolverType = options.resolverType;\n\n  this._connection = setupConnection(name, options);\n\n  const driver = setupDriver(name, this._connection, options);\n  this._driver = driver;\n\n  this._collection = driver.open(name, this._connection);\n  this._name = name;\n\n  this._settingUpReplicationPromise = this._maybeSetUpReplication(name, options);\n\n  setupMutationMethods(this, name, options);\n\n  setupAutopublish(this, name, options);\n\n  Mongo._collections.set(name, this);\n};\n\nObject.assign(Mongo.Collection.prototype, {\n  _getFindSelector(args) {\n    if (args.length == 0) return {};\n    else return args[0];\n  },\n\n  _getFindOptions(args) {\n    const [, options] = args || [];\n    const newOptions = normalizeProjection(options);\n\n    var self = this;\n    if (args.length < 2) {\n      return { transform: self._transform };\n    } else {\n      check(\n        newOptions,\n        Match.Optional(\n          Match.ObjectIncluding({\n            projection: Match.Optional(Match.OneOf(Object, undefined)),\n            sort: Match.Optional(\n              Match.OneOf(Object, Array, Function, undefined)\n            ),\n            limit: Match.Optional(Match.OneOf(Number, undefined)),\n            skip: Match.Optional(Match.OneOf(Number, undefined)),\n          })\n        )\n      );\n\n      return {\n        transform: self._transform,\n        ...newOptions,\n      };\n    }\n  },\n});\n\nObject.assign(Mongo.Collection, {\n  async _publishCursor(cursor, sub, collection) {\n    var observeHandle = await cursor.observeChanges(\n        {\n          added: function(id, fields) {\n            sub.added(collection, id, fields);\n          },\n          changed: function(id, fields) {\n            sub.changed(collection, id, fields);\n          },\n          removed: function(id) {\n            sub.removed(collection, id);\n          },\n        },\n        // Publications don't mutate the documents\n        // This is tested by the `livedata - publish callbacks clone` test\n        { nonMutatingCallbacks: true }\n    );\n\n    // We don't call sub.ready() here: it gets called in livedata_server, after\n    // possibly calling _publishCursor on multiple returned cursors.\n\n    // register stop callback (expects lambda w/ no args).\n    sub.onStop(async function() {\n      return await observeHandle.stop();\n    });\n\n    // return the observeHandle in case it needs to be stopped early\n    return observeHandle;\n  },\n\n  // protect against dangerous selectors.  falsey and {_id: falsey} are both\n  // likely programmer error, and not what you want, particularly for destructive\n  // operations. If a falsey _id is sent in, a new string _id will be\n  // generated and returned; if a fallbackId is provided, it will be returned\n  // instead.\n  _rewriteSelector(selector, { fallbackId } = {}) {\n    // shorthand -- scalars match _id\n    if (LocalCollection._selectorIsId(selector)) selector = { _id: selector };\n\n    if (Array.isArray(selector)) {\n      // This is consistent with the Mongo console itself; if we don't do this\n      // check passing an empty array ends up selecting all items\n      throw new Error(\"Mongo selector can't be an array.\");\n    }\n\n    if (!selector || ('_id' in selector && !selector._id)) {\n      // can't match anything\n      return { _id: fallbackId || Random.id() };\n    }\n\n    return selector;\n  },\n});\n\nObject.assign(Mongo.Collection.prototype, ReplicationMethods, SyncMethods, AsyncMethods, IndexMethods);\n\nObject.assign(Mongo.Collection.prototype, {\n  // Determine if this collection is simply a minimongo representation of a real\n  // database on another server\n  _isRemoteCollection() {\n    // XXX see #MeteorServerNull\n    return this._connection && this._connection !== Meteor.server;\n  },\n\n  async dropCollectionAsync() {\n    var self = this;\n    if (!self._collection.dropCollectionAsync)\n      throw new Error('Can only call dropCollectionAsync on server collections');\n   await self._collection.dropCollectionAsync();\n  },\n\n  async createCappedCollectionAsync(byteSize, maxDocuments) {\n    var self = this;\n    if (! await self._collection.createCappedCollectionAsync)\n      throw new Error(\n        'Can only call createCappedCollectionAsync on server collections'\n      );\n    await self._collection.createCappedCollectionAsync(byteSize, maxDocuments);\n  },\n\n  /**\n   * @summary Returns the [`Collection`](http://mongodb.github.io/node-mongodb-native/3.0/api/Collection.html) object corresponding to this collection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.\n   * @locus Server\n   * @memberof Mongo.Collection\n   * @instance\n   */\n  rawCollection() {\n    var self = this;\n    if (!self._collection.rawCollection) {\n      throw new Error('Can only call rawCollection on server collections');\n    }\n    return self._collection.rawCollection();\n  },\n\n  /**\n   * @summary Returns the [`Db`](http://mongodb.github.io/node-mongodb-native/3.0/api/Db.html) object corresponding to this collection's database connection from the [npm `mongodb` driver module](https://www.npmjs.com/package/mongodb) which is wrapped by `Mongo.Collection`.\n   * @locus Server\n   * @memberof Mongo.Collection\n   * @instance\n   */\n  rawDatabase() {\n    var self = this;\n    if (!(self._driver.mongo && self._driver.mongo.db)) {\n      throw new Error('Can only call rawDatabase on server collections');\n    }\n    return self._driver.mongo.db;\n  },\n});\n\nObject.assign(Mongo, {\n  /**\n   * @summary Retrieve a Meteor collection instance by name. Only collections defined with [`new Mongo.Collection(...)`](#collections) are available with this method. For plain MongoDB collections, you'll want to look at [`rawDatabase()`](#Mongo-Collection-rawDatabase).\n   * @locus Anywhere\n   * @memberof Mongo\n   * @static\n   * @param {string} name Name of your collection as it was defined with `new Mongo.Collection()`.\n   * @returns {Mongo.Collection | undefined}\n   */\n  getCollection(name) {\n    return this._collections.get(name);\n  },\n\n  /**\n   * @summary A record of all defined Mongo.Collection instances, indexed by collection name.\n   * @type {Map<string, Mongo.Collection>}\n   * @memberof Mongo\n   * @protected\n   */\n  _collections: new Map(),\n})\n\n\n\n/**\n * @summary Create a Mongo-style `ObjectID`.  If you don't specify a `hexString`, the `ObjectID` will be generated randomly (not using MongoDB's ID construction rules).\n * @locus Anywhere\n * @class\n * @param {String} [hexString] Optional.  The 24-character hexadecimal contents of the ObjectID to create\n */\nMongo.ObjectID = MongoID.ObjectID;\n\n/**\n * @summary To create a cursor, use find. To access the documents in a cursor, use forEach, map, or fetch.\n * @class\n * @instanceName cursor\n */\nMongo.Cursor = LocalCollection.Cursor;\n\n/**\n * @deprecated in 0.9.1\n */\nMongo.Collection.Cursor = Mongo.Cursor;\n\n/**\n * @deprecated in 0.9.1\n */\nMongo.Collection.ObjectID = Mongo.ObjectID;\n\n/**\n * @deprecated in 0.9.1\n */\nMeteor.Collection = Mongo.Collection;\n\n\n// Allow deny stuff is now in the allow-deny package\nObject.assign(Mongo.Collection.prototype, AllowDeny.CollectionPrototype);\n\n// Só agora que Mongo.Collection existe, adicionamos o método ao prototype\nObject.assign(Mongo.Collection.prototype, { watchChangeStream });\n\n"],"mappings":";EAAA,IAAIA,aAAa;EAACC,OAAO,CAACC,IAAI,CAAC,sCAAsC,EAAC;IAACC,OAAOA,CAACC,CAAC,EAAC;MAACJ,aAAa,GAACI,CAAC;IAAA;EAAC,CAAC,EAAC,CAAC,CAAC;EAAtG,IAAIC,mBAAmB;EAACJ,OAAO,CAACC,IAAI,CAAC,gBAAgB,EAAC;IAACG,mBAAmBA,CAACD,CAAC,EAAC;MAACC,mBAAmB,GAACD,CAAC;IAAA;EAAC,CAAC,EAAC,CAAC,CAAC;EAAC,IAAIE,YAAY;EAACL,OAAO,CAACC,IAAI,CAAC,iBAAiB,EAAC;IAACI,YAAYA,CAACF,CAAC,EAAC;MAACE,YAAY,GAACF,CAAC;IAAA;EAAC,CAAC,EAAC,CAAC,CAAC;EAAC,IAAIG,WAAW;EAACN,OAAO,CAACC,IAAI,CAAC,gBAAgB,EAAC;IAACK,WAAWA,CAACH,CAAC,EAAC;MAACG,WAAW,GAACH,CAAC;IAAA;EAAC,CAAC,EAAC,CAAC,CAAC;EAAC,IAAII,YAAY;EAACP,OAAO,CAACC,IAAI,CAAC,iBAAiB,EAAC;IAACM,YAAYA,CAACJ,CAAC,EAAC;MAACI,YAAY,GAACJ,CAAC;IAAA;EAAC,CAAC,EAAC,CAAC,CAAC;EAAC,IAAIK,aAAa,EAACC,gBAAgB,EAACC,gBAAgB,EAACC,eAAe,EAACC,WAAW,EAACC,oBAAoB,EAACC,sBAAsB;EAACd,OAAO,CAACC,IAAI,CAAC,oBAAoB,EAAC;IAACO,aAAaA,CAACL,CAAC,EAAC;MAACK,aAAa,GAACL,CAAC;IAAA,CAAC;IAACM,gBAAgBA,CAACN,CAAC,EAAC;MAACM,gBAAgB,GAACN,CAAC;IAAA,CAAC;IAACO,gBAAgBA,CAACP,CAAC,EAAC;MAACO,gBAAgB,GAACP,CAAC;IAAA,CAAC;IAACQ,eAAeA,CAACR,CAAC,EAAC;MAACQ,eAAe,GAACR,CAAC;IAAA,CAAC;IAACS,WAAWA,CAACT,CAAC,EAAC;MAACS,WAAW,GAACT,CAAC;IAAA,CAAC;IAACU,oBAAoBA,CAACV,CAAC,EAAC;MAACU,oBAAoB,GAACV,CAAC;IAAA,CAAC;IAACW,sBAAsBA,CAACX,CAAC,EAAC;MAACW,sBAAsB,GAACX,CAAC;IAAA;EAAC,CAAC,EAAC,CAAC,CAAC;EAAC,IAAIY,kBAAkB;EAACf,OAAO,CAACC,IAAI,CAAC,uBAAuB,EAAC;IAACc,kBAAkBA,CAACZ,CAAC,EAAC;MAACY,kBAAkB,GAACZ,CAAC;IAAA;EAAC,CAAC,EAAC,CAAC,CAAC;EAAC,IAAIa,iBAAiB;EAAChB,OAAO,CAACC,IAAI,CAAC,uBAAuB,EAAC;IAACe,iBAAiBA,CAACb,CAAC,EAAC;MAACa,iBAAiB,GAACb,CAAC;IAAA;EAAC,CAAC,EAAC,CAAC,CAAC;EAev/B;AACA;AACA;AACA;EACAc,KAAK,GAAG,CAAC,CAAC;;EAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACA;EACAA,KAAK,CAACC,UAAU,GAAG,SAASA,UAAUA,CAACC,IAAI,EAAEC,OAAO,EAAE;IAAA,IAAAC,qBAAA,EAAAC,cAAA;IACpDH,IAAI,GAAGL,sBAAsB,CAACK,IAAI,CAAC;IAEnCC,OAAO,GAAGX,gBAAgB,CAACW,OAAO,CAAC;IAEnC,IAAI,CAACG,UAAU,IAAAF,qBAAA,GAAG,CAAAC,cAAA,GAAAd,aAAa,EAACY,OAAO,CAACI,YAAY,CAAC,cAAAH,qBAAA,uBAAnCA,qBAAA,CAAAI,IAAA,CAAAH,cAAA,EAAsCH,IAAI,CAAC;IAE7D,IAAI,CAACO,UAAU,GAAGC,eAAe,CAACC,aAAa,CAACR,OAAO,CAACS,SAAS,CAAC;IAClE,IAAI,CAACC,YAAY,GAAGV,OAAO,CAACU,YAAY;IAExC,IAAI,CAACC,WAAW,GAAGpB,eAAe,CAACQ,IAAI,EAAEC,OAAO,CAAC;IAEjD,MAAMY,MAAM,GAAGpB,WAAW,CAACO,IAAI,EAAE,IAAI,CAACY,WAAW,EAAEX,OAAO,CAAC;IAC3D,IAAI,CAACa,OAAO,GAAGD,MAAM;IAErB,IAAI,CAACE,WAAW,GAAGF,MAAM,CAACG,IAAI,CAAChB,IAAI,EAAE,IAAI,CAACY,WAAW,CAAC;IACtD,IAAI,CAACK,KAAK,GAAGjB,IAAI;IAEjB,IAAI,CAACkB,4BAA4B,GAAG,IAAI,CAACC,sBAAsB,CAACnB,IAAI,EAAEC,OAAO,CAAC;IAE9EP,oBAAoB,CAAC,IAAI,EAAEM,IAAI,EAAEC,OAAO,CAAC;IAEzCV,gBAAgB,CAAC,IAAI,EAAES,IAAI,EAAEC,OAAO,CAAC;IAErCH,KAAK,CAACsB,YAAY,CAACC,GAAG,CAACrB,IAAI,EAAE,IAAI,CAAC;EACpC,CAAC;EAEDsB,MAAM,CAACC,MAAM,CAACzB,KAAK,CAACC,UAAU,CAACyB,SAAS,EAAE;IACxCC,gBAAgBA,CAACC,IAAI,EAAE;MACrB,IAAIA,IAAI,CAACC,MAAM,IAAI,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,KAC3B,OAAOD,IAAI,CAAC,CAAC,CAAC;IACrB,CAAC;IAEDE,eAAeA,CAACF,IAAI,EAAE;MACpB,MAAM,GAAGzB,OAAO,CAAC,GAAGyB,IAAI,IAAI,EAAE;MAC9B,MAAMG,UAAU,GAAG5C,mBAAmB,CAACgB,OAAO,CAAC;MAE/C,IAAI6B,IAAI,GAAG,IAAI;MACf,IAAIJ,IAAI,CAACC,MAAM,GAAG,CAAC,EAAE;QACnB,OAAO;UAAEjB,SAAS,EAAEoB,IAAI,CAACvB;QAAW,CAAC;MACvC,CAAC,MAAM;QACLwB,KAAK,CACHF,UAAU,EACVG,KAAK,CAACC,QAAQ,CACZD,KAAK,CAACE,eAAe,CAAC;UACpBC,UAAU,EAAEH,KAAK,CAACC,QAAQ,CAACD,KAAK,CAACI,KAAK,CAACd,MAAM,EAAEe,SAAS,CAAC,CAAC;UAC1DC,IAAI,EAAEN,KAAK,CAACC,QAAQ,CAClBD,KAAK,CAACI,KAAK,CAACd,MAAM,EAAEiB,KAAK,EAAEC,QAAQ,EAAEH,SAAS,CAChD,CAAC;UACDI,KAAK,EAAET,KAAK,CAACC,QAAQ,CAACD,KAAK,CAACI,KAAK,CAACM,MAAM,EAAEL,SAAS,CAAC,CAAC;UACrDM,IAAI,EAAEX,KAAK,CAACC,QAAQ,CAACD,KAAK,CAACI,KAAK,CAACM,MAAM,EAAEL,SAAS,CAAC;QACrD,CAAC,CACH,CACF,CAAC;QAED,OAAAzD,aAAA;UACE8B,SAAS,EAAEoB,IAAI,CAACvB;QAAU,GACvBsB,UAAU;MAEjB;IACF;EACF,CAAC,CAAC;EAEFP,MAAM,CAACC,MAAM,CAACzB,KAAK,CAACC,UAAU,EAAE;IAC9B,MAAM6C,cAAcA,CAACC,MAAM,EAAEC,GAAG,EAAEC,UAAU,EAAE;MAC5C,IAAIC,aAAa,GAAG,MAAMH,MAAM,CAACI,cAAc,CAC3C;QACEC,KAAK,EAAE,SAAAA,CAASC,EAAE,EAAEC,MAAM,EAAE;UAC1BN,GAAG,CAACI,KAAK,CAACH,UAAU,EAAEI,EAAE,EAAEC,MAAM,CAAC;QACnC,CAAC;QACDC,OAAO,EAAE,SAAAA,CAASF,EAAE,EAAEC,MAAM,EAAE;UAC5BN,GAAG,CAACO,OAAO,CAACN,UAAU,EAAEI,EAAE,EAAEC,MAAM,CAAC;QACrC,CAAC;QACDE,OAAO,EAAE,SAAAA,CAASH,EAAE,EAAE;UACpBL,GAAG,CAACQ,OAAO,CAACP,UAAU,EAAEI,EAAE,CAAC;QAC7B;MACF,CAAC;MACD;MACA;MACA;QAAEI,oBAAoB,EAAE;MAAK,CACjC,CAAC;;MAED;MACA;;MAEA;MACAT,GAAG,CAACU,MAAM,CAAC,kBAAiB;QAC1B,OAAO,MAAMR,aAAa,CAACS,IAAI,CAAC,CAAC;MACnC,CAAC,CAAC;;MAEF;MACA,OAAOT,aAAa;IACtB,CAAC;IAED;IACA;IACA;IACA;IACA;IACAU,gBAAgBA,CAACC,QAAQ,EAAuB;MAAA,IAArB;QAAEC;MAAW,CAAC,GAAAC,SAAA,CAAAlC,MAAA,QAAAkC,SAAA,QAAAxB,SAAA,GAAAwB,SAAA,MAAG,CAAC,CAAC;MAC5C;MACA,IAAIrD,eAAe,CAACsD,aAAa,CAACH,QAAQ,CAAC,EAAEA,QAAQ,GAAG;QAAEI,GAAG,EAAEJ;MAAS,CAAC;MAEzE,IAAIpB,KAAK,CAACyB,OAAO,CAACL,QAAQ,CAAC,EAAE;QAC3B;QACA;QACA,MAAM,IAAIM,KAAK,CAAC,mCAAmC,CAAC;MACtD;MAEA,IAAI,CAACN,QAAQ,IAAK,KAAK,IAAIA,QAAQ,IAAI,CAACA,QAAQ,CAACI,GAAI,EAAE;QACrD;QACA,OAAO;UAAEA,GAAG,EAAEH,UAAU,IAAIM,MAAM,CAACf,EAAE,CAAC;QAAE,CAAC;MAC3C;MAEA,OAAOQ,QAAQ;IACjB;EACF,CAAC,CAAC;EAEFrC,MAAM,CAACC,MAAM,CAACzB,KAAK,CAACC,UAAU,CAACyB,SAAS,EAAE5B,kBAAkB,EAAET,WAAW,EAAED,YAAY,EAAEE,YAAY,CAAC;EAEtGkC,MAAM,CAACC,MAAM,CAACzB,KAAK,CAACC,UAAU,CAACyB,SAAS,EAAE;IACxC;IACA;IACA2C,mBAAmBA,CAAA,EAAG;MACpB;MACA,OAAO,IAAI,CAACvD,WAAW,IAAI,IAAI,CAACA,WAAW,KAAKwD,MAAM,CAACC,MAAM;IAC/D,CAAC;IAED,MAAMC,mBAAmBA,CAAA,EAAG;MAC1B,IAAIxC,IAAI,GAAG,IAAI;MACf,IAAI,CAACA,IAAI,CAACf,WAAW,CAACuD,mBAAmB,EACvC,MAAM,IAAIL,KAAK,CAAC,yDAAyD,CAAC;MAC7E,MAAMnC,IAAI,CAACf,WAAW,CAACuD,mBAAmB,CAAC,CAAC;IAC7C,CAAC;IAED,MAAMC,2BAA2BA,CAACC,QAAQ,EAAEC,YAAY,EAAE;MACxD,IAAI3C,IAAI,GAAG,IAAI;MACf,IAAI,EAAE,MAAMA,IAAI,CAACf,WAAW,CAACwD,2BAA2B,GACtD,MAAM,IAAIN,KAAK,CACb,iEACF,CAAC;MACH,MAAMnC,IAAI,CAACf,WAAW,CAACwD,2BAA2B,CAACC,QAAQ,EAAEC,YAAY,CAAC;IAC5E,CAAC;IAED;AACF;AACA;AACA;AACA;AACA;IACEC,aAAaA,CAAA,EAAG;MACd,IAAI5C,IAAI,GAAG,IAAI;MACf,IAAI,CAACA,IAAI,CAACf,WAAW,CAAC2D,aAAa,EAAE;QACnC,MAAM,IAAIT,KAAK,CAAC,mDAAmD,CAAC;MACtE;MACA,OAAOnC,IAAI,CAACf,WAAW,CAAC2D,aAAa,CAAC,CAAC;IACzC,CAAC;IAED;AACF;AACA;AACA;AACA;AACA;IACEC,WAAWA,CAAA,EAAG;MACZ,IAAI7C,IAAI,GAAG,IAAI;MACf,IAAI,EAAEA,IAAI,CAAChB,OAAO,CAAC8D,KAAK,IAAI9C,IAAI,CAAChB,OAAO,CAAC8D,KAAK,CAACC,EAAE,CAAC,EAAE;QAClD,MAAM,IAAIZ,KAAK,CAAC,iDAAiD,CAAC;MACpE;MACA,OAAOnC,IAAI,CAAChB,OAAO,CAAC8D,KAAK,CAACC,EAAE;IAC9B;EACF,CAAC,CAAC;EAEFvD,MAAM,CAACC,MAAM,CAACzB,KAAK,EAAE;IACnB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;IACEgF,aAAaA,CAAC9E,IAAI,EAAE;MAClB,OAAO,IAAI,CAACoB,YAAY,CAAC2D,GAAG,CAAC/E,IAAI,CAAC;IACpC,CAAC;IAED;AACF;AACA;AACA;AACA;AACA;IACEoB,YAAY,EAAE,IAAI4D,GAAG,CAAC;EACxB,CAAC,CAAC;;EAIF;AACA;AACA;AACA;AACA;AACA;EACAlF,KAAK,CAACmF,QAAQ,GAAGC,OAAO,CAACD,QAAQ;;EAEjC;AACA;AACA;AACA;AACA;EACAnF,KAAK,CAACqF,MAAM,GAAG3E,eAAe,CAAC2E,MAAM;;EAErC;AACA;AACA;EACArF,KAAK,CAACC,UAAU,CAACoF,MAAM,GAAGrF,KAAK,CAACqF,MAAM;;EAEtC;AACA;AACA;EACArF,KAAK,CAACC,UAAU,CAACkF,QAAQ,GAAGnF,KAAK,CAACmF,QAAQ;;EAE1C;AACA;AACA;EACAb,MAAM,CAACrE,UAAU,GAAGD,KAAK,CAACC,UAAU;;EAGpC;EACAuB,MAAM,CAACC,MAAM,CAACzB,KAAK,CAACC,UAAU,CAACyB,SAAS,EAAE4D,SAAS,CAACC,mBAAmB,CAAC;;EAExE;EACA/D,MAAM,CAACC,MAAM,CAACzB,KAAK,CAACC,UAAU,CAACyB,SAAS,EAAE;IAAE3B;EAAkB,CAAC,CAAC;AAAC,EAAAS,IAAA,OAAAgF,MAAA","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"08dd90145dad06ca5bfe5f33f2c8ef20174dea14"}
