{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\snntv\\OneDrive\\Documents\\AI Agent\\projects\\Meteor\\BlueSky\\packages\\ddp-client\\common\\connection_stream_handlers.js","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"web.browser"},"sourceFileName":"packages/ddp-client/common/connection_stream_handlers.js","filename":"C:\\Users\\snntv\\OneDrive\\Documents\\AI Agent\\projects\\Meteor\\BlueSky\\packages\\ddp-client\\common\\connection_stream_handlers.js","targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"C:\\Users\\snntv\\OneDrive\\Documents\\AI Agent\\projects\\Meteor\\BlueSky","root":"C:\\Users\\snntv\\OneDrive\\Documents\\AI Agent\\projects\\Meteor\\BlueSky","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"C:\\Users\\snntv\\OneDrive\\Documents\\AI Agent\\projects\\Meteor\\BlueSky\\packages\\ddp-client\\common\\connection_stream_handlers.js","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/ddp-client/common/connection_stream_handlers.js"}},"code":"module.export({\n  ConnectionStreamHandlers: () => ConnectionStreamHandlers\n});\nlet DDPCommon;\nmodule.link(\"meteor/ddp-common\", {\n  DDPCommon(v) {\n    DDPCommon = v;\n  }\n}, 0);\nlet Meteor;\nmodule.link(\"meteor/meteor\", {\n  Meteor(v) {\n    Meteor = v;\n  }\n}, 1);\nclass ConnectionStreamHandlers {\n  constructor(connection) {\n    this._connection = connection;\n  }\n\n  /**\n   * Handles incoming raw messages from the DDP stream\n   * @param {String} raw_msg The raw message received from the stream\n   */\n  async onMessage(raw_msg) {\n    let msg;\n    try {\n      msg = DDPCommon.parseDDP(raw_msg);\n    } catch (e) {\n      Meteor._debug('Exception while parsing DDP', e);\n      return;\n    }\n\n    // Any message counts as receiving a pong, as it demonstrates that\n    // the server is still alive.\n    if (this._connection._heartbeat) {\n      this._connection._heartbeat.messageReceived();\n    }\n    if (msg === null || !msg.msg) {\n      if (!msg || !msg.testMessageOnConnect) {\n        if (Object.keys(msg).length === 1 && msg.server_id) return;\n        Meteor._debug('discarding invalid livedata message', msg);\n      }\n      return;\n    }\n\n    // Important: This was missing from previous version\n    // We need to set the current version before routing the message\n    if (msg.msg === 'connected') {\n      this._connection._version = this._connection._versionSuggestion;\n    }\n    await this._routeMessage(msg);\n  }\n\n  /**\n   * Routes messages to their appropriate handlers based on message type\n   * @private\n   * @param {Object} msg The parsed DDP message\n   */\n  async _routeMessage(msg) {\n    switch (msg.msg) {\n      case 'connected':\n        await this._connection._livedata_connected(msg);\n        this._connection.options.onConnected();\n        break;\n      case 'failed':\n        await this._handleFailedMessage(msg);\n        break;\n      case 'ping':\n        if (this._connection.options.respondToPings) {\n          this._connection._send({\n            msg: 'pong',\n            id: msg.id\n          });\n        }\n        break;\n      case 'pong':\n        // noop, as we assume everything's a pong\n        break;\n      case 'added':\n      case 'changed':\n      case 'removed':\n      case 'ready':\n      case 'updated':\n        await this._connection._livedata_data(msg);\n        break;\n      case 'nosub':\n        await this._connection._livedata_nosub(msg);\n        break;\n      case 'result':\n        await this._connection._livedata_result(msg);\n        break;\n      case 'error':\n        this._connection._livedata_error(msg);\n        break;\n      default:\n        Meteor._debug('discarding unknown livedata message type', msg);\n    }\n  }\n\n  /**\n   * Handles failed connection messages\n   * @private\n   * @param {Object} msg The failed message object\n   */\n  _handleFailedMessage(msg) {\n    if (this._connection._supportedDDPVersions.indexOf(msg.version) >= 0) {\n      this._connection._versionSuggestion = msg.version;\n      this._connection._stream.reconnect({\n        _force: true\n      });\n    } else {\n      const description = 'DDP version negotiation failed; server requested version ' + msg.version;\n      this._connection._stream.disconnect({\n        _permanent: true,\n        _error: description\n      });\n      this._connection.options.onDDPVersionNegotiationFailure(description);\n    }\n  }\n\n  /**\n   * Handles connection reset events\n   */\n  onReset() {\n    // Reset is called even on the first connection, so this is\n    // the only place we send this message.\n    const msg = this._buildConnectMessage();\n    this._connection._send(msg);\n\n    // Mark non-retry calls as failed and handle outstanding methods\n    this._handleOutstandingMethodsOnReset();\n\n    // Now, to minimize setup latency, go ahead and blast out all of\n    // our pending methods ands subscriptions before we've even taken\n    // the necessary RTT to know if we successfully reconnected.\n    this._connection._callOnReconnectAndSendAppropriateOutstandingMethods();\n    this._resendSubscriptions();\n  }\n\n  /**\n   * Builds the initial connect message\n   * @private\n   * @returns {Object} The connect message object\n   */\n  _buildConnectMessage() {\n    const msg = {\n      msg: 'connect'\n    };\n    if (this._connection._lastSessionId) {\n      msg.session = this._connection._lastSessionId;\n    }\n    msg.version = this._connection._versionSuggestion || this._connection._supportedDDPVersions[0];\n    this._connection._versionSuggestion = msg.version;\n    msg.support = this._connection._supportedDDPVersions;\n    return msg;\n  }\n\n  /**\n   * Handles outstanding methods during a reset\n   * @private\n   */\n  _handleOutstandingMethodsOnReset() {\n    const blocks = this._connection._outstandingMethodBlocks;\n    if (blocks.length === 0) return;\n    const currentMethodBlock = blocks[0].methods;\n    blocks[0].methods = currentMethodBlock.filter(methodInvoker => {\n      // Methods with 'noRetry' option set are not allowed to re-send after\n      // recovering dropped connection.\n      if (methodInvoker.sentMessage && methodInvoker.noRetry) {\n        methodInvoker.receiveResult(new Meteor.Error('invocation-failed', 'Method invocation might have failed due to dropped connection. ' + 'Failing because `noRetry` option was passed to Meteor.apply.'));\n      }\n\n      // Only keep a method if it wasn't sent or it's allowed to retry.\n      return !(methodInvoker.sentMessage && methodInvoker.noRetry);\n    });\n\n    // Clear empty blocks\n    if (blocks.length > 0 && blocks[0].methods.length === 0) {\n      blocks.shift();\n    }\n\n    // Reset all method invokers as unsent\n    Object.values(this._connection._methodInvokers).forEach(invoker => {\n      invoker.sentMessage = false;\n    });\n  }\n\n  /**\n   * Resends all active subscriptions\n   * @private\n   */\n  _resendSubscriptions() {\n    Object.entries(this._connection._subscriptions).forEach(_ref => {\n      let [id, sub] = _ref;\n      this._connection._sendQueued({\n        msg: 'sub',\n        id: id,\n        name: sub.name,\n        params: sub.params\n      });\n    });\n  }\n}","map":{"version":3,"names":["module","export","ConnectionStreamHandlers","DDPCommon","link","v","Meteor","constructor","connection","_connection","onMessage","raw_msg","msg","parseDDP","e","_debug","_heartbeat","messageReceived","testMessageOnConnect","Object","keys","length","server_id","_version","_versionSuggestion","_routeMessage","_livedata_connected","options","onConnected","_handleFailedMessage","respondToPings","_send","id","_livedata_data","_livedata_nosub","_livedata_result","_livedata_error","_supportedDDPVersions","indexOf","version","_stream","reconnect","_force","description","disconnect","_permanent","_error","onDDPVersionNegotiationFailure","onReset","_buildConnectMessage","_handleOutstandingMethodsOnReset","_callOnReconnectAndSendAppropriateOutstandingMethods","_resendSubscriptions","_lastSessionId","session","support","blocks","_outstandingMethodBlocks","currentMethodBlock","methods","filter","methodInvoker","sentMessage","noRetry","receiveResult","Error","shift","values","_methodInvokers","forEach","invoker","entries","_subscriptions","_ref","sub","_sendQueued","name","params"],"sources":["packages/ddp-client/common/connection_stream_handlers.js"],"sourcesContent":["import { DDPCommon } from 'meteor/ddp-common';\nimport { Meteor } from 'meteor/meteor';\n\nexport class ConnectionStreamHandlers {\n  constructor(connection) {\n    this._connection = connection;\n  }\n\n  /**\n   * Handles incoming raw messages from the DDP stream\n   * @param {String} raw_msg The raw message received from the stream\n   */\n  async onMessage(raw_msg) {\n    let msg;\n    try {\n      msg = DDPCommon.parseDDP(raw_msg);\n    } catch (e) {\n      Meteor._debug('Exception while parsing DDP', e);\n      return;\n    }\n\n    // Any message counts as receiving a pong, as it demonstrates that\n    // the server is still alive.\n    if (this._connection._heartbeat) {\n      this._connection._heartbeat.messageReceived();\n    }\n\n    if (msg === null || !msg.msg) {\n      if(!msg || !msg.testMessageOnConnect) {\n        if (Object.keys(msg).length === 1 && msg.server_id) return;\n        Meteor._debug('discarding invalid livedata message', msg);\n      }\n      return;\n    }\n\n    // Important: This was missing from previous version\n    // We need to set the current version before routing the message\n    if (msg.msg === 'connected') {\n      this._connection._version = this._connection._versionSuggestion;\n    }\n\n    await this._routeMessage(msg);\n  }\n\n  /**\n   * Routes messages to their appropriate handlers based on message type\n   * @private\n   * @param {Object} msg The parsed DDP message\n   */\n  async _routeMessage(msg) {\n    switch (msg.msg) {\n      case 'connected':\n        await this._connection._livedata_connected(msg);\n        this._connection.options.onConnected();\n        break;\n\n      case 'failed':\n        await this._handleFailedMessage(msg);\n        break;\n\n      case 'ping':\n        if (this._connection.options.respondToPings) {\n          this._connection._send({ msg: 'pong', id: msg.id });\n        }\n        break;\n\n      case 'pong':\n        // noop, as we assume everything's a pong\n        break;\n\n      case 'added':\n      case 'changed':\n      case 'removed':\n      case 'ready':\n      case 'updated':\n        await this._connection._livedata_data(msg);\n        break;\n\n      case 'nosub':\n        await this._connection._livedata_nosub(msg);\n        break;\n\n      case 'result':\n        await this._connection._livedata_result(msg);\n        break;\n\n      case 'error':\n        this._connection._livedata_error(msg);\n        break;\n\n      default:\n        Meteor._debug('discarding unknown livedata message type', msg);\n    }\n  }\n\n  /**\n   * Handles failed connection messages\n   * @private\n   * @param {Object} msg The failed message object\n   */\n  _handleFailedMessage(msg) {\n    if (this._connection._supportedDDPVersions.indexOf(msg.version) >= 0) {\n      this._connection._versionSuggestion = msg.version;\n      this._connection._stream.reconnect({ _force: true });\n    } else {\n      const description =\n        'DDP version negotiation failed; server requested version ' +\n        msg.version;\n      this._connection._stream.disconnect({ _permanent: true, _error: description });\n      this._connection.options.onDDPVersionNegotiationFailure(description);\n    }\n  }\n\n  /**\n   * Handles connection reset events\n   */\n  onReset() {\n    // Reset is called even on the first connection, so this is\n    // the only place we send this message.\n    const msg = this._buildConnectMessage();\n    this._connection._send(msg);\n\n    // Mark non-retry calls as failed and handle outstanding methods\n    this._handleOutstandingMethodsOnReset();\n\n    // Now, to minimize setup latency, go ahead and blast out all of\n    // our pending methods ands subscriptions before we've even taken\n    // the necessary RTT to know if we successfully reconnected.\n    this._connection._callOnReconnectAndSendAppropriateOutstandingMethods();\n    this._resendSubscriptions();\n  }\n\n  /**\n   * Builds the initial connect message\n   * @private\n   * @returns {Object} The connect message object\n   */\n  _buildConnectMessage() {\n    const msg = { msg: 'connect' };\n    if (this._connection._lastSessionId) {\n      msg.session = this._connection._lastSessionId;\n    }\n    msg.version = this._connection._versionSuggestion || this._connection._supportedDDPVersions[0];\n    this._connection._versionSuggestion = msg.version;\n    msg.support = this._connection._supportedDDPVersions;\n    return msg;\n  }\n\n  /**\n   * Handles outstanding methods during a reset\n   * @private\n   */\n  _handleOutstandingMethodsOnReset() {\n    const blocks = this._connection._outstandingMethodBlocks;\n    if (blocks.length === 0) return;\n\n    const currentMethodBlock = blocks[0].methods;\n    blocks[0].methods = currentMethodBlock.filter(\n      methodInvoker => {\n        // Methods with 'noRetry' option set are not allowed to re-send after\n        // recovering dropped connection.\n        if (methodInvoker.sentMessage && methodInvoker.noRetry) {\n          methodInvoker.receiveResult(\n            new Meteor.Error(\n              'invocation-failed',\n              'Method invocation might have failed due to dropped connection. ' +\n              'Failing because `noRetry` option was passed to Meteor.apply.'\n            )\n          );\n        }\n\n        // Only keep a method if it wasn't sent or it's allowed to retry.\n        return !(methodInvoker.sentMessage && methodInvoker.noRetry);\n      }\n    );\n\n    // Clear empty blocks\n    if (blocks.length > 0 && blocks[0].methods.length === 0) {\n      blocks.shift();\n    }\n\n    // Reset all method invokers as unsent\n    Object.values(this._connection._methodInvokers).forEach(invoker => {\n      invoker.sentMessage = false;\n    });\n  }\n\n  /**\n   * Resends all active subscriptions\n   * @private\n   */\n  _resendSubscriptions() {\n    Object.entries(this._connection._subscriptions).forEach(([id, sub]) => {\n      this._connection._sendQueued({\n        msg: 'sub',\n        id: id,\n        name: sub.name,\n        params: sub.params\n      });\n    });\n  }\n}"],"mappings":"AAAAA,MAAM,CAACC,MAAM,CAAC;EAACC,wBAAwB,EAACA,CAAA,KAAIA;AAAwB,CAAC,CAAC;AAAC,IAAIC,SAAS;AAACH,MAAM,CAACI,IAAI,CAAC,mBAAmB,EAAC;EAACD,SAASA,CAACE,CAAC,EAAC;IAACF,SAAS,GAACE,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAAC,IAAIC,MAAM;AAACN,MAAM,CAACI,IAAI,CAAC,eAAe,EAAC;EAACE,MAAMA,CAACD,CAAC,EAAC;IAACC,MAAM,GAACD,CAAC;EAAA;AAAC,CAAC,EAAC,CAAC,CAAC;AAG5M,MAAMH,wBAAwB,CAAC;EACpCK,WAAWA,CAACC,UAAU,EAAE;IACtB,IAAI,CAACC,WAAW,GAAGD,UAAU;EAC/B;;EAEA;AACF;AACA;AACA;EACE,MAAME,SAASA,CAACC,OAAO,EAAE;IACvB,IAAIC,GAAG;IACP,IAAI;MACFA,GAAG,GAAGT,SAAS,CAACU,QAAQ,CAACF,OAAO,CAAC;IACnC,CAAC,CAAC,OAAOG,CAAC,EAAE;MACVR,MAAM,CAACS,MAAM,CAAC,6BAA6B,EAAED,CAAC,CAAC;MAC/C;IACF;;IAEA;IACA;IACA,IAAI,IAAI,CAACL,WAAW,CAACO,UAAU,EAAE;MAC/B,IAAI,CAACP,WAAW,CAACO,UAAU,CAACC,eAAe,CAAC,CAAC;IAC/C;IAEA,IAAIL,GAAG,KAAK,IAAI,IAAI,CAACA,GAAG,CAACA,GAAG,EAAE;MAC5B,IAAG,CAACA,GAAG,IAAI,CAACA,GAAG,CAACM,oBAAoB,EAAE;QACpC,IAAIC,MAAM,CAACC,IAAI,CAACR,GAAG,CAAC,CAACS,MAAM,KAAK,CAAC,IAAIT,GAAG,CAACU,SAAS,EAAE;QACpDhB,MAAM,CAACS,MAAM,CAAC,qCAAqC,EAAEH,GAAG,CAAC;MAC3D;MACA;IACF;;IAEA;IACA;IACA,IAAIA,GAAG,CAACA,GAAG,KAAK,WAAW,EAAE;MAC3B,IAAI,CAACH,WAAW,CAACc,QAAQ,GAAG,IAAI,CAACd,WAAW,CAACe,kBAAkB;IACjE;IAEA,MAAM,IAAI,CAACC,aAAa,CAACb,GAAG,CAAC;EAC/B;;EAEA;AACF;AACA;AACA;AACA;EACE,MAAMa,aAAaA,CAACb,GAAG,EAAE;IACvB,QAAQA,GAAG,CAACA,GAAG;MACb,KAAK,WAAW;QACd,MAAM,IAAI,CAACH,WAAW,CAACiB,mBAAmB,CAACd,GAAG,CAAC;QAC/C,IAAI,CAACH,WAAW,CAACkB,OAAO,CAACC,WAAW,CAAC,CAAC;QACtC;MAEF,KAAK,QAAQ;QACX,MAAM,IAAI,CAACC,oBAAoB,CAACjB,GAAG,CAAC;QACpC;MAEF,KAAK,MAAM;QACT,IAAI,IAAI,CAACH,WAAW,CAACkB,OAAO,CAACG,cAAc,EAAE;UAC3C,IAAI,CAACrB,WAAW,CAACsB,KAAK,CAAC;YAAEnB,GAAG,EAAE,MAAM;YAAEoB,EAAE,EAAEpB,GAAG,CAACoB;UAAG,CAAC,CAAC;QACrD;QACA;MAEF,KAAK,MAAM;QACT;QACA;MAEF,KAAK,OAAO;MACZ,KAAK,SAAS;MACd,KAAK,SAAS;MACd,KAAK,OAAO;MACZ,KAAK,SAAS;QACZ,MAAM,IAAI,CAACvB,WAAW,CAACwB,cAAc,CAACrB,GAAG,CAAC;QAC1C;MAEF,KAAK,OAAO;QACV,MAAM,IAAI,CAACH,WAAW,CAACyB,eAAe,CAACtB,GAAG,CAAC;QAC3C;MAEF,KAAK,QAAQ;QACX,MAAM,IAAI,CAACH,WAAW,CAAC0B,gBAAgB,CAACvB,GAAG,CAAC;QAC5C;MAEF,KAAK,OAAO;QACV,IAAI,CAACH,WAAW,CAAC2B,eAAe,CAACxB,GAAG,CAAC;QACrC;MAEF;QACEN,MAAM,CAACS,MAAM,CAAC,0CAA0C,EAAEH,GAAG,CAAC;IAClE;EACF;;EAEA;AACF;AACA;AACA;AACA;EACEiB,oBAAoBA,CAACjB,GAAG,EAAE;IACxB,IAAI,IAAI,CAACH,WAAW,CAAC4B,qBAAqB,CAACC,OAAO,CAAC1B,GAAG,CAAC2B,OAAO,CAAC,IAAI,CAAC,EAAE;MACpE,IAAI,CAAC9B,WAAW,CAACe,kBAAkB,GAAGZ,GAAG,CAAC2B,OAAO;MACjD,IAAI,CAAC9B,WAAW,CAAC+B,OAAO,CAACC,SAAS,CAAC;QAAEC,MAAM,EAAE;MAAK,CAAC,CAAC;IACtD,CAAC,MAAM;MACL,MAAMC,WAAW,GACf,2DAA2D,GAC3D/B,GAAG,CAAC2B,OAAO;MACb,IAAI,CAAC9B,WAAW,CAAC+B,OAAO,CAACI,UAAU,CAAC;QAAEC,UAAU,EAAE,IAAI;QAAEC,MAAM,EAAEH;MAAY,CAAC,CAAC;MAC9E,IAAI,CAAClC,WAAW,CAACkB,OAAO,CAACoB,8BAA8B,CAACJ,WAAW,CAAC;IACtE;EACF;;EAEA;AACF;AACA;EACEK,OAAOA,CAAA,EAAG;IACR;IACA;IACA,MAAMpC,GAAG,GAAG,IAAI,CAACqC,oBAAoB,CAAC,CAAC;IACvC,IAAI,CAACxC,WAAW,CAACsB,KAAK,CAACnB,GAAG,CAAC;;IAE3B;IACA,IAAI,CAACsC,gCAAgC,CAAC,CAAC;;IAEvC;IACA;IACA;IACA,IAAI,CAACzC,WAAW,CAAC0C,oDAAoD,CAAC,CAAC;IACvE,IAAI,CAACC,oBAAoB,CAAC,CAAC;EAC7B;;EAEA;AACF;AACA;AACA;AACA;EACEH,oBAAoBA,CAAA,EAAG;IACrB,MAAMrC,GAAG,GAAG;MAAEA,GAAG,EAAE;IAAU,CAAC;IAC9B,IAAI,IAAI,CAACH,WAAW,CAAC4C,cAAc,EAAE;MACnCzC,GAAG,CAAC0C,OAAO,GAAG,IAAI,CAAC7C,WAAW,CAAC4C,cAAc;IAC/C;IACAzC,GAAG,CAAC2B,OAAO,GAAG,IAAI,CAAC9B,WAAW,CAACe,kBAAkB,IAAI,IAAI,CAACf,WAAW,CAAC4B,qBAAqB,CAAC,CAAC,CAAC;IAC9F,IAAI,CAAC5B,WAAW,CAACe,kBAAkB,GAAGZ,GAAG,CAAC2B,OAAO;IACjD3B,GAAG,CAAC2C,OAAO,GAAG,IAAI,CAAC9C,WAAW,CAAC4B,qBAAqB;IACpD,OAAOzB,GAAG;EACZ;;EAEA;AACF;AACA;AACA;EACEsC,gCAAgCA,CAAA,EAAG;IACjC,MAAMM,MAAM,GAAG,IAAI,CAAC/C,WAAW,CAACgD,wBAAwB;IACxD,IAAID,MAAM,CAACnC,MAAM,KAAK,CAAC,EAAE;IAEzB,MAAMqC,kBAAkB,GAAGF,MAAM,CAAC,CAAC,CAAC,CAACG,OAAO;IAC5CH,MAAM,CAAC,CAAC,CAAC,CAACG,OAAO,GAAGD,kBAAkB,CAACE,MAAM,CAC3CC,aAAa,IAAI;MACf;MACA;MACA,IAAIA,aAAa,CAACC,WAAW,IAAID,aAAa,CAACE,OAAO,EAAE;QACtDF,aAAa,CAACG,aAAa,CACzB,IAAI1D,MAAM,CAAC2D,KAAK,CACd,mBAAmB,EACnB,iEAAiE,GACjE,8DACF,CACF,CAAC;MACH;;MAEA;MACA,OAAO,EAAEJ,aAAa,CAACC,WAAW,IAAID,aAAa,CAACE,OAAO,CAAC;IAC9D,CACF,CAAC;;IAED;IACA,IAAIP,MAAM,CAACnC,MAAM,GAAG,CAAC,IAAImC,MAAM,CAAC,CAAC,CAAC,CAACG,OAAO,CAACtC,MAAM,KAAK,CAAC,EAAE;MACvDmC,MAAM,CAACU,KAAK,CAAC,CAAC;IAChB;;IAEA;IACA/C,MAAM,CAACgD,MAAM,CAAC,IAAI,CAAC1D,WAAW,CAAC2D,eAAe,CAAC,CAACC,OAAO,CAACC,OAAO,IAAI;MACjEA,OAAO,CAACR,WAAW,GAAG,KAAK;IAC7B,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;EACEV,oBAAoBA,CAAA,EAAG;IACrBjC,MAAM,CAACoD,OAAO,CAAC,IAAI,CAAC9D,WAAW,CAAC+D,cAAc,CAAC,CAACH,OAAO,CAACI,IAAA,IAAe;MAAA,IAAd,CAACzC,EAAE,EAAE0C,GAAG,CAAC,GAAAD,IAAA;MAChE,IAAI,CAAChE,WAAW,CAACkE,WAAW,CAAC;QAC3B/D,GAAG,EAAE,KAAK;QACVoB,EAAE,EAAEA,EAAE;QACN4C,IAAI,EAAEF,GAAG,CAACE,IAAI;QACdC,MAAM,EAAEH,GAAG,CAACG;MACd,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ;AACF","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"0d08c007e8ede80d3746e81ef4725c8851f5c17f"}
