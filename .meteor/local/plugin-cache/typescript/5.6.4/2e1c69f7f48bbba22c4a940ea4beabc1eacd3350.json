{"metadata":{},"options":{"assumptions":{},"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"C:\\Users\\snntv\\OneDrive\\Documents\\AI Agent\\projects\\Meteor\\BlueSky\\packages\\mongo\\remote_collection_driver.ts","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions","topLevelAwait","objectRestSpread","objectRestSpread","asyncGenerators","classProperties","classPrivateProperties","jsx","nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread","logicalAssignment"],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"caller":{"name":"meteor","arch":"os.windows.x86_64"},"sourceFileName":"packages/mongo/remote_collection_driver.ts","filename":"C:\\Users\\snntv\\OneDrive\\Documents\\AI Agent\\projects\\Meteor\\BlueSky\\packages\\mongo\\remote_collection_driver.ts","inputSourceMap":{"version":3,"file":"packages/mongo/remote_collection_driver.ts","sourceRoot":"","sources":["packages/mongo/remote_collection_driver.ts"],"names":[],"mappings":"AAAA,OAAO,IAAI,MAAM,aAAa,CAAC;AAC/B,OAAO,EACL,wBAAwB,EACxB,kBAAkB,EAClB,mBAAmB,EACpB,MAAM,4BAA4B,CAAC;AACpC,OAAO,EAAE,eAAe,EAAE,MAAM,oBAAoB,CAAC;AA2CrD,MAAM,sBAAsB;IACT,KAAK,CAAkB;IAEhC,MAAM,CAAU,yBAAyB,GAAG;QAClD,6BAA6B;QAC7B,gBAAgB;QAChB,kBAAkB;QAClB,kBAAkB;QAClB,gBAAgB;QAChB,qBAAqB;QACrB,wBAAwB;QACxB,MAAM;QACN,cAAc;QACd,aAAa;QACb,eAAe;QACf,aAAa;QACb,aAAa;QACb,aAAa;KACL,CAAC;IAEX,YAAY,QAAgB,EAAE,OAA2B;QACvD,IAAI,CAAC,KAAK,GAAG,IAAI,eAAe,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IACtD,CAAC;IAEM,IAAI,CAAC,IAAY;QACtB,MAAM,GAAG,GAAuB,EAAE,CAAC;QAEnC,mCAAmC;QACnC,sBAAsB,CAAC,yBAAyB,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YAClE,+EAA+E;YAC/E,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAwB,CAAC;YAC9D,GAAG,CAAC,MAAM,CAAC,GAAG,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAEjD,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,MAAM,CAAC;gBAAE,OAAO;YAEvD,MAAM,eAAe,GAAG,kBAAkB,CAAC,MAAM,CAAC,CAAC;YACnD,GAAG,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,IAAe,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;QAEH,6BAA6B;QAC7B,mBAAmB,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YACrC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,IAAe,EAAS,EAAE;gBAC1C,MAAM,IAAI,KAAK,CACb,GAAG,MAAM,+CAA+C,kBAAkB,CACxE,MAAM,CACP,aAAa,CACf,CAAC;YACJ,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,OAAO,GAAG,CAAC;IACb,CAAC;;AAGH,qCAAqC;AACrC,cAAc,CAAC,sBAAsB,GAAG,sBAAsB,CAAC;AAE/D,6DAA6D;AAC7D,cAAc,CAAC,6BAA6B,GAAG,IAAI,CAAC,GAA2B,EAAE;IAC/E,MAAM,iBAAiB,GAAuB,EAAE,CAAC;IACjD,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC;IAEvC,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;IAC1D,CAAC;IAED,IAAI,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,CAAC;QAChC,iBAAiB,CAAC,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC;IAC3D,CAAC;IAED,MAAM,MAAM,GAAG,IAAI,sBAAsB,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;IAEvE,4CAA4C;IAC5C,MAAM,CAAC,OAAO,CAAC,KAAK,IAAmB,EAAE;QACvC,MAAM,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC,CAAC;AAEH,OAAO,EAAE,sBAAsB,EAA0C,CAAC","sourcesContent":["import once from 'lodash.once';\nimport {\n  ASYNC_COLLECTION_METHODS,\n  getAsyncMethodName,\n  CLIENT_ONLY_METHODS\n} from \"meteor/minimongo/constants\";\nimport { MongoConnection } from './mongo_connection';\n\n// Define interfaces and types\ninterface IConnectionOptions {\n  oplogUrl?: string;\n  [key: string]: unknown;  // Changed from 'any' to 'unknown' for better type safety\n}\n\ninterface IMongoInternals {\n  RemoteCollectionDriver: typeof RemoteCollectionDriver;\n  defaultRemoteCollectionDriver: () => RemoteCollectionDriver;\n}\n\n// More specific typing for collection methods\ntype MongoMethodFunction = (...args: unknown[]) => unknown;\ninterface ICollectionMethods {\n  [key: string]: MongoMethodFunction;\n}\n\n// Type for MongoConnection\ninterface IMongoClient {\n  connect: () => Promise<void>;\n}\n\ninterface IMongoConnection {\n  client: IMongoClient;\n  [key: string]: MongoMethodFunction | IMongoClient;\n}\n\ndeclare global {\n  namespace NodeJS {\n    interface ProcessEnv {\n      MONGO_URL: string;\n      MONGO_OPLOG_URL?: string;\n    }\n  }\n\n  const MongoInternals: IMongoInternals;\n  const Meteor: {\n    startup: (callback: () => Promise<void>) => void;\n  };\n}\n\nclass RemoteCollectionDriver {\n  private readonly mongo: MongoConnection;\n\n  private static readonly REMOTE_COLLECTION_METHODS = [\n    'createCappedCollectionAsync',\n    'dropIndexAsync',\n    'ensureIndexAsync',\n    'createIndexAsync',\n    'countDocuments',\n    'dropCollectionAsync',\n    'estimatedDocumentCount',\n    'find',\n    'findOneAsync',\n    'insertAsync',\n    'rawCollection',\n    'removeAsync',\n    'updateAsync',\n    'upsertAsync',\n  ] as const;\n\n  constructor(mongoUrl: string, options: IConnectionOptions) {\n    this.mongo = new MongoConnection(mongoUrl, options);\n  }\n\n  public open(name: string): ICollectionMethods {\n    const ret: ICollectionMethods = {};\n\n    // Handle remote collection methods\n    RemoteCollectionDriver.REMOTE_COLLECTION_METHODS.forEach((method) => {\n      // Type assertion needed because we know these methods exist on MongoConnection\n      const mongoMethod = this.mongo[method] as MongoMethodFunction;\n      ret[method] = mongoMethod.bind(this.mongo, name);\n\n      if (!ASYNC_COLLECTION_METHODS.includes(method)) return;\n\n      const asyncMethodName = getAsyncMethodName(method);\n      ret[asyncMethodName] = (...args: unknown[]) => ret[method](...args);\n    });\n\n    // Handle client-only methods\n    CLIENT_ONLY_METHODS.forEach((method) => {\n      ret[method] = (...args: unknown[]): never => {\n        throw new Error(\n          `${method} is not available on the server. Please use ${getAsyncMethodName(\n            method\n          )}() instead.`\n        );\n      };\n    });\n\n    return ret;\n  }\n}\n\n// Assign the class to MongoInternals\nMongoInternals.RemoteCollectionDriver = RemoteCollectionDriver;\n\n// Create the singleton RemoteCollectionDriver only on demand\nMongoInternals.defaultRemoteCollectionDriver = once((): RemoteCollectionDriver => {\n  const connectionOptions: IConnectionOptions = {};\n  const mongoUrl = process.env.MONGO_URL;\n\n  if (!mongoUrl) {\n    throw new Error(\"MONGO_URL must be set in environment\");\n  }\n\n  if (process.env.MONGO_OPLOG_URL) {\n    connectionOptions.oplogUrl = process.env.MONGO_OPLOG_URL;\n  }\n\n  const driver = new RemoteCollectionDriver(mongoUrl, connectionOptions);\n\n  // Initialize database connection on startup\n  Meteor.startup(async (): Promise<void> => {\n    await driver.mongo.client.connect();\n  });\n\n  return driver;\n});\n\nexport { RemoteCollectionDriver, IConnectionOptions, ICollectionMethods };"]},"targets":{},"cloneInputAst":true,"browserslistConfigFile":false,"passPerPreset":false,"envName":"development","cwd":"C:\\Users\\snntv\\OneDrive\\Documents\\AI Agent\\projects\\Meteor\\BlueSky","root":"C:\\Users\\snntv\\OneDrive\\Documents\\AI Agent\\projects\\Meteor\\BlueSky","rootMode":"root","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":false,"enforceStrictMode":false,"dynamicImport":true,"generateLetDeclarations":true,"topLevelAwait":true},"externalDependencies":[]},{"key":"transform-runtime","visitor":{"ObjectPattern":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]},"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.17.2","helpers":true,"useESModules":false,"corejs":false},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{"loose":true},"externalDependencies":[]},{"key":"transform-react-jsx","visitor":{"JSXNamespacedName":{"enter":[null]},"JSXSpreadChild":{"enter":[null]},"Program":{"enter":[null]},"JSXFragment":{"exit":[null]},"JSXElement":{"exit":[null]},"JSXAttribute":{"enter":[null]}},"options":{"pragma":"React.createElement","pragmaFrag":"React.Fragment","runtime":"classic","throwIfNamespace":true,"useBuiltIns":false},"externalDependencies":[]},{"key":"transform-react-display-name","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-react-pure-annotations","visitor":{"CallExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-nullish-coalescing-operator","visitor":{"LogicalExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-chaining","visitor":{"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-optional-catch-binding","visitor":{"CatchClause":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-class-properties","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-async-generator-functions","visitor":{"Program":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"proposal-object-rest-spread","visitor":{"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"proposal-logical-assignment-operators","visitor":{"AssignmentExpression":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{},"externalDependencies":[]},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{},"externalDependencies":[]}],"presets":[],"generatorOpts":{"filename":"C:\\Users\\snntv\\OneDrive\\Documents\\AI Agent\\projects\\Meteor\\BlueSky\\packages\\mongo\\remote_collection_driver.ts","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"packages/mongo/remote_collection_driver.ts","inputSourceMap":{"version":3,"file":"packages/mongo/remote_collection_driver.ts","sourceRoot":"","sources":["packages/mongo/remote_collection_driver.ts"],"names":[],"mappings":"AAAA,OAAO,IAAI,MAAM,aAAa,CAAC;AAC/B,OAAO,EACL,wBAAwB,EACxB,kBAAkB,EAClB,mBAAmB,EACpB,MAAM,4BAA4B,CAAC;AACpC,OAAO,EAAE,eAAe,EAAE,MAAM,oBAAoB,CAAC;AA2CrD,MAAM,sBAAsB;IACT,KAAK,CAAkB;IAEhC,MAAM,CAAU,yBAAyB,GAAG;QAClD,6BAA6B;QAC7B,gBAAgB;QAChB,kBAAkB;QAClB,kBAAkB;QAClB,gBAAgB;QAChB,qBAAqB;QACrB,wBAAwB;QACxB,MAAM;QACN,cAAc;QACd,aAAa;QACb,eAAe;QACf,aAAa;QACb,aAAa;QACb,aAAa;KACL,CAAC;IAEX,YAAY,QAAgB,EAAE,OAA2B;QACvD,IAAI,CAAC,KAAK,GAAG,IAAI,eAAe,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IACtD,CAAC;IAEM,IAAI,CAAC,IAAY;QACtB,MAAM,GAAG,GAAuB,EAAE,CAAC;QAEnC,mCAAmC;QACnC,sBAAsB,CAAC,yBAAyB,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YAClE,+EAA+E;YAC/E,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAwB,CAAC;YAC9D,GAAG,CAAC,MAAM,CAAC,GAAG,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;YAEjD,IAAI,CAAC,wBAAwB,CAAC,QAAQ,CAAC,MAAM,CAAC;gBAAE,OAAO;YAEvD,MAAM,eAAe,GAAG,kBAAkB,CAAC,MAAM,CAAC,CAAC;YACnD,GAAG,CAAC,eAAe,CAAC,GAAG,CAAC,GAAG,IAAe,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;QACtE,CAAC,CAAC,CAAC;QAEH,6BAA6B;QAC7B,mBAAmB,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;YACrC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,IAAe,EAAS,EAAE;gBAC1C,MAAM,IAAI,KAAK,CACb,GAAG,MAAM,+CAA+C,kBAAkB,CACxE,MAAM,CACP,aAAa,CACf,CAAC;YACJ,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,OAAO,GAAG,CAAC;IACb,CAAC;;AAGH,qCAAqC;AACrC,cAAc,CAAC,sBAAsB,GAAG,sBAAsB,CAAC;AAE/D,6DAA6D;AAC7D,cAAc,CAAC,6BAA6B,GAAG,IAAI,CAAC,GAA2B,EAAE;IAC/E,MAAM,iBAAiB,GAAuB,EAAE,CAAC;IACjD,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC;IAEvC,IAAI,CAAC,QAAQ,EAAE,CAAC;QACd,MAAM,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC;IAC1D,CAAC;IAED,IAAI,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,CAAC;QAChC,iBAAiB,CAAC,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC;IAC3D,CAAC;IAED,MAAM,MAAM,GAAG,IAAI,sBAAsB,CAAC,QAAQ,EAAE,iBAAiB,CAAC,CAAC;IAEvE,4CAA4C;IAC5C,MAAM,CAAC,OAAO,CAAC,KAAK,IAAmB,EAAE;QACvC,MAAM,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;IACtC,CAAC,CAAC,CAAC;IAEH,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC,CAAC;AAEH,OAAO,EAAE,sBAAsB,EAA0C,CAAC","sourcesContent":["import once from 'lodash.once';\nimport {\n  ASYNC_COLLECTION_METHODS,\n  getAsyncMethodName,\n  CLIENT_ONLY_METHODS\n} from \"meteor/minimongo/constants\";\nimport { MongoConnection } from './mongo_connection';\n\n// Define interfaces and types\ninterface IConnectionOptions {\n  oplogUrl?: string;\n  [key: string]: unknown;  // Changed from 'any' to 'unknown' for better type safety\n}\n\ninterface IMongoInternals {\n  RemoteCollectionDriver: typeof RemoteCollectionDriver;\n  defaultRemoteCollectionDriver: () => RemoteCollectionDriver;\n}\n\n// More specific typing for collection methods\ntype MongoMethodFunction = (...args: unknown[]) => unknown;\ninterface ICollectionMethods {\n  [key: string]: MongoMethodFunction;\n}\n\n// Type for MongoConnection\ninterface IMongoClient {\n  connect: () => Promise<void>;\n}\n\ninterface IMongoConnection {\n  client: IMongoClient;\n  [key: string]: MongoMethodFunction | IMongoClient;\n}\n\ndeclare global {\n  namespace NodeJS {\n    interface ProcessEnv {\n      MONGO_URL: string;\n      MONGO_OPLOG_URL?: string;\n    }\n  }\n\n  const MongoInternals: IMongoInternals;\n  const Meteor: {\n    startup: (callback: () => Promise<void>) => void;\n  };\n}\n\nclass RemoteCollectionDriver {\n  private readonly mongo: MongoConnection;\n\n  private static readonly REMOTE_COLLECTION_METHODS = [\n    'createCappedCollectionAsync',\n    'dropIndexAsync',\n    'ensureIndexAsync',\n    'createIndexAsync',\n    'countDocuments',\n    'dropCollectionAsync',\n    'estimatedDocumentCount',\n    'find',\n    'findOneAsync',\n    'insertAsync',\n    'rawCollection',\n    'removeAsync',\n    'updateAsync',\n    'upsertAsync',\n  ] as const;\n\n  constructor(mongoUrl: string, options: IConnectionOptions) {\n    this.mongo = new MongoConnection(mongoUrl, options);\n  }\n\n  public open(name: string): ICollectionMethods {\n    const ret: ICollectionMethods = {};\n\n    // Handle remote collection methods\n    RemoteCollectionDriver.REMOTE_COLLECTION_METHODS.forEach((method) => {\n      // Type assertion needed because we know these methods exist on MongoConnection\n      const mongoMethod = this.mongo[method] as MongoMethodFunction;\n      ret[method] = mongoMethod.bind(this.mongo, name);\n\n      if (!ASYNC_COLLECTION_METHODS.includes(method)) return;\n\n      const asyncMethodName = getAsyncMethodName(method);\n      ret[asyncMethodName] = (...args: unknown[]) => ret[method](...args);\n    });\n\n    // Handle client-only methods\n    CLIENT_ONLY_METHODS.forEach((method) => {\n      ret[method] = (...args: unknown[]): never => {\n        throw new Error(\n          `${method} is not available on the server. Please use ${getAsyncMethodName(\n            method\n          )}() instead.`\n        );\n      };\n    });\n\n    return ret;\n  }\n}\n\n// Assign the class to MongoInternals\nMongoInternals.RemoteCollectionDriver = RemoteCollectionDriver;\n\n// Create the singleton RemoteCollectionDriver only on demand\nMongoInternals.defaultRemoteCollectionDriver = once((): RemoteCollectionDriver => {\n  const connectionOptions: IConnectionOptions = {};\n  const mongoUrl = process.env.MONGO_URL;\n\n  if (!mongoUrl) {\n    throw new Error(\"MONGO_URL must be set in environment\");\n  }\n\n  if (process.env.MONGO_OPLOG_URL) {\n    connectionOptions.oplogUrl = process.env.MONGO_OPLOG_URL;\n  }\n\n  const driver = new RemoteCollectionDriver(mongoUrl, connectionOptions);\n\n  // Initialize database connection on startup\n  Meteor.startup(async (): Promise<void> => {\n    await driver.mongo.client.connect();\n  });\n\n  return driver;\n});\n\nexport { RemoteCollectionDriver, IConnectionOptions, ICollectionMethods };"]}}},"code":"!module.wrapAsync(async function (module, __reifyWaitForDeps__, __reify_async_result__) {\n  \"use strict\";\n  try {\n    module.export({\n      RemoteCollectionDriver: () => RemoteCollectionDriver\n    });\n    let once;\n    module.link(\"lodash.once\", {\n      default(v) {\n        once = v;\n      }\n    }, 0);\n    let ASYNC_COLLECTION_METHODS, getAsyncMethodName, CLIENT_ONLY_METHODS;\n    module.link(\"meteor/minimongo/constants\", {\n      ASYNC_COLLECTION_METHODS(v) {\n        ASYNC_COLLECTION_METHODS = v;\n      },\n      getAsyncMethodName(v) {\n        getAsyncMethodName = v;\n      },\n      CLIENT_ONLY_METHODS(v) {\n        CLIENT_ONLY_METHODS = v;\n      }\n    }, 1);\n    let MongoConnection;\n    module.link(\"./mongo_connection\", {\n      MongoConnection(v) {\n        MongoConnection = v;\n      }\n    }, 2);\n    if (__reifyWaitForDeps__()) (await __reifyWaitForDeps__())();\n    class RemoteCollectionDriver {\n      constructor(mongoUrl, options) {\n        this.mongo = void 0;\n        this.mongo = new MongoConnection(mongoUrl, options);\n      }\n      open(name) {\n        const ret = {};\n        // Handle remote collection methods\n        RemoteCollectionDriver.REMOTE_COLLECTION_METHODS.forEach(method => {\n          // Type assertion needed because we know these methods exist on MongoConnection\n          const mongoMethod = this.mongo[method];\n          ret[method] = mongoMethod.bind(this.mongo, name);\n          if (!ASYNC_COLLECTION_METHODS.includes(method)) return;\n          const asyncMethodName = getAsyncMethodName(method);\n          ret[asyncMethodName] = function () {\n            return ret[method](...arguments);\n          };\n        });\n        // Handle client-only methods\n        CLIENT_ONLY_METHODS.forEach(method => {\n          ret[method] = function () {\n            throw new Error(\"\".concat(method, \" is not available on the server. Please use \").concat(getAsyncMethodName(method), \"() instead.\"));\n          };\n        });\n        return ret;\n      }\n    }\n    // Assign the class to MongoInternals\n    RemoteCollectionDriver.REMOTE_COLLECTION_METHODS = ['createCappedCollectionAsync', 'dropIndexAsync', 'ensureIndexAsync', 'createIndexAsync', 'countDocuments', 'dropCollectionAsync', 'estimatedDocumentCount', 'find', 'findOneAsync', 'insertAsync', 'rawCollection', 'removeAsync', 'updateAsync', 'upsertAsync'];\n    MongoInternals.RemoteCollectionDriver = RemoteCollectionDriver;\n    // Create the singleton RemoteCollectionDriver only on demand\n    MongoInternals.defaultRemoteCollectionDriver = once(() => {\n      const connectionOptions = {};\n      const mongoUrl = process.env.MONGO_URL;\n      if (!mongoUrl) {\n        throw new Error(\"MONGO_URL must be set in environment\");\n      }\n      if (process.env.MONGO_OPLOG_URL) {\n        connectionOptions.oplogUrl = process.env.MONGO_OPLOG_URL;\n      }\n      const driver = new RemoteCollectionDriver(mongoUrl, connectionOptions);\n      // Initialize database connection on startup\n      Meteor.startup(async () => {\n        await driver.mongo.client.connect();\n      });\n      return driver;\n    });\n    __reify_async_result__();\n  } catch (_reifyError) {\n    return __reify_async_result__(_reifyError);\n  }\n  __reify_async_result__()\n}, {\n  self: this,\n  async: false\n});","map":{"version":3,"names":["module","export","RemoteCollectionDriver","once","link","default","v","ASYNC_COLLECTION_METHODS","getAsyncMethodName","CLIENT_ONLY_METHODS","MongoConnection","__reifyWaitForDeps__","constructor","mongoUrl","options","mongo","open","name","ret","REMOTE_COLLECTION_METHODS","forEach","method","mongoMethod","bind","includes","asyncMethodName","arguments","Error","concat","MongoInternals","defaultRemoteCollectionDriver","connectionOptions","process","env","MONGO_URL","MONGO_OPLOG_URL","oplogUrl","driver","Meteor","startup","client","connect","__reify_async_result__","_reifyError","self","async"],"sources":["packages/mongo/remote_collection_driver.ts"],"sourcesContent":["import once from 'lodash.once';\nimport {\n  ASYNC_COLLECTION_METHODS,\n  getAsyncMethodName,\n  CLIENT_ONLY_METHODS\n} from \"meteor/minimongo/constants\";\nimport { MongoConnection } from './mongo_connection';\n\n// Define interfaces and types\ninterface IConnectionOptions {\n  oplogUrl?: string;\n  [key: string]: unknown;  // Changed from 'any' to 'unknown' for better type safety\n}\n\ninterface IMongoInternals {\n  RemoteCollectionDriver: typeof RemoteCollectionDriver;\n  defaultRemoteCollectionDriver: () => RemoteCollectionDriver;\n}\n\n// More specific typing for collection methods\ntype MongoMethodFunction = (...args: unknown[]) => unknown;\ninterface ICollectionMethods {\n  [key: string]: MongoMethodFunction;\n}\n\n// Type for MongoConnection\ninterface IMongoClient {\n  connect: () => Promise<void>;\n}\n\ninterface IMongoConnection {\n  client: IMongoClient;\n  [key: string]: MongoMethodFunction | IMongoClient;\n}\n\ndeclare global {\n  namespace NodeJS {\n    interface ProcessEnv {\n      MONGO_URL: string;\n      MONGO_OPLOG_URL?: string;\n    }\n  }\n\n  const MongoInternals: IMongoInternals;\n  const Meteor: {\n    startup: (callback: () => Promise<void>) => void;\n  };\n}\n\nclass RemoteCollectionDriver {\n  private readonly mongo: MongoConnection;\n\n  private static readonly REMOTE_COLLECTION_METHODS = [\n    'createCappedCollectionAsync',\n    'dropIndexAsync',\n    'ensureIndexAsync',\n    'createIndexAsync',\n    'countDocuments',\n    'dropCollectionAsync',\n    'estimatedDocumentCount',\n    'find',\n    'findOneAsync',\n    'insertAsync',\n    'rawCollection',\n    'removeAsync',\n    'updateAsync',\n    'upsertAsync',\n  ] as const;\n\n  constructor(mongoUrl: string, options: IConnectionOptions) {\n    this.mongo = new MongoConnection(mongoUrl, options);\n  }\n\n  public open(name: string): ICollectionMethods {\n    const ret: ICollectionMethods = {};\n\n    // Handle remote collection methods\n    RemoteCollectionDriver.REMOTE_COLLECTION_METHODS.forEach((method) => {\n      // Type assertion needed because we know these methods exist on MongoConnection\n      const mongoMethod = this.mongo[method] as MongoMethodFunction;\n      ret[method] = mongoMethod.bind(this.mongo, name);\n\n      if (!ASYNC_COLLECTION_METHODS.includes(method)) return;\n\n      const asyncMethodName = getAsyncMethodName(method);\n      ret[asyncMethodName] = (...args: unknown[]) => ret[method](...args);\n    });\n\n    // Handle client-only methods\n    CLIENT_ONLY_METHODS.forEach((method) => {\n      ret[method] = (...args: unknown[]): never => {\n        throw new Error(\n          `${method} is not available on the server. Please use ${getAsyncMethodName(\n            method\n          )}() instead.`\n        );\n      };\n    });\n\n    return ret;\n  }\n}\n\n// Assign the class to MongoInternals\nMongoInternals.RemoteCollectionDriver = RemoteCollectionDriver;\n\n// Create the singleton RemoteCollectionDriver only on demand\nMongoInternals.defaultRemoteCollectionDriver = once((): RemoteCollectionDriver => {\n  const connectionOptions: IConnectionOptions = {};\n  const mongoUrl = process.env.MONGO_URL;\n\n  if (!mongoUrl) {\n    throw new Error(\"MONGO_URL must be set in environment\");\n  }\n\n  if (process.env.MONGO_OPLOG_URL) {\n    connectionOptions.oplogUrl = process.env.MONGO_OPLOG_URL;\n  }\n\n  const driver = new RemoteCollectionDriver(mongoUrl, connectionOptions);\n\n  // Initialize database connection on startup\n  Meteor.startup(async (): Promise<void> => {\n    await driver.mongo.client.connect();\n  });\n\n  return driver;\n});\n\nexport { RemoteCollectionDriver, IConnectionOptions, ICollectionMethods };"],"mappings":"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","ignoreList":[]},"sourceType":"module","externalDependencies":{},"hash":"2e1c69f7f48bbba22c4a940ea4beabc1eacd3350"}
